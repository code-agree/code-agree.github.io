[{"content":"1. 分类 #有三种不同的模版类型，\nFunction templates class templates Variable templates 1.1. function templates #template\u0026lt;typename T\u0026gt; T max(T a, T b) { return (a \u0026gt; b) ? a : b; } // 使用：编译器自动推导类型 int x = max(3, 7); // T = int double y = max(3.14, 2.71); // T = double 多参数模版 template\u0026lt;typename T, typename U\u0026gt; auto add(T a, U b) { return a + b; } 函数模板的显式实例化 // 声明模板函数 template\u0026lt;typename T\u0026gt; void process(T value) { // 实现... } // 显式实例化特定类型版本 template void process\u0026lt;int\u0026gt;(int); // 显式实例化int版本 template void process\u0026lt;double\u0026gt;(double); // 显式实例化double版本 可变参数模板函数 // 递归终止条件 void print() { std::cout \u0026lt;\u0026lt; std::endl; } // 可变参数模板 (C++11) template\u0026lt;typename T, typename... Args\u0026gt; void print(T first, Args... rest) { std::cout \u0026lt;\u0026lt; first \u0026lt;\u0026lt; \u0026#34; \u0026#34;; print(rest...); // 递归调用处理剩余参数 } // 使用折叠表达式 (C++17) template\u0026lt;typename... Args\u0026gt; void printAll(Args... args) { (std::cout \u0026lt;\u0026lt; ... \u0026lt;\u0026lt; args) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; // 折叠表达式 } // 使用 print(1, \u0026#34;hello\u0026#34;, 3.14, \u0026#39;c\u0026#39;); // 输出: 1 hello 3.14 c printAll(1, \u0026#34;hello\u0026#34;, 3.14, \u0026#39;c\u0026#39;); // 输出: 1hello3.14c 约束与概念 (C++20) // 使用requires表达式 template\u0026lt;typename T\u0026gt; requires std::integral\u0026lt;T\u0026gt; T gcd(T a, T b) { if (b == 0) return a; return gcd(b, a % b); } // 使用概念的简写形式 template\u0026lt;std::integral T\u0026gt; T lcm(T a, T b) { return (a / gcd(a, b)) * b; } // 使用auto参数简写 (C++20) auto sum(std::integral auto a, std::integral auto b) { return a + b; } SFINAE与类型特性 // 使用std::enable_if进行SFINAE (C++11) template\u0026lt;typename T, typename = std::enable_if_t\u0026lt;std::is_arithmetic_v\u0026lt;T\u0026gt;\u0026gt;\u0026gt; T square(T x) { return x * x; } // 使用tag dispatching区分类型处理 template\u0026lt;typename Iterator\u0026gt; void advance_impl(Iterator\u0026amp; it, int n, std::random_access_iterator_tag) { // 随机访问迭代器可以直接跳跃 it += n; } template\u0026lt;typename Iterator\u0026gt; void advance_impl(Iterator\u0026amp; it, int n, std::bidirectional_iterator_tag) { // 双向迭代器需要循环移动 if (n \u0026gt; 0) { while (n--) ++it; } else { while (n++) --it; } } template\u0026lt;typename Iterator\u0026gt; void advance(Iterator\u0026amp; it, int n) { advance_impl(it, n, typename std::iterator_traits\u0026lt;Iterator\u0026gt;::iterator_category()); } 实际应用案例：通用算法实现 // 泛型快速排序实现 template\u0026lt;typename RandomIt\u0026gt; void quicksort(RandomIt first, RandomIt last) { if (first \u0026lt; last) { auto pivot = *std::next(first, std::distance(first, last) / 2); auto middle1 = std::partition(first, last, [pivot](const auto\u0026amp; em) { return em \u0026lt; pivot; }); auto middle2 = std::partition(middle1, last, [pivot](const auto\u0026amp; em) { return !(pivot \u0026lt; em); }); quicksort(first, middle1); quicksort(middle2, last); } } // 使用 std::vector\u0026lt;int\u0026gt; v = {5, 2, 9, 1, 7, 6, 3}; quicksort(v.begin(), v.end()); // v现在已排序 1.2. class templates # 基础语法 template\u0026lt;typename T\u0026gt; class Vector { private: T* data; size_t size_; public: Vector() : data(nullptr), size_(0) {} void push_back(const T\u0026amp; value) { // 实现... } T\u0026amp; operator[](size_t index) { return data[index]; } }; // 使用：必须明确指定类型 Vector\u0026lt;int\u0026gt; int_vec; Vector\u0026lt;string\u0026gt; str_vec; 非类型模版参数 template\u0026lt;typename T, size_t N\u0026gt; class Array { T data[N]; // 编译时确定大小 public: size_t size() const { return N; } }; Array\u0026lt;int, 10\u0026gt; arr; // 大小为10的int数组 1.3. 模版特化 # 函数模版特化 // 通用版本 template\u0026lt;typename T\u0026gt; void print(T value) { cout \u0026lt;\u0026lt; value; } // 特化版本 template\u0026lt;\u0026gt; void print\u0026lt;const char*\u0026gt;(const char* value) { cout \u0026lt;\u0026lt; \u0026#34;String: \u0026#34; \u0026lt;\u0026lt; value; } 类模版特化 // 通用版本 template\u0026lt;typename T\u0026gt; class Storage { T data; }; // 针对bool的特化 template\u0026lt;\u0026gt; class Storage\u0026lt;bool\u0026gt; { // 特殊的bool存储实现 }; 编译机制 模版是编译时生成代码，不是运行时多态,每种类型都会生成对应的代码实例\nC++模板类用法详解 - 以LockFreeRingBuffer为例 #C++模板类是一种强大的编程工具，允许我们编写通用代码，同时保持类型安全和高性能。我将结合LockFreeRingBuffer这个实际例子来详细讲解。\n#pragma once #include \u0026lt;atomic\u0026gt; #include \u0026lt;array\u0026gt; template\u0026lt;typename T, size_t Size\u0026gt; class LockFreeRingBuffer { static_assert((Size \u0026amp; (Size - 1)) == 0, \u0026#34;Size must be power of 2\u0026#34;); struct alignas(64) Item { // 避免false sharing std::atomic\u0026lt;bool\u0026gt; valid{false}; T data; }; static constexpr size_t MASK = Size - 1; std::array\u0026lt;Item, Size\u0026gt; buffer; alignas(64) std::atomic\u0026lt;size_t\u0026gt; write_index{0}; alignas(64) std::atomic\u0026lt;size_t\u0026gt; read_index{0}; public: bool try_push(const T\u0026amp; item) noexcept { const size_t current = write_index.load(std::memory_order_relaxed); const size_t next = (current + 1) \u0026amp; MASK; if (next == read_index.load(std::memory_order_acquire)) { return false; // buffer is full } buffer[current].data = item; buffer[current].valid.store(true, std::memory_order_release); write_index.store(next, std::memory_order_release); return true; } bool try_pop(T\u0026amp; item) noexcept { const size_t current = read_index.load(std::memory_order_relaxed); if (current == write_index.load(std::memory_order_acquire)) { return false; // buffer is empty } if (!buffer[current].valid.load(std::memory_order_acquire)) { return false; // data not ready } item = std::move(buffer[current].data); buffer[current].valid.store(false, std::memory_order_release); read_index.store((current + 1) \u0026amp; MASK, std::memory_order_release); return true; } }; // 实例化 Common::LockFreeRingBuffer\u0026lt;AggTradeQueueData, QUEUE_SIZE\u0026gt; aggTrade_queue; 1. 模板类的定义 #template\u0026lt;typename T, size_t Size\u0026gt; class LockFreeRingBuffer { // 类的实现... }; 这个声明有两个模板参数：\ntypename T：类型参数，表示缓冲区中存储的数据类型 size_t Size：非类型参数，表示缓冲区的大小（必须是编译时常量） 2. 模板类的实例化 #在实际使用中，通过指定具体的类型和值来创建特定的缓冲区：\n// 创建存储AggTradeQueueData类型数据的缓冲区，大小为8192 Common::LockFreeRingBuffer\u0026lt;AggTradeQueueData, QUEUE_SIZE\u0026gt; aggTrade_queue; // 创建存储TickerQueueData类型数据的缓冲区，大小为8192 Common::LockFreeRingBuffer\u0026lt;TickerQueueData, QUEUE_SIZE\u0026gt; ticker_queue; 编译器会为每种不同的模板参数组合生成不同的类代码。\n3. 内部数据结构的适配 #模板使得内部数据结构可以根据类型自动适配：\nstruct alignas(64) Item { std::atomic\u0026lt;bool\u0026gt; valid{false}; T data; // 这里的T会被替换为实际类型 }; std::array\u0026lt;Item, Size\u0026gt; buffer; // Size会被替换为实际大小 当使用LockFreeRingBuffer\u0026lt;AggTradeQueueData, 8192\u0026gt;时，编译器生成的代码相当于：\nstruct Item { std::atomic\u0026lt;bool\u0026gt; valid{false}; AggTradeQueueData data; // T被替换为AggTradeQueueData }; std::array\u0026lt;Item, 8192\u0026gt; buffer; // Size被替换为8192 4. 模板特化的高级用法 #虽然在这个例子中没有使用，但模板还支持特化，为特定类型提供优化的实现：\n// 主模板 template\u0026lt;typename T, size_t Size\u0026gt; class LockFreeRingBuffer { /*...*/ }; // 为特定类型的特化版本 template\u0026lt;size_t Size\u0026gt; class LockFreeRingBuffer\u0026lt;int, Size\u0026gt; { /*针对int类型的优化实现*/ }; 8. 模板的优势 #从LockFreeRingBuffer的例子可以看出模板的优势：\n代码复用：同一套缓冲区逻辑用于多种数据类型 类型安全：编译时类型检查避免运行时错误 零开销抽象：模板在编译时展开，没有运行时开销 灵活性：可以处理任何符合接口的数据类型 性能优化：编译器可以为特定类型生成优化代码 总结：C++模板类允许我们编写一次代码，适用于多种数据类型，同时保持类型安全和高性能。在高性能系统如交易系统中，这种能力尤为重要。\n","date":"10 June 2025","permalink":"/blog/template_class/","section":"Blog","summary":"\u003ch2 id=\"1-分类\" class=\"relative group\"\u003e1. 分类 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-%e5%88%86%e7%b1%bb\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e有三种不同的模版类型，\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFunction templates\u003c/li\u003e\n\u003cli\u003eclass templates\u003c/li\u003e\n\u003cli\u003eVariable templates\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"11-function-templates\" class=\"relative group\"\u003e1.1. function templates \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#11-function-templates\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nl\"\u003ea\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 使用：编译器自动推导类型\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// T = int\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e3.14\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e2.71\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// T = double\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e多参数模版\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eU\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eU\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e函数模板的显式实例化\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 声明模板函数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eprocess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 实现...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 显式实例化特定类型版本\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 显式实例化int版本\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 显式实例化double版本\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e可变参数模板函数\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 递归终止条件\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 可变参数模板 (C++11)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e \u003cspan class=\"n\"\u003eArgs\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e \u003cspan class=\"n\"\u003erest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erest\u003c/span\u003e\u003cspan class=\"p\"\u003e...);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 递归调用处理剩余参数\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 使用折叠表达式 (C++17)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e \u003cspan class=\"n\"\u003eArgs\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eprintAll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"p\"\u003e...\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 折叠表达式\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 使用\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.14\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;c\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 输出: 1 hello 3.14 c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eprintAll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.14\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;c\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 输出: 1hello3.14c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e约束与概念 (C++20)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 使用requires表达式\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003erequires\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eintegral\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003egcd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nf\"\u003egcd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 使用概念的简写形式\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eintegral\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003elcm\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003egcd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 使用auto参数简写 (C++20)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"nf\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eintegral\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eintegral\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eSFINAE与类型特性\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 使用std::enable_if进行SFINAE (C++11)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_arithmetic_v\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003esquare\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 使用tag dispatching区分类型处理\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eIterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eadvance_impl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003erandom_access_iterator_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 随机访问迭代器可以直接跳跃\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eIterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eadvance_impl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebidirectional_iterator_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 双向迭代器需要循环移动\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eIterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eadvance\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eadvance_impl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eiterator_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003eiterator_category\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e实际应用案例：通用算法实现\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 泛型快速排序实现\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eRandomIt\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003equicksort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eRandomIt\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eRandomIt\u003c/span\u003e \u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003epivot\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003edistance\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003emiddle1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003epartition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003epivot\u003c/span\u003e\u003cspan class=\"p\"\u003e](\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eem\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003epivot\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003emiddle2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003epartition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emiddle1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003epivot\u003c/span\u003e\u003cspan class=\"p\"\u003e](\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epivot\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eem\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003equicksort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emiddle1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003equicksort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emiddle2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 使用\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003equicksort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// v现在已排序\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"12-class-templates\" class=\"relative group\"\u003e1.2. class templates \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#12-class-templates\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e基础语法\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eVector\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eprivate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003esize_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003esize_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003epush_back\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 实现...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"n\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 使用：必须明确指定类型\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eint_vec\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003estr_vec\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e非类型模版参数\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eArray\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 编译时确定大小\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eArray\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 大小为10的int数组\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"13-模版特化\" class=\"relative group\"\u003e1.3. 模版特化 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#13-%e6%a8%a1%e7%89%88%e7%89%b9%e5%8c%96\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e函数模版特化\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 通用版本\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 特化版本\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eprint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;String: \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e类模版特化\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 通用版本\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eStorage\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 针对bool的特化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eStorage\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 特殊的bool存储实现\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003e编译机制\n模版是编译时生成代码，不是运行时多态,每种类型都会生成对应的代码实例\u003c/p\u003e","title":"c++ 模版"},{"content":"","date":null,"permalink":"/","section":"Yu's Space","summary":"","title":"Yu's Space"},{"content":"这篇论文 《Optimal High-Frequency Market Making》 实现并分析了 Avellaneda-Stoikov (2008) 的高频做市定价模型，并引入了一个动态库存控制模块，用于优化限价单的挂单量，以在保证盈利的同时控制库存风险。下面是详细解读：\n📌 一、研究背景与动机 #高频做市商（HFT market makers）通过在订单簿中持续挂出买卖限价单来提供流动性，赚取 买卖价差（spread） 和 交易所提供的挂单返利（rebate）。但这同时会产生库存风险（inventory risk），即买入或卖出过多后，价格波动带来的风险。\nAvellaneda-Stoikov 模型是其中一个经典的高频做市定价框架，它在假设股票价格服从布朗运动的基础上，通过求解最优控制问题得出最优报价策略。\n📌 二、模型框架 #2.1 定价模型（Pricing） #基于 Avellaneda \u0026amp; Stoikov (2008)：\n股票价格服从布朗运动： $dS_t = \\sigma dW_t$ 市场深度与成交概率关系：$\\lambda(\\delta) = A e^{-\\kappa \\delta}$ 做市商目标是最大化终端时刻 $T$ 时的指数效用函数： $$ \\max_{\\delta_a, \\delta_b} \\mathbb{E}[-e^{-\\gamma (X_T + q_T S_T)}] $$\n推导结果是：\n中间价（Indifference Price）： $$ r(s, t) = s - q\\gamma\\sigma^2(T - t) $$\n最优总挂单价差（Spread）： $$ \\delta_a + \\delta_b = \\gamma\\sigma^2(T - t) + \\ln\\left(1 + \\frac{\\gamma}{\\kappa} \\right) $$\n👉 这个模型体现了：\n离市场收盘越近，价差越小（为了减少隔夜风险，变得更激进） 持有的库存 $q$ 越大，中间价越偏离市场中价 2.2 库存控制模型（Inventory Control） #为解决 Avellaneda-Stoikov 模型中“不限制库存大小”的问题，作者引入了一个动态调节挂单数量的模型：\n$$ \\begin{cases} \\phi_{\\text{bid}}^t = \\phi_{\\text{max}}^t \u0026amp; \\text{if } q_t \u0026lt; 0 \\ \\phi_{\\text{bid}}^t = \\phi_{\\text{max}}^t e^{-\\eta q_t} \u0026amp; \\text{if } q_t \u0026gt; 0 \\end{cases} \\quad \\begin{cases} \\phi_{\\text{ask}}^t = \\phi_{\\text{max}}^t \u0026amp; \\text{if } q_t \u0026gt; 0 \\ \\phi_{\\text{ask}}^t = \\phi_{\\text{max}}^t e^{-\\eta q_t} \u0026amp; \\text{if } q_t \u0026lt; 0 \\end{cases} $$\n这个设计逻辑是：\n当前若持有过多某一方向的头寸（如多头），则减少挂出同方向单的数量 达到库存中性目标（inventory mean-reversion） 2.3 算法流程 #策略遵循以下流程：\n若订单簿中无挂单，挂出最优买卖报价； 若仅一边挂单被成交，则等待 5 秒，若未成交另一边则取消并重新挂单； 若两边都在订单簿中，每隔 1 秒刷新一次报价； 📌 三、交易模拟器设计 #构建了一个简化的交易环境用于模拟：\n市场订单到达遵循时间非齐次泊松过程，强度： $$ \\lambda(t, \\xi) = \\alpha_t e^{-\\mu \\xi} $$\n其中 $\\alpha_t$ 是随时间变化的成交活跃度（“浴缸曲线”），$\\xi$ 是订单簿深度。\n成交事件模拟使用贝努利分布 $Ber(\\lambda(t, \\xi)\\Delta)$，部分成交使用 Gamma 分布模拟。 📌 四、实证结果与对比 #对 S\u0026amp;P500 中具有不同特性的五只股票（如 AAPL, AMZN, GE）进行实验，比较本文策略（optimal）与基线策略（baseline，始终挂在最优买卖价）：\n🔸 核心结论： # 本文策略在多数股票上有 更高或相近的利润； 库存控制更稳定（位置更接近 0，方差更小）； 使用更少的挂单次数完成相似或更优的成交； 盈利方差更小，收益更稳健； 🔸 样例结果（以 AAPL 为例）： # 策略 平均每日 PnL 平均每日库存 PnL 方差 库存方差 Optimal -988.54 0.86 289.82 63.66 Baseline -1093.60 7.53 357.66 112.20 📌 五、马尔可夫链分析 #将做市过程建模为马尔可夫过程，状态空间为：\nQuoting: 正常挂单； Waiting: 一侧成交，另一侧等待； Spread: 成功赚到买卖价差； 引入两个性能指标：\n成功捕获价差的概率 $p^*$ 单边成交（未对冲）概率 $q^*$ 股票 Optimal $p^*$ Baseline $p^*$ Optimal $q^*$ Baseline $q^*$ AAPL 2.6% 5.1% 0.8% 0.9% AMZN 19.3% 4.7% 1.9% 1.0% 👉 虽然 Baseline 策略挂得更激进，捕获价差的概率更高，但 Optimal 策略的单边成交概率更低，说明更有效地控制了库存风险。\n✅ 结论总结 # 本文将 Avellaneda-Stoikov 的模型扩展为一个 可实际运行的高频做市策略； 通过库存控制模块，使策略能在不停止交易的前提下控制风险； 实验结果验证其在多个维度优于基准策略； 提出进一步改进方向：引入对中间价变化与订单到达的预测。 ref #https://stanford.edu/class/msande448/2018/Final/Reports/gr5.pdf\n","date":"19 May 2025","permalink":"/blog/mmavellaneda-stoikov/","section":"Blog","summary":"\u003cp\u003e这篇论文 \u003cstrong\u003e《Optimal High-Frequency Market Making》\u003c/strong\u003e 实现并分析了 Avellaneda-Stoikov (2008) 的高频做市定价模型，并引入了一个动态库存控制模块，用于优化限价单的挂单量，以在保证盈利的同时控制库存风险。下面是详细解读：\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-一研究背景与动机\" class=\"relative group\"\u003e📌 一、研究背景与动机 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#-%e4%b8%80%e7%a0%94%e7%a9%b6%e8%83%8c%e6%99%af%e4%b8%8e%e5%8a%a8%e6%9c%ba\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e高频做市商（HFT market makers）通过在订单簿中持续挂出买卖限价单来提供流动性，赚取 \u003cstrong\u003e买卖价差（spread）\u003c/strong\u003e 和 \u003cstrong\u003e交易所提供的挂单返利（rebate）\u003c/strong\u003e。但这同时会产生\u003cstrong\u003e库存风险（inventory risk）\u003c/strong\u003e，即买入或卖出过多后，价格波动带来的风险。\u003c/p\u003e\n\u003cp\u003eAvellaneda-Stoikov 模型是其中一个经典的高频做市定价框架，它在假设股票价格服从布朗运动的基础上，通过求解最优控制问题得出\u003cstrong\u003e最优报价策略\u003c/strong\u003e。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-二模型框架\" class=\"relative group\"\u003e📌 二、模型框架 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#-%e4%ba%8c%e6%a8%a1%e5%9e%8b%e6%a1%86%e6%9e%b6\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"21-定价模型pricing\" class=\"relative group\"\u003e2.1 定价模型（Pricing） \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#21-%e5%ae%9a%e4%bb%b7%e6%a8%a1%e5%9e%8bpricing\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e基于 Avellaneda \u0026amp; Stoikov (2008)：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e股票价格服从布朗运动： $dS_t = \\sigma dW_t$\u003c/li\u003e\n\u003cli\u003e市场深度与成交概率关系：$\\lambda(\\delta) = A e^{-\\kappa \\delta}$\u003c/li\u003e\n\u003cli\u003e做市商目标是最大化终端时刻 $T$ 时的指数效用函数：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e$$\n\\max_{\\delta_a, \\delta_b} \\mathbb{E}[-e^{-\\gamma (X_T + q_T S_T)}]\n$$\u003c/p\u003e","title":"MmAvellaneda Stoikov"},{"content":"行情数据解析优化最佳实践 #原始解析方案的性能瓶颈 #原始的 Binance 聚合交易数据解析实现存在多个性能瓶颈，这在高频交易系统中尤为关键。主要问题包括：\n使用 std::stod 进行字符串到浮点数转换：\nresult.data.price = std::stod(std::string(price_str)); result.data.quantity = std::stod(std::string(qty_str)); 这里存在两个严重问题：\nstd::stod 在底层实现中需要处理各种格式和本地化，导致计算开销大 每次调用都创建了临时 std::string 对象，增加了内存分配和释放的开销 创建临时的 padded_string 对象：\nsimdjson::padded_string padded_json{json}; simdjson::dom::element doc = parser.parse(padded_json); 这会导致额外的内存分配和复制，特别是在高频率处理消息时变得非常明显。\n使用低效的字符串复制方法：\nstrncpy(result.data.symbol, doc[\u0026#34;s\u0026#34;].get_string().value().data(), sizeof(result.data.symbol) - 1); 标准的 strncpy 没有利用现代 CPU 的 SIMD 指令集优势。\n异常处理成本：在解析热路径中大量使用 try-catch 结构，这会导致编译器生成额外代码，影响性能。\n重复获取 JSON 节点：多次访问相同的 JSON 节点，每次都需要进行字符串哈希查找。\n优化方案 #为了解决上述问题，我们实施了多层次的优化策略：\n1. 自定义快速解析路径 #创建了一个专门针对 Binance 聚合交易数据格式的快速解析函数，完全跳过通用 JSON 解析器：\nbool fastParseAggTrade(const std::string_view\u0026amp; json, Common::QuoteData::AggTradeData\u0026amp; data) noexcept { // 快速检查消息类型 const char* type_pattern = \u0026#34;\\\u0026#34;e\\\u0026#34;:\\\u0026#34;aggTrade\\\u0026#34;\u0026#34;; if (json.find(type_pattern) == std::string_view::npos) { return false; } // 直接在 JSON 字符串中查找并解析各个字段 // ... } 这种方法直接在字符串上操作，避免了构建整个 DOM 树的开销。\n2. 高效的字符串到浮点数转换 #实现了一个高度优化的 fastStringToDouble 函数，具有多层次优化：\nstatic double fastStringToDouble(const std::string_view\u0026amp; sv) noexcept { // 快速路径：尝试检测整数格式 bool is_negative = sv[0] == \u0026#39;-\u0026#39;; size_t start_idx = is_negative ? 1 : 0; // 检查是否是简单整数（无小数点，无科学计数法） bool is_simple_int = true; for (size_t i = start_idx; i \u0026lt; sv.size(); ++i) { if (sv[i] \u0026lt; \u0026#39;0\u0026#39; || sv[i] \u0026gt; \u0026#39;9\u0026#39;) { is_simple_int = false; break; } } // 对于简单整数，使用快速整数解析路径 if (is_simple_int \u0026amp;\u0026amp; sv.size() \u0026lt;= 18) { uint64_t value = 0; for (size_t i = start_idx; i \u0026lt; sv.size(); ++i) { value = value * 10 + (sv[i] - \u0026#39;0\u0026#39;); } return is_negative ? -static_cast\u0026lt;double\u0026gt;(value) : static_cast\u0026lt;double\u0026gt;(value); } // 通用路径：使用std::from_chars double result = 0.0; auto [ptr, ec] = std::from_chars(sv.data(), sv.data() + sv.size(), result); // 只有在from_chars失败时才回退到std::stod if (ec == std::errc() \u0026amp;\u0026amp; ptr == sv.data() + sv.size()) { return result; } return std::stod(std::string(sv)); } 这个实现有几个关键优化点：\n快速整数路径：对于纯整数格式，使用直接的整数解析算法 使用 std::from_chars，它比 std::stod 快得多 只在必要时才回退到昂贵的 std::stod 方法 3. SIMD 优化的字符串复制 #使用 SIMD 指令集优化字符串复制操作：\nstatic void fastStringCopy(char* dest, const std::string_view\u0026amp; src, size_t max_len) noexcept { size_t len = std::min(src.size(), max_len - 1); __m256i* dest_ptr = reinterpret_cast\u0026lt;__m256i*\u0026gt;(dest); __m256i* src_ptr = reinterpret_cast\u0026lt;__m256i*\u0026gt;(const_cast\u0026lt;char*\u0026gt;(src.data())); _mm256_storeu_si256(dest_ptr, _mm256_loadu_si256(src_ptr)); dest[len] = \u0026#39;\\0\u0026#39;; } 这使用了 AVX2 指令集的 _mm256_loadu_si256 和 _mm256_storeu_si256 指令，一次复制 32 字节，显著提高了字符串复制的速度。\n4. 批量获取 JSON 字段 #优化后的代码一次性获取所有需要的字段，减少了重复的查找操作：\n// 批量获取所有字段，减少函数调用开销 auto error1 = doc[\u0026#34;s\u0026#34;].get_string().get(symbol_str); auto error2 = doc[\u0026#34;E\u0026#34;].get_uint64().get(timestamp); // ... 其他字段批量获取 5. 错误处理优化 #使用错误码而非异常处理，并应用分支预测提示：\nif (UNLIKELY(error)) { result.is_valid = false; result.error_message = \u0026#34;JSON解析错误\u0026#34;; return result; } UNLIKELY 宏提示编译器这个条件很少发生，使主执行路径更加顺畅。\n6. 避免临时对象创建 #优化代码直接在原始 JSON 数据上操作，避免创建临时对象：\n// 避免创建临时的padded_string对象 simdjson::dom::element doc; auto error = parser.parse(json.data(), json.size()).get(doc); 性能提升分析 #优化后的实现在几个关键方面显著提高了性能：\n字符串到浮点数转换速度提升：\n使用 fastStringToDouble 比原来的 std::stod(std::string(price_str)) 快 10-100 倍 整数快速路径对于纯整数数据（如某些价格和数量）可提供额外 2-3 倍的加速 内存分配减少：\n避免了 std::string 和 padded_string 的临时对象创建 在高频交易系统中，这不仅减少了 CPU 开销，还减轻了 GC 压力 SIMD 加速：\nSIMD 优化的字符串复制可以比 strncpy 快 4-8 倍 这对于交易系统中频繁的字符串操作特别有益 直接字符串解析路径：\n跳过 JSON 解析器可以减少 70-90% 的解析开销 针对已知格式优化的解析器特别适合高频交易系统 分支预测优化：\n使用 LIKELY 和 UNLIKELY 宏帮助 CPU 分支预测 在现代 CPU 上，这可以减少流水线停顿，进一步提高性能 关键收获与最佳实践 # 针对高频场景专门优化：通用解析器难以满足高频交易的需求，应当为关键路径开发专用解析器。\n避免使用 std::stod：在性能关键代码中，应避免使用 std::stod 并考虑以下替代方案：\n对于简单格式，使用自定义的快速解析 使用 std::from_chars，它是更现代的高性能替代品 利用 SIMD 指令集：现代 CPU 的 SIMD 指令集可以显著加速字符串和内存操作。\n避免异常处理：在性能关键路径上使用错误码而非异常处理。\n减少临时对象：每个临时 std::string 都会带来内存分配开销，应当尽可能使用 std::string_view。\n两层解析策略：实现快速路径和回退路径的组合，确保既有性能又有稳定性。\n总之，这些优化使 Binance 聚合交易数据的解析速度提高了一个数量级，对于高频交易系统的延迟和吞吐量都有显著改善。这些技术同样适用于其他需要高性能 JSON 处理的场景。\n","date":"30 April 2025","permalink":"/blog/perf/","section":"Blog","summary":"\u003ch1 id=\"行情数据解析优化最佳实践\" class=\"relative group\"\u003e行情数据解析优化最佳实践 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e8%a1%8c%e6%83%85%e6%95%b0%e6%8d%ae%e8%a7%a3%e6%9e%90%e4%bc%98%e5%8c%96%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e\u003ch2 id=\"原始解析方案的性能瓶颈\" class=\"relative group\"\u003e原始解析方案的性能瓶颈 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e5%8e%9f%e5%a7%8b%e8%a7%a3%e6%9e%90%e6%96%b9%e6%a1%88%e7%9a%84%e6%80%a7%e8%83%bd%e7%93%b6%e9%a2%88\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e原始的 Binance 聚合交易数据解析实现存在多个性能瓶颈，这在高频交易系统中尤为关键。主要问题包括：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e使用 \u003ccode\u003estd::stod\u003c/code\u003e 进行字符串到浮点数转换\u003c/strong\u003e：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprice\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estod\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprice_str\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equantity\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estod\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eqty_str\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里存在两个严重问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003estd::stod\u003c/code\u003e 在底层实现中需要处理各种格式和本地化，导致计算开销大\u003c/li\u003e\n\u003cli\u003e每次调用都创建了临时 \u003ccode\u003estd::string\u003c/code\u003e 对象，增加了内存分配和释放的开销\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e创建临时的 \u003ccode\u003epadded_string\u003c/code\u003e 对象\u003c/strong\u003e：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esimdjson\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003epadded_string\u003c/span\u003e \u003cspan class=\"n\"\u003epadded_json\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esimdjson\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003edom\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e \u003cspan class=\"n\"\u003edoc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eparser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epadded_json\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这会导致额外的内存分配和复制，特别是在高频率处理消息时变得非常明显。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e使用低效的字符串复制方法\u003c/strong\u003e：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003estrncpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edoc\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;s\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eget_string\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e标准的 \u003ccode\u003estrncpy\u003c/code\u003e 没有利用现代 CPU 的 SIMD 指令集优势。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e异常处理成本\u003c/strong\u003e：在解析热路径中大量使用 try-catch 结构，这会导致编译器生成额外代码，影响性能。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e重复获取 JSON 节点\u003c/strong\u003e：多次访问相同的 JSON 节点，每次都需要进行字符串哈希查找。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"优化方案\" class=\"relative group\"\u003e优化方案 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e4%bc%98%e5%8c%96%e6%96%b9%e6%a1%88\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e为了解决上述问题，我们实施了多层次的优化策略：\u003c/p\u003e","title":"行情数据解析优化最佳实践"},{"content":"","date":null,"permalink":"/tags/http/","section":"Tags","summary":"","title":"Http"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" 1. 会话恢复简介 #什么是会话恢复？ #TLS会话恢复是TLS协议的一项优化特性，允许客户端和服务器基于之前建立的安全会话快速恢复通信，跳过完整的握手过程。在TLS 1.3中，会话恢复主要通过**PSK（Pre-Shared Key，预共享密钥）**机制实现，而在TLS 1.2及更早版本中，也可以通过Session ID或Session Ticket实现。\n为什么需要会话恢复？ # 性能优化： 完整握手（TLS 1.3）：1-RTT 会话恢复：1-RTT（或0-RTT） 显著减少连接建立时间 资源节省： 降低CPU开销（避免重复密钥交换） 减少网络带宽占用 2. TLS 1.3中的会话恢复机制 #工作流程对比 #完整握手（TLS 1.3） #Client Server | ClientHello | |--------------------\u0026gt;| | ServerHello | | EncryptedExt | | Certificate | | CertVerify | | Finished | |\u0026lt;--------------------| | Finished | |--------------------\u0026gt;| | NewSessionTicket | |\u0026lt;--------------------| RTT：1次往返 服务器在握手后发送NewSessionTicket，包含PSK和有效期信息。 会话恢复（1-RTT） #Client Server | ClientHello | | (with PSK) | |--------------------\u0026gt;| | ServerHello | | Finished | |\u0026lt;--------------------| | Finished | |--------------------\u0026gt;| RTT：1次往返 客户端使用之前保存的PSK直接恢复会话。 0-RTT（可选） #Client Server | ClientHello | | (with PSK + Early Data) | |--------------------\u0026gt;| | ServerHello | | Finished | |\u0026lt;--------------------| | Finished | |--------------------\u0026gt;| RTT：0次往返（早期数据随首次请求发送） 注意：0-RTT有重放攻击风险，仅适用于幂等请求。 3. 实现示例（基于picotls） #数据结构 #typedef struct { ptls_iovec_t session_ticket; // 会话ticket（包含PSK） ptls_save_ticket_t ticket_cb; // ticket保存回调 int is_resumption; // 是否恢复会话 time_t ticket_received_time; // ticket接收时间 } tls_context_t; 保存会话Ticket #static int save_ticket_cb(ptls_save_ticket_t* self, ptls_t* tls, ptls_iovec_t ticket) { tls_context_t* ctx = container_of(self, tls_context_t, ticket_cb); // 释放旧ticket if (ctx-\u0026gt;session_ticket.base) { free(ctx-\u0026gt;session_ticket.base); } // 保存新ticket ctx-\u0026gt;session_ticket.base = malloc(ticket.len); if (!ctx-\u0026gt;session_ticket.base) return -1; // 内存分配失败 memcpy(ctx-\u0026gt;session_ticket.base, ticket.base, ticket.len); ctx-\u0026gt;session_ticket.len = ticket.len; ctx-\u0026gt;ticket_received_time = time(NULL); return 0; } 尝试会话恢复 #ptls_handshake_properties_t props = {0}; if (conn-\u0026gt;tls_ctx.session_ticket.base) { // 检查ticket是否过期（假设有效期24小时） if (time(NULL) - conn-\u0026gt;tls_ctx.ticket_received_time \u0026lt; 24 * 3600) { props.client.session_ticket = conn-\u0026gt;tls_ctx.session_ticket; props.client.max_early_data_size = 16384; // 支持0-RTT conn-\u0026gt;session_info.resumption_attempted = 1; } } ptls_handshake(conn-\u0026gt;tls, \u0026amp;props); 验证恢复结果 #if (conn-\u0026gt;session_info.resumption_attempted) { conn-\u0026gt;session_info.resumption_succeeded = ptls_is_psk_handshake(conn-\u0026gt;tls); if (!conn-\u0026gt;session_info.resumption_succeeded) { // 恢复失败，清理ticket free(conn-\u0026gt;tls_ctx.session_ticket.base); conn-\u0026gt;tls_ctx.session_ticket.base = NULL; conn-\u0026gt;tls_ctx.session_ticket.len = 0; } } 4. 在连接池中的应用 #场景 # 复用连接：检查ticket有效性，优先尝试恢复，失败则完整握手。 新建连接：使用已有ticket尝试恢复，保存新ticket。 连接维护：跟踪ticket有效期，清理过期ticket，统计恢复率。 示例逻辑 #if (pool-\u0026gt;ticket.base \u0026amp;\u0026amp; time(NULL) - pool-\u0026gt;ticket_time \u0026lt; pool-\u0026gt;ticket_lifetime) { // 尝试恢复 props.client.session_ticket = pool-\u0026gt;ticket; if (ptls_handshake(conn-\u0026gt;tls, \u0026amp;props) == 0 \u0026amp;\u0026amp; ptls_is_psk_handshake(conn-\u0026gt;tls)) { pool-\u0026gt;stats.resumption_success++; } else { pool-\u0026gt;stats.resumption_fail++; ptls_handshake(conn-\u0026gt;tls, NULL); // 回退完整握手 } } else { // 完整握手并保存新ticket ptls_handshake(conn-\u0026gt;tls, NULL); } 5. 注意事项 #安全性 # 有效期限制：ticket通常有效数小时，由服务器指定。 存储安全：避免明文保存ticket，建议加密存储。 0-RTT风险：防范重放攻击，仅用于安全场景。 性能优化 # ticket管理：避免过度保存，定期清理无效ticket。 服务器负载：减少频繁发送NewSessionTicket。 监控指标：记录恢复成功率，优化策略。 错误处理 # 优雅降级：恢复失败时切换完整握手。 日志记录：保存失败原因（如ticket过期或拒绝）。 6. 总结 #TLS会话恢复通过PSK机制显著提升连接效率，尤其在高并发场景（如连接池）中效果明显。正确实现需要平衡安全性与性能，关注ticket管理、错误处理和监控。通过1-RTT或0-RTT，客户端和服务器可在毫秒内恢复安全通信，是现代网络优化的关键技术。\n改进亮点 # TLS 1.3准确性：流程图和术语基于TLS 1.3标准。 0-RTT补充：增加了0-RTT的说明和风险提示。 代码健壮性：加入内存分配检查和ticket过期逻辑。 结构优化：分为简介、机制、实现、应用和注意事项，逻辑更清晰。 如果需要进一步调整（如更深入的代码细节或特定场景分析），请告诉我！\n","date":"7 March 2025","permalink":"/blog/session_resumption/","section":"Blog","summary":"\u003chr\u003e\n\u003ch2 id=\"1-会话恢复简介\" class=\"relative group\"\u003e1. 会话恢复简介 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-%e4%bc%9a%e8%af%9d%e6%81%a2%e5%a4%8d%e7%ae%80%e4%bb%8b\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"什么是会话恢复\" class=\"relative group\"\u003e什么是会话恢复？ \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e4%bb%80%e4%b9%88%e6%98%af%e4%bc%9a%e8%af%9d%e6%81%a2%e5%a4%8d\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003eTLS会话恢复是TLS协议的一项优化特性，允许客户端和服务器基于之前建立的安全会话快速恢复通信，跳过完整的握手过程。在TLS 1.3中，会话恢复主要通过**PSK（Pre-Shared Key，预共享密钥）**机制实现，而在TLS 1.2及更早版本中，也可以通过Session ID或Session Ticket实现。\u003c/p\u003e\n\u003ch3 id=\"为什么需要会话恢复\" class=\"relative group\"\u003e为什么需要会话恢复？ \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e4%bc%9a%e8%af%9d%e6%81%a2%e5%a4%8d\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e性能优化\u003c/strong\u003e：\n\u003cul\u003e\n\u003cli\u003e完整握手（TLS 1.3）：1-RTT\u003c/li\u003e\n\u003cli\u003e会话恢复：1-RTT（或0-RTT）\u003c/li\u003e\n\u003cli\u003e显著减少连接建立时间\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e资源节省\u003c/strong\u003e：\n\u003cul\u003e\n\u003cli\u003e降低CPU开销（避免重复密钥交换）\u003c/li\u003e\n\u003cli\u003e减少网络带宽占用\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-tls-13中的会话恢复机制\" class=\"relative group\"\u003e2. TLS 1.3中的会话恢复机制 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#2-tls-13%e4%b8%ad%e7%9a%84%e4%bc%9a%e8%af%9d%e6%81%a2%e5%a4%8d%e6%9c%ba%e5%88%b6\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"工作流程对比\" class=\"relative group\"\u003e工作流程对比 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e5%b7%a5%e4%bd%9c%e6%b5%81%e7%a8%8b%e5%af%b9%e6%af%94\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003ch4 id=\"完整握手tls-13\" class=\"relative group\"\u003e完整握手（TLS 1.3） \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e5%ae%8c%e6%95%b4%e6%8f%a1%e6%89%8btls-13\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h4\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-plaintext\" data-lang=\"plaintext\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eClient                Server\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   ClientHello       |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |--------------------\u0026gt;|\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   ServerHello       |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   EncryptedExt      |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   Certificate       |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   CertVerify        |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   Finished         |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |\u0026lt;--------------------|\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   Finished         |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |--------------------\u0026gt;|\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   NewSessionTicket  |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |\u0026lt;--------------------|\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eRTT：1次往返\u003c/li\u003e\n\u003cli\u003e服务器在握手后发送\u003ccode\u003eNewSessionTicket\u003c/code\u003e，包含PSK和有效期信息。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"会话恢复1-rtt\" class=\"relative group\"\u003e会话恢复（1-RTT） \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e4%bc%9a%e8%af%9d%e6%81%a2%e5%a4%8d1-rtt\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h4\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-plaintext\" data-lang=\"plaintext\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eClient                Server\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   ClientHello       |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   (with PSK)        |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |--------------------\u0026gt;|\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   ServerHello       |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   Finished         |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |\u0026lt;--------------------|\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   Finished         |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |--------------------\u0026gt;|\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eRTT：1次往返\u003c/li\u003e\n\u003cli\u003e客户端使用之前保存的PSK直接恢复会话。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"0-rtt可选\" class=\"relative group\"\u003e0-RTT（可选） \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#0-rtt%e5%8f%af%e9%80%89\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h4\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-plaintext\" data-lang=\"plaintext\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eClient                Server\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   ClientHello       |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   (with PSK + Early Data) |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |--------------------\u0026gt;|\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   ServerHello       |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   Finished         |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |\u0026lt;--------------------|\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |   Finished         |\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  |--------------------\u0026gt;|\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eRTT：0次往返（早期数据随首次请求发送）\u003c/li\u003e\n\u003cli\u003e注意：0-RTT有重放攻击风险，仅适用于幂等请求。\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"3-实现示例基于picotls\" class=\"relative group\"\u003e3. 实现示例（基于picotls） \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#3-%e5%ae%9e%e7%8e%b0%e7%a4%ba%e4%be%8b%e5%9f%ba%e4%ba%8epicotls\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"数据结构\" class=\"relative group\"\u003e数据结构 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eptls_iovec_t\u003c/span\u003e \u003cspan class=\"n\"\u003esession_ticket\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// 会话ticket（包含PSK）\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003eptls_save_ticket_t\u003c/span\u003e \u003cspan class=\"n\"\u003eticket_cb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// ticket保存回调\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eis_resumption\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e              \u003cspan class=\"c1\"\u003e// 是否恢复会话\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003etime_t\u003c/span\u003e \u003cspan class=\"n\"\u003eticket_received_time\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// ticket接收时间\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"kt\"\u003etls_context_t\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"保存会话ticket\" class=\"relative group\"\u003e保存会话Ticket \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e4%bf%9d%e5%ad%98%e4%bc%9a%e8%af%9dticket\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003esave_ticket_cb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eptls_save_ticket_t\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eptls_t\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003etls\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eptls_iovec_t\u003c/span\u003e \u003cspan class=\"n\"\u003eticket\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003etls_context_t\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ectx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003econtainer_of\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003etls_context_t\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eticket_cb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 释放旧ticket\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esession_ticket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003efree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esession_ticket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 保存新ticket\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esession_ticket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebase\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003emalloc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eticket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esession_ticket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 内存分配失败\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003ememcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esession_ticket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eticket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eticket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esession_ticket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eticket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ectx\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eticket_received_time\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"尝试会话恢复\" class=\"relative group\"\u003e尝试会话恢复 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e5%b0%9d%e8%af%95%e4%bc%9a%e8%af%9d%e6%81%a2%e5%a4%8d\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eptls_handshake_properties_t\u003c/span\u003e \u003cspan class=\"n\"\u003eprops\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etls_ctx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esession_ticket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 检查ticket是否过期（假设有效期24小时）\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nf\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etls_ctx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eticket_received_time\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e24\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e3600\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eprops\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclient\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esession_ticket\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etls_ctx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esession_ticket\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eprops\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclient\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emax_early_data_size\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e16384\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 支持0-RTT\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esession_info\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresumption_attempted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nf\"\u003eptls_handshake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etls\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eprops\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"验证恢复结果\" class=\"relative group\"\u003e验证恢复结果 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e9%aa%8c%e8%af%81%e6%81%a2%e5%a4%8d%e7%bb%93%e6%9e%9c\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esession_info\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresumption_attempted\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esession_info\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresumption_succeeded\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003eptls_is_psk_handshake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etls\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esession_info\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresumption_succeeded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 恢复失败，清理ticket\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"nf\"\u003efree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etls_ctx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esession_ticket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etls_ctx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esession_ticket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebase\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etls_ctx\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esession_ticket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"4-在连接池中的应用\" class=\"relative group\"\u003e4. 在连接池中的应用 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#4-%e5%9c%a8%e8%bf%9e%e6%8e%a5%e6%b1%a0%e4%b8%ad%e7%9a%84%e5%ba%94%e7%94%a8\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"场景\" class=\"relative group\"\u003e场景 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e5%9c%ba%e6%99%af\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e复用连接\u003c/strong\u003e：检查ticket有效性，优先尝试恢复，失败则完整握手。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e新建连接\u003c/strong\u003e：使用已有ticket尝试恢复，保存新ticket。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e连接维护\u003c/strong\u003e：跟踪ticket有效期，清理过期ticket，统计恢复率。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"示例逻辑\" class=\"relative group\"\u003e示例逻辑 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e7%a4%ba%e4%be%8b%e9%80%bb%e8%be%91\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epool\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eticket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebase\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nf\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003epool\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eticket_time\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003epool\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eticket_lifetime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 尝试恢复\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eprops\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclient\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esession_ticket\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epool\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eticket\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nf\"\u003eptls_handshake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etls\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eprops\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nf\"\u003eptls_is_psk_handshake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etls\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003epool\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estats\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresumption_success\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003epool\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estats\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresumption_fail\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nf\"\u003eptls_handshake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etls\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 回退完整握手\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 完整握手并保存新ticket\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003eptls_handshake\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etls\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"5-注意事项\" class=\"relative group\"\u003e5. 注意事项 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#5-%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"安全性\" class=\"relative group\"\u003e安全性 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e5%ae%89%e5%85%a8%e6%80%a7\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e有效期限制\u003c/strong\u003e：ticket通常有效数小时，由服务器指定。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e存储安全\u003c/strong\u003e：避免明文保存ticket，建议加密存储。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e0-RTT风险\u003c/strong\u003e：防范重放攻击，仅用于安全场景。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"性能优化\" class=\"relative group\"\u003e性能优化 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e6%80%a7%e8%83%bd%e4%bc%98%e5%8c%96\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eticket管理\u003c/strong\u003e：避免过度保存，定期清理无效ticket。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e服务器负载\u003c/strong\u003e：减少频繁发送\u003ccode\u003eNewSessionTicket\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e监控指标\u003c/strong\u003e：记录恢复成功率，优化策略。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"错误处理\" class=\"relative group\"\u003e错误处理 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e9%94%99%e8%af%af%e5%a4%84%e7%90%86\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e优雅降级\u003c/strong\u003e：恢复失败时切换完整握手。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e日志记录\u003c/strong\u003e：保存失败原因（如ticket过期或拒绝）。\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"6-总结\" class=\"relative group\"\u003e6. 总结 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#6-%e6%80%bb%e7%bb%93\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003eTLS会话恢复通过PSK机制显著提升连接效率，尤其在高并发场景（如连接池）中效果明显。正确实现需要平衡安全性与性能，关注ticket管理、错误处理和监控。通过1-RTT或0-RTT，客户端和服务器可在毫秒内恢复安全通信，是现代网络优化的关键技术。\u003c/p\u003e","title":"TLS会话恢复（Session Resumption）"},{"content":"我来帮你编写一份详细的技术教程，介绍如何使用 Tailscale 在 MacOS 设备间实现远程连接。\n使用 Tailscale 实现 MacOS 设备远程连接教程 #准备工作 # 确保两台 MacOS 设备都能正常访问互联网 准备一个 Tailscale 账号（可以使用 Google、GitHub 等账号登录） 详细步骤 #第一步：安装 Tailscale #在两台 MacOS 设备上分别安装 Tailscale：\n访问 Tailscale 官网 (https://tailscale.com/download) 下载 MacOS 版本的安装包 打开下载的 .dmg 文件，将 Tailscale 拖入应用程序文件夹 第二步：登录和配置 # 在两台设备上启动 Tailscale 点击菜单栏的 Tailscale 图标 使用相同的账号登录 登录成功后，Tailscale 会自动为设备分配 IP 地址 点击菜单栏图标可以查看分配的 IP 地址（通常格式为 100.xx.xx.xx） 第三步：开启远程访问 #在被控制的 MacOS 设备上：\n打开系统偏好设置 选择\u0026quot;共享\u0026quot; 勾选\u0026quot;远程管理\u0026quot;或\u0026quot;屏幕共享\u0026quot; 配置访问权限，可以选择： 允许所有用户 仅允许特定用户 第四步：建立连接 #在控制端 MacOS 设备上：\n打开访达（Finder） 在菜单栏选择\u0026quot;前往\u0026quot; → \u0026ldquo;连接服务器\u0026rdquo;（或按下 Command + K） 在服务器地址栏输入：vnc://100.xx.xx.xx（使用目标设备的 Tailscale IP） 点击连接 输入目标设备的用户名和密码(平常锁屏时的解锁密码,可以在设置-用户群组-用户 处查看用户名) 注意事项 # 确保两台设备都保持 Tailscale 在线状态 建议在首次连接时进行测试，确保连接正常 如遇连接问题，检查： Tailscale 状态是否在线 目标设备的屏幕共享是否开启 IP 地址是否输入正确 防火墙设置是否允许连接 安全建议 # 定期更新 Tailscale 客户端 使用强密码保护你的 Tailscale 账号 在不需要远程连接时，建议关闭屏幕共享功能 定期检查已授权设备列表，移除不需要的设备 这样设置后，你就可以通过 Tailscale 安全地远程连接和控制其他 MacOS 设备了。Tailscale 使用了安全的加密通信，让远程连接更加安全可靠。\n","date":"19 January 2025","permalink":"/blog/share_screen/","section":"Blog","summary":"\u003cp\u003e我来帮你编写一份详细的技术教程，介绍如何使用 Tailscale 在 MacOS 设备间实现远程连接。\u003c/p\u003e\n\u003ch1 id=\"使用-tailscale-实现-macos-设备远程连接教程\" class=\"relative group\"\u003e使用 Tailscale 实现 MacOS 设备远程连接教程 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e4%bd%bf%e7%94%a8-tailscale-%e5%ae%9e%e7%8e%b0-macos-%e8%ae%be%e5%a4%87%e8%bf%9c%e7%a8%8b%e8%bf%9e%e6%8e%a5%e6%95%99%e7%a8%8b\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e\u003ch2 id=\"准备工作\" class=\"relative group\"\u003e准备工作 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e5%87%86%e5%a4%87%e5%b7%a5%e4%bd%9c\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003col\u003e\n\u003cli\u003e确保两台 MacOS 设备都能正常访问互联网\u003c/li\u003e\n\u003cli\u003e准备一个 Tailscale 账号（可以使用 Google、GitHub 等账号登录）\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"详细步骤\" class=\"relative group\"\u003e详细步骤 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e8%af%a6%e7%bb%86%e6%ad%a5%e9%aa%a4\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"第一步安装-tailscale\" class=\"relative group\"\u003e第一步：安装 Tailscale \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e7%ac%ac%e4%b8%80%e6%ad%a5%e5%ae%89%e8%a3%85-tailscale\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e在两台 MacOS 设备上分别安装 Tailscale：\u003c/p\u003e","title":"使用 Tailscale 实现 MacOS 设备远程连接教程"},{"content":"问题现象 #在多进程共享内存通信中，发现读取进程出现异常：\n写入进程（线程3002707）正常写入数据\n读取进程（线程3002791）卡在固定位置：\npage: 0 write_pos: 134209160 read_pos: 134199368 问题定位过程 #1. 初步分析 #首先观察到一个关键现象：\nBinance的读写正常 Bitget的读取卡在固定位置 两个交易所使用相同的共享内存机制 2. 代码分析 #检查共享内存管理的核心类：\n写入机制： template\u0026lt;typename T\u0026gt; bool write(const TypedFrame\u0026lt;T\u0026gt;\u0026amp; frame) { // ... if (write_pos + frame_size \u0026gt; page_size_) { switchToNextPage(); write_pos = current_write_pos_.load(std::memory_order_relaxed); continue; } // ... std::atomic\u0026lt;size_t\u0026gt;* shared_write_pos = reinterpret_cast\u0026lt;std::atomic\u0026lt;size_t\u0026gt;*\u0026gt;(current_page_-\u0026gt;getData()); shared_write_pos-\u0026gt;store(write_pos + frame_size, std::memory_order_release); } 页面切换： void Journal::switchToNextPage() { current_page_ = page_engine_-\u0026gt;getNextPage(); current_write_pos_.store(0, std::memory_order_relaxed); } Page* PageEngine::getNextPage() { current_page_index_++; if (current_page_index_ \u0026gt;= pages_.size()) { addNewPage(); } return pages_[current_page_index_].get(); } 3. 关键发现 #通过分析发现：\n写入位置（write_pos）正确存储在共享内存中 但页面索引（current_page_index_）是进程内变量 导致读取进程无法感知页面切换 根本原因 # 进程隔离： 每个进程有自己的PageEngine实例 current_page_index_是进程内存变量 写进程切换页面时，读进程无法感知 共享机制不完整： 只共享了写入位置（write_pos） 未共享页面切换信息 解决方案 # 设计思路\n设计共享控制结构管理页面状态 在共享内存中维护完整的页面信息 实现页面切换的进程间同步 具体实现 首先，设计共享控制结构：\nstruct alignas(64) SharedPageControl { std::atomic\u0026lt;uint64_t\u0026gt; current_page_index; // 当前页索引 std::atomic\u0026lt;uint64_t\u0026gt; total_pages; // 总页数 std::atomic\u0026lt;uint64_t\u0026gt; write_pos; // 写入位置 char padding[40]; // 保持缓存行对齐 }; 更新页面切换逻辑：\nvoid Journal::switchToNextPage() { if (!is_writer_) return; auto* control = current_page_-\u0026gt;getSharedControl(); size_t new_page_index = control-\u0026gt;current_page_index.load(std::memory_order_relaxed) + 1; // 更新共享控制信息 control-\u0026gt;current_page_index.store(new_page_index, std::memory_order_release); control-\u0026gt;write_pos.store(sizeof(SharedPageControl), std::memory_order_release); // 更新本地状态 current_page_ = page_engine_-\u0026gt;getNextPage(); current_write_pos_.store(sizeof(SharedPageControl), std::memory_order_relaxed); } 3. 优化考虑 # 性能优化： 使用64字节对齐避免false sharing 最小化原子操作次数 保持无锁设计 可靠性保证： 使用原子操作确保线程安全 正确的内存序保证可见性 完整的错误处理 方案实现要点 # 共享控制信息管理\n在共享内存的起始位置放置控制结构 使用原子操作保证更新的可见性 通过内存对齐优化性能 页面切换同步\n写进程负责更新页面状态 读进程通过共享控制信息感知页面切换 保证页面信息的一致性 内存布局优化\n控制信息和数据区域分离 使用缓存行对齐避免false sharing 保持高效的内存访问 技术经验总结 # 多进程通信设计原则\n控制信息必须在进程间共享 使用原子操作保证可见性 注意内存布局和性能优化 问题诊断方法\n观察异常现象的共性和差异 对比正常和异常案例 追踪到根本原因 代码实现建议\n重视共享状态的同步 合理使用内存对齐 注意性能和正确性的平衡 最佳实践要点\n设计时考虑多进程场景 充分测试边界条件 保持代码的可维护性 这个案例展示了在高频交易系统中一个典型的多进程通信问题的完整解决过程。它强调了在共享内存通信中正确管理共享状态的重要性，以及如何通过系统的分析和设计来解决复杂的并发问题。这些经验对于构建稳定、高效的多进程系统具有重要的参考价值。\n","date":"17 January 2025","permalink":"/blog/fix_share_page_position/","section":"Blog","summary":"\u003ch2 id=\"问题现象\" class=\"relative group\"\u003e问题现象 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e9%97%ae%e9%a2%98%e7%8e%b0%e8%b1%a1\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e在多进程共享内存通信中，发现读取进程出现异常：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e写入进程（线程3002707）正常写入数据\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e读取进程（线程3002791）卡在固定位置：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epage: 0\nwrite_pos: 134209160\nread_pos: 134199368\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"问题定位过程\" class=\"relative group\"\u003e问题定位过程 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e9%97%ae%e9%a2%98%e5%ae%9a%e4%bd%8d%e8%bf%87%e7%a8%8b\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"1-初步分析\" class=\"relative group\"\u003e1. 初步分析 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-%e5%88%9d%e6%ad%a5%e5%88%86%e6%9e%90\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e首先观察到一个关键现象：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBinance的读写正常\u003c/li\u003e\n\u003cli\u003eBitget的读取卡在固定位置\u003c/li\u003e\n\u003cli\u003e两个交易所使用相同的共享内存机制\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-代码分析\" class=\"relative group\"\u003e2. 代码分析 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#2-%e4%bb%a3%e7%a0%81%e5%88%86%e6%9e%90\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e检查共享内存管理的核心类：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e写入机制\u003c/strong\u003e：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eTypedFrame\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eframe\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// ...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite_pos\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eframe_size\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epage_size_\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eswitchToNextPage\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ewrite_pos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent_write_pos_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ememory_order_relaxed\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// ...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eatomic\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003esize_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;*\u003c/span\u003e \u003cspan class=\"n\"\u003eshared_write_pos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003ereinterpret_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eatomic\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003esize_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;*\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent_page_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egetData\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eshared_write_pos\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estore\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite_pos\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eframe_size\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ememory_order_release\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e页面切换\u003c/strong\u003e：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eJournal\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eswitchToNextPage\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecurrent_page_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epage_engine_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egetNextPage\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecurrent_write_pos_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estore\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ememory_order_relaxed\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ePage\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ePageEngine\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003egetNextPage\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecurrent_page_index_\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent_page_index_\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003epages_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eaddNewPage\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epages_\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent_page_index_\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-关键发现\" class=\"relative group\"\u003e3. 关键发现 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#3-%e5%85%b3%e9%94%ae%e5%8f%91%e7%8e%b0\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e通过分析发现：\u003c/p\u003e","title":"共享内存多进程通信中的页面切换同步问题分析与解决"},{"content":"Solana链上交易监控最佳实践：从logsSubscribe到全方位监控 #背景介绍 #在Solana链上开发中，实时监控特定账户的交易活动是一个常见需求，特别是在构建跟单机器人这类对时效性要求较高的应用场景中。最初，我们可能会想到使用Solana提供的logsSubscribe WebSocket API来实现这个功能，因为它看起来是最直接的解决方案。然而，在实际应用中，我们发现这种方案存在一些限制和问题。\n问题发现 #在使用logsSubscribe进行账户监控时，我们发现一个关键问题：某些确实发生的交易并没有被我们的监控系统捕获到。这个问题的发现促使我们深入研究Solana的交易日志机制，并最终设计了一个更全面的监控方案。\n为什么会遗漏交易？ # 日志记录机制的局限性\n程序可能不会在日志中明确记录所有涉及的账户地址 交易可能使用了PDA(Program Derived Address)或其他派生地址 某些DEX采用内部账户映射，而不是直接记录用户地址 mentions过滤器的限制\n只能捕获在日志中明确提到目标地址的交易 无法捕获通过间接方式影响目标账户的交易 解决方案 #针对上述问题，我们设计了一个多维度监控方案，通过组合多种订阅方式来确保不会遗漏任何相关交易。\n1. 三重订阅机制 #pub struct EnhancedTradeWatcher { target_account: Pubkey, ws_client: WebSocketClient, } impl EnhancedTradeWatcher { async fn setup_comprehensive_monitoring(\u0026amp;mut self) -\u0026gt; Result\u0026lt;()\u0026gt; { // 1. logsSubscribe - 捕获显式提及 let logs_sub = json!({ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;logsSubscribe\u0026#34;, \u0026#34;params\u0026#34;: [ { \u0026#34;mentions\u0026#34;: [self.target_account.to_string()], }, { \u0026#34;commitment\u0026#34;: \u0026#34;processed\u0026#34; } ] }); // 2. programSubscribe - 监控DEX程序 let dex_program_sub = json!({ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;programSubscribe\u0026#34;, \u0026#34;params\u0026#34;: [ DEX_PROGRAM_ID, { \u0026#34;encoding\u0026#34;: \u0026#34;jsonParsed\u0026#34;, \u0026#34;commitment\u0026#34;: \u0026#34;processed\u0026#34; } ] }); // 3. accountSubscribe - 监控账户变更 let account_sub = json!({ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;accountSubscribe\u0026#34;, \u0026#34;params\u0026#34;: [ self.target_account.to_string(), { \u0026#34;encoding\u0026#34;: \u0026#34;jsonParsed\u0026#34;, \u0026#34;commitment\u0026#34;: \u0026#34;processed\u0026#34; } ] }); // 发送所有订阅请求 self.ws_client.send(logs_sub).await?; self.ws_client.send(dex_program_sub).await?; self.ws_client.send(account_sub).await?; } } 2. 交易去重机制 #为了避免多个订阅渠道导致的重复处理，我们实现了基于交易签名的去重机制：\nasync fn handle_all_events(\u0026amp;mut self) -\u0026gt; Result\u0026lt;()\u0026gt; { let mut transactions_seen = HashSet::new(); while let Some(event) = self.ws_client.next_message().await? { if !transactions_seen.contains(\u0026amp;event.signature) { self.process_transaction(\u0026amp;event).await?; transactions_seen.insert(event.signature); } } Ok(()) } 3. 相关账户检查 #为了确保捕获所有相关交易，我们实现了全面的账户关联检查：\nfn check_related_accounts(\u0026amp;self, program_info: \u0026amp;ProgramInfo) -\u0026gt; bool { // 检查Token账户 let token_accounts = self.get_associated_token_accounts(\u0026amp;self.target_account); // 检查OpenOrders账户 let open_orders = self.get_open_orders_accounts(\u0026amp;self.target_account); // 检查PDA let pdas = self.get_related_pdas(\u0026amp;self.target_account); program_info.accounts.iter().any(|acc| token_accounts.contains(acc) || open_orders.contains(acc) || pdas.contains(acc) ) } 为什么选择这种方案？ # 完整性保证\n多维度监控确保不会遗漏任何相关交易 通过检查关联账户捕获间接交易 性能优化\n使用缓存减少RPC调用 实现交易去重避免重复处理 采用processed提交级别获得最低延迟 可扩展性\n方案设计支持添加新的DEX监控 可以根据具体需求调整监控策略 可靠性\n多渠道数据源提供数据冗余 降低单点故障风险 性能考虑 #虽然这种多维度监控方案会带来一些额外的系统开销，但在跟单场景中，准确性和完整性的重要性远大于少量的性能损耗。为了优化性能，我们实现了以下机制：\nstruct AccountCache { token_accounts: LruCache\u0026lt;Pubkey, Vec\u0026lt;Pubkey\u0026gt;\u0026gt;, open_orders: LruCache\u0026lt;Pubkey, Vec\u0026lt;Pubkey\u0026gt;\u0026gt;, last_update: HashMap\u0026lt;Pubkey, Instant\u0026gt;, } 结论 #在Solana链上开发中，单一的监控方式往往无法满足复杂业务场景的需求。通过结合多种订阅方式，并配合合理的缓存策略和去重机制，我们可以构建一个既可靠又高效的交易监控系统。这个方案虽然实现较为复杂，但能够提供更好的可靠性和完整性保证，特别适合对实时性和准确性要求较高的跟单场景。\n未来展望 # 支持更多DEX协议 优化缓存策略 添加更多性能监控指标 实现自动化失败重试机制 希望这篇文章能够帮助大家在实现Solana链上监控时避免一些常见陷阱，构建更可靠的监控系统。\n","date":"20 December 2024","permalink":"/blog/solana_monitor/","section":"Blog","summary":"\u003ch1 id=\"solana链上交易监控最佳实践从logssubscribe到全方位监控\" class=\"relative group\"\u003eSolana链上交易监控最佳实践：从logsSubscribe到全方位监控 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#solana%e9%93%be%e4%b8%8a%e4%ba%a4%e6%98%93%e7%9b%91%e6%8e%a7%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5%e4%bb%8elogssubscribe%e5%88%b0%e5%85%a8%e6%96%b9%e4%bd%8d%e7%9b%91%e6%8e%a7\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e\u003ch2 id=\"背景介绍\" class=\"relative group\"\u003e背景介绍 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e8%83%8c%e6%99%af%e4%bb%8b%e7%bb%8d\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e在Solana链上开发中，实时监控特定账户的交易活动是一个常见需求，特别是在构建跟单机器人这类对时效性要求较高的应用场景中。最初，我们可能会想到使用Solana提供的\u003ccode\u003elogsSubscribe\u003c/code\u003e WebSocket API来实现这个功能，因为它看起来是最直接的解决方案。然而，在实际应用中，我们发现这种方案存在一些限制和问题。\u003c/p\u003e\n\u003ch2 id=\"问题发现\" class=\"relative group\"\u003e问题发现 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e9%97%ae%e9%a2%98%e5%8f%91%e7%8e%b0\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e在使用\u003ccode\u003elogsSubscribe\u003c/code\u003e进行账户监控时，我们发现一个关键问题：某些确实发生的交易并没有被我们的监控系统捕获到。这个问题的发现促使我们深入研究Solana的交易日志机制，并最终设计了一个更全面的监控方案。\u003c/p\u003e\n\u003ch3 id=\"为什么会遗漏交易\" class=\"relative group\"\u003e为什么会遗漏交易？ \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%bc%9a%e9%81%97%e6%bc%8f%e4%ba%a4%e6%98%93\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e日志记录机制的局限性\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e程序可能不会在日志中明确记录所有涉及的账户地址\u003c/li\u003e\n\u003cli\u003e交易可能使用了PDA(Program Derived Address)或其他派生地址\u003c/li\u003e\n\u003cli\u003e某些DEX采用内部账户映射，而不是直接记录用户地址\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003ementions\u003c/code\u003e过滤器的限制\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e只能捕获在日志中明确提到目标地址的交易\u003c/li\u003e\n\u003cli\u003e无法捕获通过间接方式影响目标账户的交易\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"解决方案\" class=\"relative group\"\u003e解决方案 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e针对上述问题，我们设计了一个多维度监控方案，通过组合多种订阅方式来确保不会遗漏任何相关交易。\u003c/p\u003e","title":"Solana_monitor"},{"content":"Solana链上交易监控技术分析 #1. Solana DEX 交易形式 #1.1 直接 DEX 交易 #用户直接与 DEX 合约交互，交易流程简单直接。\n用户钱包 -\u0026gt; DEX程序 (如Raydium/Orca) -\u0026gt; Token Program 特点：\n交易日志简洁，主要包含单个 DEX 程序的调用 容易识别交易平台和交易对 Token Program 的 transfer 指令较少 1.2 聚合器交易（Jupiter） #通过聚合器路由到单个或多个 DEX。\n用户钱包 -\u0026gt; Jupiter -\u0026gt; DEX1/DEX2/... -\u0026gt; Token Program 特点：\n包含 Jupiter 合约调用 可能涉及多个 DEX 交易日志较长，包含多个内部指令 可能有复杂的代币交换路径 1.3 智能路由交易 #一笔交易通过多个 DEX 串联完成。\n用户钱包 -\u0026gt; 聚合器 -\u0026gt; DEX1 -\u0026gt; DEX2 -\u0026gt; DEX3 -\u0026gt; Token Program 特点：\n交易路径最复杂 涉及多次代币交换 目的是获得最优价格 包含多个 Token Program 的 transfer 指令 2. Solana 链上监控原理 #2.1 为什么可以监控目标账户 #Solana 链上监控的实现基于以下几个关键特性：\n账户模型 Solana 使用账户模型而不是 UTXO 模型： - 每个账户都有唯一的地址 - 所有交易都会涉及账户的状态变更 - 交易日志会记录所有涉及的账户地址 交易日志系统 // 交易日志包含： - 所有程序调用 (Program invoke) - 账户操作记录 (Instruction logs) - 代币转移详情 (Token transfers) - 错误信息 (如果有) RPC 订阅机制 // logsSubscribe 支持多种过滤方式： - mentions: 日志中提到的账户地址 - dataSlice: 选择性获取数据片段 - commitment: 确认级别设置 2.2 监控原理详解 # 账户日志触发机制 在 Solana 中，以下操作会导致账户出现在交易日志中： - 作为交易签名者 - 作为指令中的账户参数 - 发生代币转入/转出 - 账户数据被修改 代币账户变更追踪 // 代币账户变更会记录在 meta 数据中 pub struct TransactionMeta { pub pre_token_balances: Vec\u0026lt;TokenBalance\u0026gt;, // 交易前余额 pub post_token_balances: Vec\u0026lt;TokenBalance\u0026gt;, // 交易后余额 pub log_messages: Vec\u0026lt;String\u0026gt;, // 详细日志 // ... } DEX 交易跟踪 一个 DEX 交易通常涉及： 1. DEX 程序调用 2. Token Program 转账操作 3. 池子账户状态更新 4. 用户代币账户余额变化 2.3 技术实现关键点 # WebSocket 订阅配置详解 // 订阅特定账户的所有相关日志 let subscribe_config = json!({ \u0026#34;jsonrpc\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;method\u0026#34;: \u0026#34;logsSubscribe\u0026#34;, \u0026#34;params\u0026#34;: [ { \u0026#34;mentions\u0026#34;: [target_address.to_string()], // 目标账户 \u0026#34;commitment\u0026#34;: \u0026#34;confirmed\u0026#34;, // 确认级别 \u0026#34;filters\u0026#34;: [ // 可选过滤器 {\u0026#34;dataSize\u0026#34;: 0}, // 数据大小过滤 {\u0026#34;memcmp\u0026#34;: { // 内存比较过滤 \u0026#34;offset\u0026#34;: 0, \u0026#34;bytes\u0026#34;: \u0026#34;base58_encoded_bytes\u0026#34; }} ] } ] }); 交易数据结构解析 pub struct ParsedTransaction { pub signature: String, pub slot: u64, pub meta: TransactionStatusMeta, pub transaction: EncodedTransaction, } impl TransactionWatcher { fn parse_transaction_data(\u0026amp;self, tx: \u0026amp;ParsedTransaction) -\u0026gt; Option\u0026lt;TradeInfo\u0026gt; { // 1. 检查交易是否涉及目标账户 let involves_target = tx.meta.log_messages.iter() .any(|log| log.contains(\u0026amp;self.target_address.to_string())); if !involves_target { return None; } // 2. 解析代币余额变化 let balance_changes = self.parse_token_balances( \u0026amp;tx.meta.pre_token_balances, \u0026amp;tx.meta.post_token_balances ); // 3. 识别交易类型和方向 let dex_type = self.identify_dex(\u0026amp;tx.meta.log_messages); // 4. 构建交易信息 Some(TradeInfo { // ... 交易详情 }) } } 余额变化分析示例 fn analyze_balance_changes( \u0026amp;self, pre_balances: \u0026amp;[TokenBalance], post_balances: \u0026amp;[TokenBalance], ) -\u0026gt; Vec\u0026lt;(String, f64)\u0026gt; { pre_balances.iter() .filter(|pre| pre.owner == self.target_address.to_string()) .filter_map(|pre| { post_balances.iter() .find(|post| post.mint == pre.mint) .map(|post| { let change = post.ui_token_amount.ui_amount.unwrap_or(0.0) - pre.ui_token_amount.ui_amount.unwrap_or(0.0); (pre.mint.clone(), change) }) }) .collect() } 2.4 监控可靠性保障 # 数据完整性验证 impl TransactionWatcher { fn validate_transaction_data(\u0026amp;self, tx: \u0026amp;ParsedTransaction) -\u0026gt; bool { // 1. 验证交易状态 if tx.meta.err.is_some() { return false; } // 2. 验证代币余额数据完整性 if tx.meta.pre_token_balances.is_empty() || tx.meta.post_token_balances.is_empty() { return false; } // 3. 验证日志完整性 if tx.meta.log_messages.is_empty() { return false; } true } } 错误恢复机制 async fn reconnect_websocket(\u0026amp;mut self) -\u0026gt; Result\u0026lt;()\u0026gt; { let mut retry_count = 0; let max_retries = 3; while retry_count \u0026lt; max_retries { match connect_async(\u0026amp;self.ws_url).await { Ok((ws_stream, _)) =\u0026gt; { self.ws_client = ws_stream; return Ok(()); } Err(e) =\u0026gt; { retry_count += 1; error!(\u0026#34;WebSocket重连失败: {}, 重试 {}/{}\u0026#34;, e, retry_count, max_retries); tokio::time::sleep(Duration::from_secs(2_u64.pow(retry_count))).await; } } } Err(anyhow!(\u0026#34;WebSocket重连失败\u0026#34;)) } 3. 技术要点 #3.1 实时性保障 # 使用 WebSocket 订阅而不是轮询 confirmed commitment 级别的确认 错误重试机制 3.2 数据准确性 # 解析交易前后的余额变化 考虑代币精度 验证交易状态 3.3 性能优化 # 缓存常用池子信息 批量处理交易 异步处理框架 3.4 可靠性保障 # 多个 RPC 节点故障转移 WebSocket 断线重连 交易确认重试 4. 最佳实践 # RPC 节点选择\n使用可靠的私有节点 准备多个备用节点 定期检查节点健康状态 监控配置\n合理设置 commitment 级别 配置适当的重试参数 根据需求调整缓存策略 错误处理\n完善的日志记录 优雅的错误恢复 监控告警机制 5. 潜在问题 # RPC 节点不稳定\n解决：实现节点故障转移 定期健康检查 使用私有节点 交易解析失败\n原因：日志格式变化 解决：版本适配 完善错误处理 性能瓶颈\nWebSocket 连接管理 交易处理队列 缓存优化 ","date":"19 December 2024","permalink":"/blog/solana/","section":"Blog","summary":"\u003ch1 id=\"solana链上交易监控技术分析\" class=\"relative group\"\u003eSolana链上交易监控技术分析 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#solana%e9%93%be%e4%b8%8a%e4%ba%a4%e6%98%93%e7%9b%91%e6%8e%a7%e6%8a%80%e6%9c%af%e5%88%86%e6%9e%90\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e\u003ch2 id=\"1-solana-dex-交易形式\" class=\"relative group\"\u003e1. Solana DEX 交易形式 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-solana-dex-%e4%ba%a4%e6%98%93%e5%bd%a2%e5%bc%8f\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"11-直接-dex-交易\" class=\"relative group\"\u003e1.1 直接 DEX 交易 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#11-%e7%9b%b4%e6%8e%a5-dex-%e4%ba%a4%e6%98%93\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e用户直接与 DEX 合约交互，交易流程简单直接。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e用户钱包 -\u0026gt; DEX程序 (如Raydium/Orca) -\u0026gt; Token Program\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e特点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e交易日志简洁，主要包含单个 DEX 程序的调用\u003c/li\u003e\n\u003cli\u003e容易识别交易平台和交易对\u003c/li\u003e\n\u003cli\u003eToken Program 的 transfer 指令较少\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"12-聚合器交易jupiter\" class=\"relative group\"\u003e1.2 聚合器交易（Jupiter） \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#12-%e8%81%9a%e5%90%88%e5%99%a8%e4%ba%a4%e6%98%93jupiter\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e通过聚合器路由到单个或多个 DEX。\u003c/p\u003e","title":"Solana链上交易监控技术分析"},{"content":"一、故障现象 #1.1 单endpoint模式故障 # 单个WebSocket连接时消息接收完全阻塞 日志显示消息处理线程启动后无法接收新消息 [2024-12-12 20:31:29.455] [error] [setThreadAffinity] Error calling pthread_setaffinity_np: 22 [2024-12-12 20:31:29.697] [info] Message thread started for endpoint: OkxPublic // 之后无消息接收日志 1.2 多endpoint模式部分正常 # 多个WebSocket连接时只有一个线程能正常接收消息 日志显示消息处理情况： [20:54:50.542] [thread 91374] Processing message for OkxPublic [20:54:50.640] [thread 91374] Processing message for OkxPublic // 只有一个线程在持续处理消息 二、系统架构分析 #2.1 WebSocket消息接收机制 #void WebSocketClient::receiveMessages(const MessageHandler\u0026amp; handler) { while (true) { try { // 1. 阻塞式接收WebSocket消息 int n = ws_-\u0026gt;receiveFrame(buffer.data(), buffer.size(), flags); // 2. 同步回调处理消息 if (n \u0026gt; 0) { handler(buffer.data(), n); } } catch (const std::exception\u0026amp; e) { break; } } } 2.2 关键技术点 # 阻塞式WebSocket接收\nreceiveFrame是阻塞调用 直到收到消息才会返回 高频交易场景下需要快速响应 同步消息处理\n接收和处理在同一线程中 处理耗时会直接影响下一条消息的接收 适合高频交易的低延迟要求 CPU亲和性设置\nvoid ConnectionPool::setupRealtime(int cpu_core) { cpu_set_t cpuset; CPU_ZERO(\u0026amp;cpuset); CPU_SET(cpu_core, \u0026amp;cpuset); pthread_setaffinity_np(pthread_self(), sizeof(cpu_set_t), \u0026amp;cpuset); struct sched_param param; param.sched_priority = sched_get_priority_max(SCHED_FIFO); pthread_setschedparam(pthread_self(), SCHED_FIFO, \u0026amp;param); } 三、问题分析 #3.1 单endpoint阻塞原因 # CPU亲和性限制： 线程被强制绑定到特定CPU核心 当该核心被其他任务占用时，无法切换到其他核心 导致消息处理线程无法获得CPU时间 阻塞式接收影响： receiveFrame阻塞等待新消息 CPU亲和性限制导致线程无法及时获得CPU时间 即使有新消息也无法及时处理 3.2 多endpoint场景分析 # 为什么只有一个线程正常： 多个线程竞争CPU资源 获得CPU时间片的线程能正常处理消息 其他线程由于CPU亲和性限制无法切换核心，导致阻塞 日志证据： [20:54:50.542] [thread 91374] OkxPublic message processed [20:54:50.640] [thread 91374] OkxPublic message processed // 只有thread 91374持续工作 四、解决方案 #4.1 移除CPU亲和性限制 #void ConnectionPool::setupMessageHandler(context) { context-\u0026gt;message_thread = std::thread([this, context]() { // 移除CPU亲和性设置 // 让系统自动进行线程调度 while (running_) { context-\u0026gt;client-\u0026gt;receiveMessages(...); } }); } 4.2 优化性能监控 #struct ThreadMetrics { std::atomic\u0026lt;uint64_t\u0026gt; messages_processed{0}; std::atomic\u0026lt;uint64_t\u0026gt; processing_time_us{0}; std::atomic\u0026lt;uint64_t\u0026gt; max_processing_time_us{0}; std::atomic\u0026lt;int\u0026gt; current_cpu{-1}; }; 五、经验总结 # 高频交易系统特点 需要低延迟处理 同步处理模式更适合 系统调度策略需要谨慎 CPU亲和性使用原则 避免不必要的限制 让操作系统进行自然调度 需要时要充分测试验证 故障诊断要点 分析线程行为模式 对比不同场景的表现 理解底层技术机制 性能优化方向 保持消息处理的低延迟 添加性能监控指标 系统调度最优化 ","date":"13 December 2024","permalink":"/blog/message_overstocked/","section":"Blog","summary":"\u003ch2 id=\"一故障现象\" class=\"relative group\"\u003e一、故障现象 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e4%b8%80%e6%95%85%e9%9a%9c%e7%8e%b0%e8%b1%a1\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"11-单endpoint模式故障\" class=\"relative group\"\u003e1.1 单endpoint模式故障 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#11-%e5%8d%95endpoint%e6%a8%a1%e5%bc%8f%e6%95%85%e9%9a%9c\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e单个WebSocket连接时消息接收完全阻塞\u003c/li\u003e\n\u003cli\u003e日志显示消息处理线程启动后无法接收新消息\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-log\" data-lang=\"log\"\u003e[2024-12-12 20:31:29.455] [error] [setThreadAffinity] Error calling pthread_setaffinity_np: 22\n[2024-12-12 20:31:29.697] [info] Message thread started for endpoint: OkxPublic\n// 之后无消息接收日志\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"12-多endpoint模式部分正常\" class=\"relative group\"\u003e1.2 多endpoint模式部分正常 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#12-%e5%a4%9aendpoint%e6%a8%a1%e5%bc%8f%e9%83%a8%e5%88%86%e6%ad%a3%e5%b8%b8\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e多个WebSocket连接时只有一个线程能正常接收消息\u003c/li\u003e\n\u003cli\u003e日志显示消息处理情况：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-log\" data-lang=\"log\"\u003e[20:54:50.542] [thread 91374] Processing message for OkxPublic\n[20:54:50.640] [thread 91374] Processing message for OkxPublic\n// 只有一个线程在持续处理消息\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"二系统架构分析\" class=\"relative group\"\u003e二、系统架构分析 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e4%ba%8c%e7%b3%bb%e7%bb%9f%e6%9e%b6%e6%9e%84%e5%88%86%e6%9e%90\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"21-websocket消息接收机制\" class=\"relative group\"\u003e2.1 WebSocket消息接收机制 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#21-websocket%e6%b6%88%e6%81%af%e6%8e%a5%e6%94%b6%e6%9c%ba%e5%88%b6\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eWebSocketClient\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ereceiveMessages\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eMessageHandler\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ehandler\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// 1. 阻塞式接收WebSocket消息\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ews_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ereceiveFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003ebuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// 2. 同步回调处理消息\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003ehandler\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eexception\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"22-关键技术点\" class=\"relative group\"\u003e2.2 关键技术点 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#22-%e5%85%b3%e9%94%ae%e6%8a%80%e6%9c%af%e7%82%b9\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e阻塞式WebSocket接收\u003c/strong\u003e\u003c/p\u003e","title":"WebSocket消息处理线程CPU亲和性导致的消息阻塞故障分析"},{"content":"1. 需求背景 #在高频交易系统中，我们面临一个典型场景：需要同时处理三个关联订单（三角套利）。这些订单必须几乎同时发出以确保套利的有效性。\n关键挑战：\n订单必须同时或几乎同时发出 系统需要处理高并发的订单组 需要保证订单处理的稳定性和可靠性 2. 当前使用的两种处理订单的机制 # 无锁队列机制 订单生成后进入一个无锁队列 多个线程从队列中取订单进行处理 订单的发送通过RestClient进行，RestClient负责管理HTTP连接池并发送请求 分片机制 订单生成后根据某种规则分配到不同的分片 每个分片由固定的线程处理 同一组的订单被分配到同一个分片，确保组内订单的处理一致性 RestClient同样负责订单的发送 class OrderShard { private: struct OrderGroup { uint64_t groupId; uint64_t timestamp; std::vector\u0026lt;Order\u0026gt; orders; }; std::queue\u0026lt;OrderGroup\u0026gt; orderQueue_; std::mutex mutex_; std::condition_variable cv_; RestClient restClient_; public: void addOrderGroup(OrderGroup group) { { std::lock_guard\u0026lt;std::mutex\u0026gt; lock(mutex_); orderQueue_.push(std::move(group)); } cv_.notify_one(); } void processOrders() { while (running_) { OrderGroup group; { std::unique_lock\u0026lt;std::mutex\u0026gt; lock(mutex_); cv_.wait(lock, [this] { return !orderQueue_.empty() || !running_; }); if (!running_) break; group = std::move(orderQueue_.front()); orderQueue_.pop(); } // 批量发送同组订单 sendOrderGroup(group); } } private: void sendOrderGroup(const OrderGroup\u0026amp; group) { // 使用同一个连接发送组内所有订单 auto conn = restClient_.getConnection(); for (const auto\u0026amp; order : group.orders) { conn-\u0026gt;sendOrder(order); } } }; 3. 两种机制的执行结果分析 # 无锁队列机制 日志显示组内订单的发送时间差较大，通常在180-220ms之间 存在较大的延迟波动，部分组的最大时间差超过1000ms 总订单组数: 164 存在时间差的组数: 161 最大时间差: 2961.000ms 平均时间差: 308.851ms 分片机制\n日志显示组内订单的发送时间差非常小，基本在0-1ms之间 订单几乎同时发出，延迟波动很小 总订单组数: 416 存在时间差的组数: 166 最大时间差: 425.000ms 平均时间差: 56.991ms 4. 机制差异分析 # 无锁队列机制 所有订单进入同一个队列 多个线程从同一队列取任务，即使是无锁的，仍然存在竞争 同一组的三个订单可能被不同线程处理，导致时间差 线程调度的不确定性导致组内订单的发送时间不一致 分片机制 通过分片将同组订单分配到同一线程，避免了线程间的竞争 固定线程处理同一分片，确保了组内订单的处理顺序和时间一致性 5. 适合需求的最佳方案 # 分片机制 理由：分片机制能够确保同组订单的处理一致性，满足几乎同时发出的需求 通过减少线程竞争和调度不确定性，分片机制提供了更稳定的性能 6. 最佳方案的优化方向 # 优化分片策略 根据订单特性优化分片规则，进一步提高处理效率 调整线程池配置 根据系统负载动态调整线程池大小，确保资源的合理利用 优化RestClient连接池 根据请求并发量调整连接池大小，确保请求的快速发送 监控和调优 持续监控系统性能，识别瓶颈并进行调优 使用性能分析工具识别和优化关键路径 ","date":"12 December 2024","permalink":"/blog/sendingorder/","section":"Blog","summary":"\u003ch3 id=\"1-需求背景\" class=\"relative group\"\u003e1. 需求背景 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-%e9%9c%80%e6%b1%82%e8%83%8c%e6%99%af\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e在高频交易系统中，我们面临一个典型场景：需要同时处理三个关联订单（三角套利）。这些订单必须几乎同时发出以确保套利的有效性。\u003c/p\u003e\n\u003cp\u003e关键挑战：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e订单必须同时或几乎同时发出\u003c/li\u003e\n\u003cli\u003e系统需要处理高并发的订单组\u003c/li\u003e\n\u003cli\u003e需要保证订单处理的稳定性和可靠性\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-当前使用的两种处理订单的机制\" class=\"relative group\"\u003e2. 当前使用的两种处理订单的机制 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#2-%e5%bd%93%e5%89%8d%e4%bd%bf%e7%94%a8%e7%9a%84%e4%b8%a4%e7%a7%8d%e5%a4%84%e7%90%86%e8%ae%a2%e5%8d%95%e7%9a%84%e6%9c%ba%e5%88%b6\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e无锁队列机制\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e订单生成后进入一个无锁队列\u003c/li\u003e\n\u003cli\u003e多个线程从队列中取订单进行处理\u003c/li\u003e\n\u003cli\u003e订单的发送通过RestClient进行，RestClient负责管理HTTP连接池并发送请求\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e分片机制\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e订单生成后根据某种规则分配到不同的分片\u003c/li\u003e\n\u003cli\u003e每个分片由固定的线程处理\u003c/li\u003e\n\u003cli\u003e同一组的订单被分配到同一个分片，确保组内订单的处理一致性\u003c/li\u003e\n\u003cli\u003eRestClient同样负责订单的发送\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eOrderShard\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eprivate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eOrderGroup\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003euint64_t\u003c/span\u003e \u003cspan class=\"n\"\u003egroupId\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003euint64_t\u003c/span\u003e \u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eOrder\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eorders\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eOrderGroup\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eorderQueue_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emutex\u003c/span\u003e \u003cspan class=\"n\"\u003emutex_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econdition_variable\u003c/span\u003e \u003cspan class=\"n\"\u003ecv_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eRestClient\u003c/span\u003e \u003cspan class=\"n\"\u003erestClient_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eaddOrderGroup\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eOrderGroup\u003c/span\u003e \u003cspan class=\"n\"\u003egroup\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003elock_guard\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emutex_\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eorderQueue_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emove\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egroup\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecv_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enotify_one\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocessOrders\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erunning_\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eOrderGroup\u003c/span\u003e \u003cspan class=\"n\"\u003egroup\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunique_lock\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emutex_\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003ecv_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewait\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eorderQueue_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eempty\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003erunning_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003erunning_\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003egroup\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emove\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorderQueue_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efront\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eorderQueue_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// 批量发送同组订单\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"n\"\u003esendOrderGroup\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egroup\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eprivate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003esendOrderGroup\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eOrderGroup\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003egroup\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 使用同一个连接发送组内所有订单\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003econn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erestClient_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetConnection\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"nl\"\u003eorder\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003egroup\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eorders\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003econn\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esendOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-两种机制的执行结果分析\" class=\"relative group\"\u003e3. 两种机制的执行结果分析 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#3-%e4%b8%a4%e7%a7%8d%e6%9c%ba%e5%88%b6%e7%9a%84%e6%89%a7%e8%a1%8c%e7%bb%93%e6%9e%9c%e5%88%86%e6%9e%90\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e无锁队列机制\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e日志显示组内订单的发送时间差较大，通常在180-220ms之间\u003c/li\u003e\n\u003cli\u003e存在较大的延迟波动，部分组的最大时间差超过1000ms\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e总订单组数: 164\n存在时间差的组数: 161\n最大时间差: 2961.000ms\n平均时间差: 308.851ms\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e分片机制\u003c/strong\u003e\u003c/p\u003e","title":"高频交易系统中的大吞吐量订单发送机制"},{"content":"1. 背景问题 #1.1 性能挑战 # 高吞吐量订单处理需求 每个订单都需要 HTTP 请求 JWT Token 生成开销大 网络延迟敏感 1.2 主要痛点 # 单个订单发送造成网络请求过多 JWT Token 频繁生成浪费资源 大量订单并发可能导致系统瓶颈 2. 解决方案 #2.1 JWT Token 缓存机制 #class RestClient { private: static constexpr auto JWT_REFRESH_INTERVAL = std::chrono::seconds(110); // 预留刷新窗口 std::string getOrCreateJWT(const std::string\u0026amp; uri) { auto now = std::chrono::steady_clock::now(); if (!cache.token.empty() \u0026amp;\u0026amp; now \u0026lt; cache.expiryTime) { return cache.token; } cache.token = generateJWT(uri); cache.expiryTime = now + JWT_REFRESH_INTERVAL; return cache.token; } }; 优点：\n减少 JWT 生成次数 降低 CPU 使用率 提高请求响应速度 2.2 智能批量处理机制 #void ExecutionEngine::executeOrder(const OrderReadyForExecutionEvent\u0026amp; order) { auto now = std::chrono::steady_clock::now(); if (collector_.orders.empty()) { collector_.firstOrderTime = now; } collector_.orders.push_back(order); bool shouldBatch = collector_.orders.size() \u0026gt;= BATCH_THRESHOLD; bool withinWindow = (now - collector_.firstOrderTime) \u0026lt;= COLLECT_WINDOW; if (shouldBatch || !withinWindow) { if (collector_.orders.size() == 1) { processSingleOrder(collector_.orders[0]); } else { processBatchOrders(); } collector_.orders.clear(); } } 优点：\n自适应处理策略 平衡延迟和吞吐量 优化网络资源使用 2.3 订单配置结构设计 #struct OrderConfig { struct LimitGTC { std::string baseSize; std::string limitPrice; bool postOnly{false}; }; struct MarketIOC { std::string baseSize; }; Type type; std::variant\u0026lt;LimitGTC, MarketIOC\u0026gt; config; std::string orderId; std::string productId; std::string side; }; 优点：\n类型安全 清晰的数据结构 易于维护和扩展 3. 关键设计参数 #3.1 批处理参数 #static constexpr size_t BATCH_THRESHOLD = 20; // 批处理阈值 static constexpr auto COLLECT_WINDOW = std::chrono::microseconds(50); // 收集窗口 3.2 JWT 缓存参数 #static constexpr auto JWT_REFRESH_INTERVAL = std::chrono::seconds(110); // JWT刷新间隔 4. 性能优化点 #4.1 内存优化 #configs.reserve(collector_.orders.size()); // 预分配内存 configs.push_back(std::move(config)); // 使用移动语义 4.2 批处理优化 # 动态判断是否使用批处理 单订单直接处理 批量订单合并请求 4.3 错误处理 #try { auto response = m_RestClient-\u0026gt;batchCreateOrders(configs); // 处理响应... } catch (const std::exception\u0026amp; e) { LOG_ERROR(\u0026#34;Batch processing error: {}\u0026#34;, e.what()); } 5. 方案优势 # 性能提升：\n减少网络请求数量 降低系统资源消耗 优化内存使用 可靠性：\n完善的错误处理 JWT Token 可靠性保证 订单状态追踪 可维护性：\n清晰的代码结构 类型安全的设计 详细的日志记录 灵活性：\n可配置的参数 自适应处理策略 易于扩展 6. 监控建议 # 性能指标：\n订单处理延迟 批处理大小分布 JWT 缓存命中率 系统指标：\nCPU 使用率 内存使用情况 网络请求统计 业务指标：\n订单成功率 批处理效率 错误率统计 7. 最佳实践 # 参数调优：\n根据实际负载调整批处理阈值 监控并优化时间窗口 定期评估性能指标 错误处理：\n实现重试机制 记录详细错误信息 监控异常情况 性能优化：\n使用移动语义 预分配内存 避免不必要的复制 这个方案通过合理的设计和优化，有效解决了高吞吐量订单处理的挑战，同时保证了系统的可靠性和可维护性。\n","date":"6 December 2024","permalink":"/blog/batch_order/","section":"Blog","summary":"\u003ch2 id=\"1-背景问题\" class=\"relative group\"\u003e1. 背景问题 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-%e8%83%8c%e6%99%af%e9%97%ae%e9%a2%98\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"11-性能挑战\" class=\"relative group\"\u003e1.1 性能挑战 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#11-%e6%80%a7%e8%83%bd%e6%8c%91%e6%88%98\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e高吞吐量订单处理需求\u003c/li\u003e\n\u003cli\u003e每个订单都需要 HTTP 请求\u003c/li\u003e\n\u003cli\u003eJWT Token 生成开销大\u003c/li\u003e\n\u003cli\u003e网络延迟敏感\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"12-主要痛点\" class=\"relative group\"\u003e1.2 主要痛点 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#12-%e4%b8%bb%e8%a6%81%e7%97%9b%e7%82%b9\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e单个订单发送造成网络请求过多\u003c/li\u003e\n\u003cli\u003eJWT Token 频繁生成浪费资源\u003c/li\u003e\n\u003cli\u003e大量订单并发可能导致系统瓶颈\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-解决方案\" class=\"relative group\"\u003e2. 解决方案 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#2-%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"21-jwt-token-缓存机制\" class=\"relative group\"\u003e2.1 JWT Token 缓存机制 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#21-jwt-token-%e7%bc%93%e5%ad%98%e6%9c%ba%e5%88%b6\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRestClient\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eprivate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eJWT_REFRESH_INTERVAL\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003echrono\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eseconds\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e110\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 预留刷新窗口\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003egetOrCreateJWT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003enow\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003echrono\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esteady_clock\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ecache\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eempty\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003enow\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecache\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexpiryTime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ecache\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecache\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoken\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egenerateJWT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecache\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexpiryTime\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enow\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eJWT_REFRESH_INTERVAL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ecache\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e优点\u003c/strong\u003e：\u003c/p\u003e","title":"高性能订单执行系统设计方案"},{"content":"0. 内存管理优化 #0.1 大页内存 (Huge Pages) #大页内存是一种内存管理优化技术，主要优势：\n减少 TLB (Translation Lookaside Buffer) 缺失 减少页表项数量 提高内存访问效率 系统配置和检查：\n# 检查系统大页配置 cat /proc/meminfo | grep Huge # 配置大页 echo 20 \u0026gt; /proc/sys/vm/nr_hugepages # 分配20个大页 0.2 内存锁定 (Memory Locking) #防止内存被交换到磁盘，确保数据始终在物理内存中：\n# 检查内存锁定限制 ulimit -l # 修改限制（需要root权限） echo \u0026#34;* soft memlock unlimited\u0026#34; \u0026gt;\u0026gt; /etc/security/limits.conf 0.3 内存优化实现 #struct IOBuffer { char* data; size_t size; explicit IOBuffer(size_t s) : size(s) { // 1. 尝试使用大页内存 data = static_cast\u0026lt;char*\u0026gt;(mmap(nullptr, size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS | MAP_HUGETLB, -1, 0)); if (data == MAP_FAILED) { // 2. 回退到普通内存 + 预填充 data = static_cast\u0026lt;char*\u0026gt;(mmap(nullptr, size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS | MAP_POPULATE, -1, 0)); if (data == MAP_FAILED) { throw std::runtime_error(\u0026#34;Failed to allocate memory\u0026#34;); } } // 3. 尝试锁定内存 if (mlock(data, size) != 0) { LOG_WARN(\u0026#34;Failed to lock memory: {}\u0026#34;, strerror(errno)); } } ~IOBuffer() { if (data != MAP_FAILED \u0026amp;\u0026amp; data != nullptr) { munlock(data, size); munmap(data, size); } } }; 1. io_uring 多路 I/O 优势 #1.1 传统 I/O 模型的问题 #// 传统 epoll 模型 int epoll_fd = epoll_create1(0); struct epoll_event events[MAX_EVENTS]; // 每个 I/O 操作都需要系统调用 read(fd, buffer, len); // 系统调用 write(fd, data, len); // 系统调用 epoll_wait(epoll_fd, events, MAX_EVENTS, timeout); // 系统调用 问题：\n每个 I/O 操作都需要独立的系统调用 上下文切换开销大 数据复制次数多 1.2 io_uring 的改进 #struct io_uring ring; struct io_uring_sqe *sqe; struct io_uring_cqe *cqe; // 批量提交 I/O 请求 for (int i = 0; i \u0026lt; n_requests; i++) { sqe = io_uring_get_sqe(\u0026amp;ring); io_uring_prep_read(sqe, fds[i], buffers[i], len, offset); sqe-\u0026gt;user_data = i; // 标识请求 } // 一次系统调用提交所有请求 io_uring_submit(\u0026amp;ring); 优势：\n批量提交减少系统调用 零拷贝 I/O 异步处理多个 I/O 请求 2. WebSocket 多连接处理实现 #2.1 基础结构 #struct IOContext { int fd; IOBuffer buffer; std::function\u0026lt;void(const char*, size_t)\u0026gt; callback; }; class WebSocketClient { private: struct io_uring ring; std::vector\u0026lt;IOContext\u0026gt; contexts; static constexpr int QUEUE_DEPTH = 256; // ... }; 2.2 多连接 I/O 处理 #void WebSocketClient::processMultipleConnections() { struct io_uring_params params = {}; params.flags = IORING_SETUP_SQPOLL; params.sq_thread_cpu = cpu_core_; // 初始化 io_uring io_uring_queue_init_params(QUEUE_DEPTH, \u0026amp;ring, \u0026amp;params); // 为每个连接提交读请求 for (auto\u0026amp; ctx : contexts) { struct io_uring_sqe *sqe = io_uring_get_sqe(\u0026amp;ring); io_uring_prep_read(sqe, ctx.fd, ctx.buffer.data, ctx.buffer.size, 0); sqe-\u0026gt;user_data = reinterpret_cast\u0026lt;__u64\u0026gt;(\u0026amp;ctx); } // 一次提交所有请求 io_uring_submit(\u0026amp;ring); // 处理完成事件 while (running_) { struct io_uring_cqe *cqe; int ret = io_uring_wait_cqe(\u0026amp;ring, \u0026amp;cqe); if (ret == 0) { IOContext *ctx = reinterpret_cast\u0026lt;IOContext*\u0026gt;(cqe-\u0026gt;user_data); if (cqe-\u0026gt;res \u0026gt; 0) { // 处理数据 ctx-\u0026gt;callback(ctx-\u0026gt;buffer.data, cqe-\u0026gt;res); // 提交新的读请求 struct io_uring_sqe *sqe = io_uring_get_sqe(\u0026amp;ring); io_uring_prep_read(sqe, ctx-\u0026gt;fd, ctx-\u0026gt;buffer.data, ctx-\u0026gt;buffer.size, 0); sqe-\u0026gt;user_data = cqe-\u0026gt;user_data; io_uring_submit(\u0026amp;ring); } io_uring_cqe_seen(\u0026amp;ring, cqe); } } } 2.3 性能优化技巧 #批量提交优化 #void submitBatchRequests() { int pending = 0; for (auto\u0026amp; ctx : contexts) { struct io_uring_sqe *sqe = io_uring_get_sqe(\u0026amp;ring); io_uring_prep_read(sqe, ctx.fd, ctx.buffer.data, ctx.buffer.size, 0); sqe-\u0026gt;user_data = reinterpret_cast\u0026lt;__u64\u0026gt;(\u0026amp;ctx); pending++; // 达到批次大小时提交 if (pending == BATCH_SIZE) { io_uring_submit(\u0026amp;ring); pending = 0; } } // 提交剩余请求 if (pending \u0026gt; 0) { io_uring_submit(\u0026amp;ring); } } 内存对齐和缓存优化 #struct alignas(64) IOContext { // 缓存行对齐 int fd; IOBuffer buffer; std::function\u0026lt;void(const char*, size_t)\u0026gt; callback; char padding[CACHE_LINE_SIZE - sizeof(fd) - sizeof(buffer) - sizeof(callback)]; }; 3. 性能监控和调优 #3.1 性能指标收集 #struct IOStats { std::atomic\u0026lt;uint64_t\u0026gt; total_requests{0}; std::atomic\u0026lt;uint64_t\u0026gt; completed_requests{0}; std::atomic\u0026lt;uint64_t\u0026gt; total_bytes{0}; std::atomic\u0026lt;uint64_t\u0026gt; error_count{0}; void recordRequest() { total_requests++; } void recordCompletion(size_t bytes) { completed_requests++; total_bytes += bytes; } void recordError() { error_count++; } }; 3.2 性能监控示例 #void monitorPerformance() { while (running_) { auto start_stats = io_stats; std::this_thread::sleep_for(std::chrono::seconds(1)); auto end_stats = io_stats; uint64_t requests_per_sec = end_stats.completed_requests - start_stats.completed_requests; uint64_t bytes_per_sec = end_stats.total_bytes - start_stats.total_bytes; LOG_INFO(\u0026#34;IO Stats: {} req/s, {} MB/s\u0026#34;, requests_per_sec, bytes_per_sec / (1024 * 1024)); } } 4. 最佳实践总结 # 批量处理\n合并多个 I/O 请求 减少系统调用次数 提高吞吐量 内存管理\n使用大页内存 内存对齐 避免内存拷贝 CPU 亲和性\n绑定 io_uring 工作线程到特定 CPU 减少 CPU 缓存失效 错误处理\n优雅降级 自动重试机制 详细的错误日志 监控和调优\n实时性能指标 系统资源使用情况 异常情况告警 通过这些技术的组合使用，可以构建一个高性能、可靠的多连接 I/O 处理系统。io_uring 的异步特性和批量处理能力，配合合理的内存管理和监控机制，能够显著提升系统的整体性能。\n","date":"6 December 2024","permalink":"/blog/io_uring/","section":"Blog","summary":"\u003ch2 id=\"0-内存管理优化\" class=\"relative group\"\u003e0. 内存管理优化 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#0-%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86%e4%bc%98%e5%8c%96\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"01-大页内存-huge-pages\" class=\"relative group\"\u003e0.1 大页内存 (Huge Pages) \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#01-%e5%a4%a7%e9%a1%b5%e5%86%85%e5%ad%98-huge-pages\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e大页内存是一种内存管理优化技术，主要优势：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e减少 TLB (Translation Lookaside Buffer) 缺失\u003c/li\u003e\n\u003cli\u003e减少页表项数量\u003c/li\u003e\n\u003cli\u003e提高内存访问效率\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e系统配置和检查：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 检查系统大页配置\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat /proc/meminfo \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep Huge\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 配置大页\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"m\"\u003e20\u003c/span\u003e \u0026gt; /proc/sys/vm/nr_hugepages  \u003cspan class=\"c1\"\u003e# 分配20个大页\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"02-内存锁定-memory-locking\" class=\"relative group\"\u003e0.2 内存锁定 (Memory Locking) \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#02-%e5%86%85%e5%ad%98%e9%94%81%e5%ae%9a-memory-locking\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e防止内存被交换到磁盘，确保数据始终在物理内存中：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 检查内存锁定限制\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eulimit\u003c/span\u003e -l\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 修改限制（需要root权限）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;* soft memlock unlimited\u0026#34;\u003c/span\u003e \u0026gt;\u0026gt; /etc/security/limits.conf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"03-内存优化实现\" class=\"relative group\"\u003e0.3 内存优化实现 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#03-%e5%86%85%e5%ad%98%e4%bc%98%e5%8c%96%e5%ae%9e%e7%8e%b0\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eIOBuffer\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eexplicit\u003c/span\u003e \u003cspan class=\"nf\"\u003eIOBuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 1. 尝试使用大页内存\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emmap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ePROT_READ\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ePROT_WRITE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eMAP_PRIVATE\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eMAP_ANONYMOUS\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eMAP_HUGETLB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eMAP_FAILED\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"c1\"\u003e// 2. 回退到普通内存 + 预填充\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emmap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003ePROT_READ\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ePROT_WRITE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eMAP_PRIVATE\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eMAP_ANONYMOUS\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eMAP_POPULATE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eMAP_FAILED\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eruntime_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Failed to allocate memory\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 3. 尝试锁定内存\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emlock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eLOG_WARN\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Failed to lock memory: {}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estrerror\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerrno\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"n\"\u003eIOBuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eMAP_FAILED\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"k\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003emunlock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003emunmap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"1-io_uring-多路-io-优势\" class=\"relative group\"\u003e1. io_uring 多路 I/O 优势 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-io_uring-%e5%a4%9a%e8%b7%af-io-%e4%bc%98%e5%8a%bf\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"11-传统-io-模型的问题\" class=\"relative group\"\u003e1.1 传统 I/O 模型的问题 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#11-%e4%bc%a0%e7%bb%9f-io-%e6%a8%a1%e5%9e%8b%e7%9a%84%e9%97%ae%e9%a2%98\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 传统 epoll 模型\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eepoll_fd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eepoll_create1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eepoll_event\u003c/span\u003e \u003cspan class=\"n\"\u003eevents\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eMAX_EVENTS\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 每个 I/O 操作都需要系统调用\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// 系统调用\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// 系统调用\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eepoll_wait\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eepoll_fd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eevents\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eMAX_EVENTS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 系统调用\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e问题：\u003c/p\u003e","title":"高性能网络编程：io_uring 与内存优化技术详解"},{"content":"","date":null,"permalink":"/tags/hft-system-design/","section":"Tags","summary":"","title":"HFT System Design"},{"content":"1. 业务背景与挑战 #在高频交易系统中，需要同时维护多个WebSocket连接以订阅不同交易所的行情数据。主要挑战包括：\n需要处理多个交易所的并发连接 对消息处理延迟有严格要求 需要保证数据处理的稳定性 系统资源（CPU、内存）的高效利用 2. 传统方案的局限 #2.1 传统消息队列方案 #// 常见的消息处理流程 WebSocket接收 -\u0026gt; 消息队列 -\u0026gt; 处理线程池 -\u0026gt; 业务处理 存在的问题：\n消息经过队列带来额外延迟 线程切换开销大 内存拷贝次数多 资源竞争导致性能不稳定 3. 优化方案设计 #3.1 核心设计理念 # 零拷贝数据处理 CPU亲和性绑定 预分配内存 每个连接独立处理 3.2 关键组件设计 #struct ConnectionContext { // 连接基础信息 std::shared_ptr\u0026lt;WebSocketClient\u0026gt; client; std::string endpoint_name; // 性能优化相关 int cpu_core{-1}; // CPU核心绑定 char* direct_buffer{nullptr}; // 预分配缓冲区 static constexpr size_t BUFFER_SIZE = 64 * 1024; std::shared_ptr\u0026lt;MessageProcessor\u0026gt; dedicated_processor; // 资源管理 ~ConnectionContext() { if (direct_buffer) { munlock(direct_buffer, BUFFER_SIZE); munmap(direct_buffer, BUFFER_SIZE); } } // 禁用拷贝以保证资源安全 ConnectionContext(const ConnectionContext\u0026amp;) = delete; ConnectionContext\u0026amp; operator=(const ConnectionContext\u0026amp;) = delete; }; 3.3 优化细节 # 内存管理优化 // 使用大页内存和内存锁定 void* buffer = mmap(nullptr, BUFFER_SIZE, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0); mlock(buffer, BUFFER_SIZE); 原因：\n避免动态内存分配 减少页面错误 提供稳定的内存访问性能 CPU亲和性优化 void setupRealtime(int cpu_core) { cpu_set_t cpuset; CPU_ZERO(\u0026amp;cpuset); CPU_SET(cpu_core, \u0026amp;cpuset); pthread_setaffinity_np(pthread_self(), sizeof(cpu_set_t), \u0026amp;cpuset); } 原因：\n减少线程迁移 提高CPU缓存利用率 降低延迟抖动 消息处理优化 // 直接在IO线程处理数据 context-\u0026gt;client-\u0026gt;receiveMessages([context](const char* data, size_t length) { // 直接使用预分配缓冲区 memcpy(context-\u0026gt;direct_buffer, data, length); context-\u0026gt;dedicated_processor-\u0026gt;processMessage(/*...*/); }); 原因：\n消除线程切换开销 减少数据拷贝次数 提供确定性的处理延迟 4. 性能监控 #struct PerformanceMetrics { std::atomic\u0026lt;uint64_t\u0026gt; message_count{0}; std::atomic\u0026lt;uint64_t\u0026gt; total_latency_ns{0}; std::atomic\u0026lt;uint64_t\u0026gt; max_latency_ns{0}; }; 实现了精确到纳秒级的延迟监控，便于:\n实时监控系统性能 及时发现性能问题 提供优化依据 5. 方案优势 # 延迟优化 从微秒级优化到纳秒级 消除了队列和线程切换开销 提供稳定的处理延迟 资源利用 CPU资源隔离 内存访问优化 减少系统调用 可靠性保证 资源自动释放 连接状态监控 异常处理机制 易于维护 清晰的代码结构 完善的监控指标 模块化设计 6. 实际效果 # 消息处理延迟降低到纳秒级别 CPU利用率更加均衡 系统稳定性显著提升 内存使用更加高效 7. 总结 #本方案通过深入优化系统底层，实现了高性能的多WS连接处理。关键在于：\n合理的内存管理 优秀的CPU亲和性设计 高效的消息处理机制 完善的性能监控体系 这些优化使系统能够满足高频交易对低延迟的严格要求。\n","date":"3 December 2024","permalink":"/blog/multiquotedata/","section":"Blog","summary":"\u003ch2 id=\"1-业务背景与挑战\" class=\"relative group\"\u003e1. 业务背景与挑战 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-%e4%b8%9a%e5%8a%a1%e8%83%8c%e6%99%af%e4%b8%8e%e6%8c%91%e6%88%98\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e在高频交易系统中，需要同时维护多个WebSocket连接以订阅不同交易所的行情数据。主要挑战包括：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e需要处理多个交易所的并发连接\u003c/li\u003e\n\u003cli\u003e对消息处理延迟有严格要求\u003c/li\u003e\n\u003cli\u003e需要保证数据处理的稳定性\u003c/li\u003e\n\u003cli\u003e系统资源（CPU、内存）的高效利用\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-传统方案的局限\" class=\"relative group\"\u003e2. 传统方案的局限 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#2-%e4%bc%a0%e7%bb%9f%e6%96%b9%e6%a1%88%e7%9a%84%e5%b1%80%e9%99%90\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"21-传统消息队列方案\" class=\"relative group\"\u003e2.1 传统消息队列方案 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#21-%e4%bc%a0%e7%bb%9f%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e6%96%b9%e6%a1%88\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 常见的消息处理流程\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eWebSocket接收\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"err\"\u003e消息队列\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"err\"\u003e处理线程池\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"err\"\u003e业务处理\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e存在的问题：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e消息经过队列带来额外延迟\u003c/li\u003e\n\u003cli\u003e线程切换开销大\u003c/li\u003e\n\u003cli\u003e内存拷贝次数多\u003c/li\u003e\n\u003cli\u003e资源竞争导致性能不稳定\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-优化方案设计\" class=\"relative group\"\u003e3. 优化方案设计 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#3-%e4%bc%98%e5%8c%96%e6%96%b9%e6%a1%88%e8%ae%be%e8%ae%a1\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"31-核心设计理念\" class=\"relative group\"\u003e3.1 核心设计理念 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#31-%e6%a0%b8%e5%bf%83%e8%ae%be%e8%ae%a1%e7%90%86%e5%bf%b5\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003col\u003e\n\u003cli\u003e零拷贝数据处理\u003c/li\u003e\n\u003cli\u003eCPU亲和性绑定\u003c/li\u003e\n\u003cli\u003e预分配内存\u003c/li\u003e\n\u003cli\u003e每个连接独立处理\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"32-关键组件设计\" class=\"relative group\"\u003e3.2 关键组件设计 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#32-%e5%85%b3%e9%94%ae%e7%bb%84%e4%bb%b6%e8%ae%be%e8%ae%a1\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eConnectionContext\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 连接基础信息\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eshared_ptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eWebSocketClient\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eclient\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eendpoint_name\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 性能优化相关\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecpu_core\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// CPU核心绑定\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003edirect_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"k\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 预分配缓冲区\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003eBUFFER_SIZE\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e64\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e1024\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eshared_ptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eMessageProcessor\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ededicated_processor\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 资源管理\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"n\"\u003eConnectionContext\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edirect_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003emunlock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edirect_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBUFFER_SIZE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003emunmap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edirect_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBUFFER_SIZE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 禁用拷贝以保证资源安全\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eConnectionContext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eConnectionContext\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eConnectionContext\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eConnectionContext\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"33-优化细节\" class=\"relative group\"\u003e3.3 优化细节 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#33-%e4%bc%98%e5%8c%96%e7%bb%86%e8%8a%82\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003col\u003e\n\u003cli\u003e内存管理优化\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 使用大页内存和内存锁定\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ebuffer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emmap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBUFFER_SIZE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ePROT_READ\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ePROT_WRITE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eMAP_PRIVATE\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eMAP_ANONYMOUS\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003emlock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBUFFER_SIZE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e原因：\u003c/p\u003e","title":"高频交易场景下的多WS连接低延时方案设计"},{"content":"","date":null,"permalink":"/tags/others/","section":"Tags","summary":"","title":"Others"},{"content":"HSBC 速记 汇丰私人财富规划\n玺越世家 · 臻享沙龙 上海站\n（速记稿）\n时间：2024 年 11 月 24 日\n地点：上海浦东文华东方酒店 LG1 层东方厅\n主持人：女士们，先生们，各位尊敬的来宾，我是陈佳昊（音），我是汇丰私人财富规划上海分区总经理，我代表上海汇丰私人财富规划欢迎各位的莅临。\n今天有很多新朋友，也有很多老朋友，我在周五的时候问过后台同事报名报了多少了，他告诉我们已经快要接近 200 人了，但从今天的规模来看，我感觉好像今天的人数还要再超过一些。\n当然了，有一些是原先的老客户，也有很多是慕名而来，看到这次邀请的是付鹏先生，所以慕名而来。也有一些新朋友。在付鹏先生上台之前，请允许我对汇丰私人财富规划做简短的介绍。\n汇丰私人财富规划是全球的战略重点之一，老朋友都知道，汇丰私人财富规划成立于 2020 年，距今刚好四年，在四年的过程中集团一直在给我们大力注资，也是集团里最重要的项目之一。\n为什么聚焦在中国市场上？大家很多人都明白，中国中产阶级的人数在世界上占有量是最庞大的，随着中国经济的高速发展，中国人财富管理的需求逐步提升到很高的水准。所以，私人财富规划也会变成汇丰的重要战略之一。\n介绍一下发展历史，从 2020 年汇丰私人财富规划成立，先是在上海和广州，总部离这里不远，汇丰总部就在国金，欢迎大家去坐一坐。逐步进入到杭州、深圳、北京、佛山，今年在苏州、成都开立了分支机构。\n2020 年汇丰私人财富规划才刚刚成立，那汇丰的历史又是怎么样的？汇丰简称叫 HSBC，很多人会问 HSBC 四个字母分别代表着什么，可以跟大家简单介绍一下，H 代表的是香港的意思，S 代表的是上海的意思。很多人印象中以为汇丰是一家外资银行，但其实大家有所不知，其实汇丰在清朝的时候就在外滩已经设立了总部，现在这栋楼交给了浦发银行。1949 年之后，汇丰因为历史的原因退出了中国，在 WTO 之后回到了中国。\n汇丰 1865 年成立至今已经有 100 多年了，那时候还是清朝的同治年间，同时已经在全球的 62 个国家还有 3900 多名客户，这段历史和这么大的分布也是汇丰很多同事内心的骄傲。我们跟很多客户做沟通的时候，经常会把这段历史拿出来跟大家讲一讲，就像这头石狮子，很多人都见过，但很多人都不知道它的历史，很多人在海报、广告、港元大钞上看过这个石狮子，原来在外滩上也有两座，现在放在上海博物馆里，前一阵儿我在博物馆参观的时候还看到了这两只石狮子，上面还有很多历史的痕迹，比如说战争而留下的弹孔，就在人民广场的博物馆里，大家有兴趣的话可以去看一下。\n财富大矩阵与中国内地市场，汇丰集团对于中国私人财富规划业务的重视程度，在大矩阵中承担了很重要的地位。\n每 100 位客户中，会有 87 位客户将汇丰私人财富规划视作为提供财富重要的主要品牌，提出了很多好评，82% 的调研者打出 9-10 分的高分。\n也有一些比较有意思的话，如：“对产品内容的保障满意，公司大有保障；甄汇生活有一定的吸引力，汇丰的产品较贵但也愿意买，因为对汇丰私人财富规划师的认可。”\n这两年提出一句比较新的 Slogan“懂你关心的，给你安心的”。\n今天的活动我们邀请到了一位重量级嘉宾，他曾任职于雷曼兄弟、所罗门投资集团等全球顶尖金融机构，从事对冲基金等相关工作。他就是东北证券首席经济学家付鹏先生。让我们欢迎付鹏先生为我们带来《2024 年年终回顾和 2025 年展望——对冲风险 VS 软着陆》主题分享，有请付鹏先生！\n付鹏：正值年底，虽然刚才汇丰一直强调大家不录音不录像，但大概率你挡不住。我在这儿讲话会谨慎一些，非常小心谨慎，大概率会有人透露出去，放到 YouTube 上，基本上所有见我都说付总我在 YouTube 上看过你的视频，我说那都是盗版的，靠盗版发财的也不少。\n今天和大家分享的内容基本上都是官方的，回顾会多一点，展望不多，因为这个月展望完了之后下个月怎么办？有些话对我来讲我倒觉得很简单，本质上原来我们是做 Hedge Fund 出身，所以我们的逻辑框架整体具有极强的延续性，不是说今年去讨论，或者说明年去讨论。\n惯性思维从 2016 年开始，我一直在跟大家强调这个世界已经完全不一样了。当然经历过过去的几年时间，我相信在座各位应该对这番话的理解变得越发深刻。\n2016 年实际上是美国特朗普的第一次大选，我有一个特点，我的特征是如果我觉得什么地方有投资机会，我可能第一时间去一线调研，我不喜欢看 YouTube，我也不喜欢在网上扒。当然你会说，现在 ChatGPT 很强大了，人工智能好像能帮你解决很多问题，但你们有没有想过，可能广泛流传或者广泛传播的很多信息是错的。这一点在 2012 年当时我从日本做完调研回来之后，我的感悟是最深的。\n当然去日本有一个重要的人物，名字叫本森特，很快大家就会非常熟悉他的，目前来讲应该是特朗普政府提名的美国财长。本森特原来是索罗斯基金实际掌控人，因为索大爷已经年龄很大了，去年的时候才刚刚把基金的业务交给他儿子亚历山大，但在这之前，最主要的几场战役本质上来讲都是本森特在主导。\n2012 年当时我从北京去香港约朋友们吃饭的饭局上，当时斯索罗斯基金在香港办公室跟我说，本森特从这儿去了日本。我说 OK。我经常说一句话 “站在巨人的肩膀上看问题。”\n当然你知道，网民们最可怕的地方是巴菲特 “SB”、索罗斯 “SB”，我最 “牛逼”。你要记住，他们的所有行为一定有很大的变化，很多人可能都不知道，巴菲特第一次去是 2011 年，我们正在讲福岛核电站泄漏，核废水污染以后海鲜不能吃的时候，一个 80 多岁的老头顶着核辐射泄漏去日本吃海鲜了，当然他去日本干吗，这其实很关键。\n之后我们跑到日本做完调研回来之后那几年，我陆陆续续跟很多人讲，日本正在发生变化，日本的利率结构都会随之变化的，当然包括日本的证券市场。今年日本股市终于走出这 35 年了，创下了历史性纪录。\n但网上很多人还在说，我从经济数据里好像没看出什么状况来，这就是我们说的 “信息差”，因为有时候你知道人的理解，对社会的理解，对经济的理解带有惯性思维。前几年我经常普及的一点是关于日本的理解，很多人总在想经济增长，有没有一种可能性经济不增长也很爽呢？比如说中国过去三四十年改革开放之后我们习惯的就是经济要增长，经济不增长我们就很难过，你有没有想过一种不增长还会把蛋糕吃多的方法呢？答案是分配，你怎么老想着分工、努力、工作、干活儿、挣钱、增长，有没有另外一种可能性是进行再分配？\n你对日本的理解为什么要增长？用我的话说在过去 30 年的时间里保持着这块蛋糕没有变，但现在远端利率抬起来的根本原因是因为年轻人可以吃多了，年轻人为什么可以吃多了？你们知道 2012 年日本的死亡数据是什么吗？你有注意过他的人口结构变化吗？到了今天为止，你突然之间发现日本现在招聘怎么会是应聘的在下面坐着，招聘的在上面站着？放心，中国现在不是招聘的问题，是 HR 砍人的问题，这种变化的根因到底来自于什么？其实很多人只是惯性思维，你不一定能看懂世界。\n过去 40 年已经发生翻天覆地的变化了，从 2016 年开始，中国也不再是过去 40 年的中国，美国也不再是过去 40 年的美国，日本也不再是过去 40 年的日本，东南亚也不再是过去 40 年的东南亚，你资本运转的逻辑框架都在发生着巨变，而这种时刻下，如果你保持着过去的思维，你并不能理解我在讲什么。\n我只能说，大家一切看缘分，我不需要完全说 “付总在胡说，我并不认同”，无所谓的，你能听懂你就听懂，你能早理解你就早理解，早理解你就能顺着这条线 Get 到 2016 年之后世界发生的巨变。\n最新的美国大选，特朗普重新上来，但这次上来跟 2016 年又不一样了，因为他比 2016 年变的更加右翼化了，2016 年大的政治转变本质上就是逆全球化和右翼化。2016 年我把我自己的书稿整理过一版，当年也没空没时间把这个东西出版，去年因为我们家孩子回来以后做了传媒公司，原则上来讲我就把书稿送给他作为传媒公司的一部分出版业务去做，这就是大家后来见到的《见证逆潮》。但这本书不完整，全文将近 70 万字，你们拿到手的只有 50 万字，中间差不多有 20 万字被删减掉了，这 20 万字其实非常关键，涉及到我们对世界大类资产顶层逻辑的核心框架，金字塔究竟是什么？底层是我们的所有资产和市场，市场其实是在框架中最底层的，大家天天想问的房价的上涨、股票价格，这实际上是金字塔中最底层的。\n稍微往上一点有人说宏观经济很重要，尤其是中国 2008 年次贷危机结束之后，中国的投资人开始发生巨变，2008 年金融危机之前，中国大部分投资人讲的是 “擒龙大法”，如何抓涨停。但 2008 年的次贷危机，全球的冲击使得很多从事金融交易、资产交易的人开始意识到，原来全球金融市场是这样的，是联动的。自那一刻起，真正意义上的金融才开始在中国慢慢生根发芽。\n稍微有人开始意识到宏观经济的重要性，当然像现在证监会的首经团队中，36 个首经里，我一直说我是那个最不正经的，因为我又不是搞学术的，我也不是搞政府出身的，我是市场一线的，我们对很多问题的理解是完全不同的。\n前两天的时候，在 Fox News 上，本森特和几个诺贝尔经济学家在那儿争吵关于关税作用的时候，你就突然间发现，一个站在市场角度上的人理解关税作为一个手段到底起到什么样的作用，和那帮老学究们去讲的，甚至跟在座各位在新闻联播上看到的关税描述 “美帝国主义打关税，使得老百姓生活在水深火热中”，你会发现好像你聪明点的话就知道好多东西并不对，这就是差异性。这次特朗普组成的第一是实权派，第二是通杀了，可以理解右翼化已经完全没有牵制了，第三上来的全是实干派。你猜后面的结果是什么？这场仗可不好打，比 2016 年那一届还难拿。\n再往上是什么呢？有人说终于讲到了政治，没错，再往上是政治，民主党、共和党、全球政治的变动。但再往上的顶层，金字塔的最核心是什么东西？实际上是意识形态。\n我教很多研究员说你们在研究世界经济的时候别盲目地做简单的对比，我估计很多研究报告都会犯这样的错误，动不动就做对比，和 70 年代、80 年代做对比，这种对比纯粹写报告凑字数的，换成我的角度，我都不会看完直接撕了就扔垃圾桶了，我其实挺心疼这些券商研究员的，为什么呢？是个事儿就得写个报告，写个报告就得好几万字，好辛苦，结果还没人看。\n顶层断代，也就是大家经常讲的周期性的断代到底是什么？你记住一点，顶层的断代是意识形态，社会政治的发展本质上是群体性意识形态的周期，也就是大家学过的思想政治课中的 “左” 和 “右”，左倾右倾、左派右派、左翼右翼、集体个体，这些东西的变动才是世界经济周期的最大变动。\n当前是什么？大领导讲的那句话很对，百年之未有大变局（百年未有之大变局），基本上就是 1929 年大萧条到二战后完整一个周期的结束。全球从二战的极端右翼，慢慢发展到中右，再偏向中左，再到差不多这 20 年左右的极端左翼化，最终导致重新开始右翼，这个世界很有意思，没有任何方向是绝对正确的。\n我一直告诫大家，你们不要在网上争吵，我站在左边，你站在右边，PK，非得讨论出谁最牛逼，谁最正确，没有。就好像你想找个女朋友，又漂亮，腿又长，胸又大，腰又细，还有钱，还特别爱你，你想多了，挑一样就行了，完美主义哪儿有？最终的结果就是在运动的过程中对政治造成影响，进而对经济造成影响，进而对金融市场造成影响，一定记住金字塔的逻辑。\n大部分时间我们不用 Care 顶层，因为在过去百年，顶层的方向是固定的，就是从极端右翼不断向左翼在运动，所以顶层方向不变的情况下就会形成下面的一套运转逻辑。\n比如说以美国为代表，你们应该看到 Ray Dalio 关于债务危机的那本书，里面有个利率曲线，二战前我们的利率就是 0，到 80 年代利率达到顶峰，2008 年次贷危机到疫情期间利率再次达到 0。利率的低点到底是什么意思？为什么在过去的百年历史里，利率的低点总是战争的起点？是有原因的，因为利率的本质实际上就是贫富差距，利率越低的时候，贫富差距越大的，利率越高的时候，贫富差距越小的。\n当然，我们每个人都是屁股决定脑袋，比如大家手上拿着一堆金融资产，拿着一堆杠杆，我可以告诉你，你永远高呼的是低利率是对的，就好像大家对于美国的理解一样，永远认为美国在过去的 40 年的逻辑就是不能加息，加息就崩溃，崩溃就降息，利率永远是低的，美元永远是 Carry 的借贷方，但你从来没有想过这个逻辑会变的。\n几年前我跟很多人讲的时候，我说你记住一点，中国从高利率变低利率，海外从低利率变高利率，所谓的几毛档还动不动说付总说了高利率是多少，4-5 都是高利率。低利率是多少？0、1、2 有多大区别吗？没有的，这是关键的点。有人说非得纠，把我的话直接变成了付总说的，中国不会加息，永远降息，美国永远加息不会降息，降一点加一点，加一点降一点，这不很正常吗？比如特朗普上来了，明年有没有另外一种意外性呢？比如说降了 50，降了 25，大概回到 4.75，5 的水平了，突然间又抬回到 5.25 了，这不正常吗？4 和 5 的纠结不重要，重要的是他不会再回到 0、1、2 了，这是很关键的。\n对于劳动力来讲，利率是很关键的，如果利率的抬升来自于劳动收入的增长，这是好事情。你想想中国，你把时间拨回到 20 年前，利率高不高？那时候你难受吗？不难受。现在利率低不低？低，你难受吗？你难受。为什么？所以你要知道是通过劳动获得收入还是通过资本杠杆获得收入的，你对利率的感觉完全是反的。\n但是整体社会去讨论贫富的时候，贫富主要讨论来自于劳动价值，简单讲，天天外面送外卖跑滴滴的，他们就是失去的一代，在过去的二三十年里，靠劳动力的就是被淘汰的一代，没办法，这是社会发展的必然结果。但是当这种矛盾压力大了，就会转化成社会矛盾，甚至可以通过选票转化成对政治的影响，对意识形态的影响。所以贫富到极端的时候一定会进行修正，无论是极左的贫富还是极右的贫富，都会最终产生矛盾，这就是社会运转的规律。\n过去百年发生的这一轮大周期就是完整的周期，到 2016 年表面上看叫中美贸易战，表面上看是中美两个大国之间所谓的对抗和博弈，其实是全球各个国家内部的矛盾展示，对内是内部的分配，对外是外部的分配。在这个背景下，战争的风险将加大。\n前两天，我们也看到了，人类历史上第一次使用了洲际弹道导弹，无非就是前面没挂核弹头而已，仅此。你觉得这个东西离你还很远吗？我们这一代可以说是幸福的一代，但我们这一代也将经历不常见的百年之未有大变局了。\n很多人在思考这个世界的时候，真的不要以为我们现在还能回到过去，回不去了，那个全世界包容融合的，不断左翼化推进的，全球化不断推进的路径，这个时代彻底在 2016 年已经开始结束了。\n2016 年很多人判断是错误的，总觉得 2016 年只是一场贸易战，那时候我从华盛顿调研两周回来以后，我跟很多人讲，不是贸易战，不是说哪个党派，民主党、共和党上来对中国就会温和的，不会的，两党的共识，他两者之间只存在着我比你左一点，我比你右一点，但咱俩都是往右的。美国政治的变化核心在于不管民主党和共和党，对中国的压力都是一样的，只不过是他俩谁压力多一点谁压力少一点，谁在外交上压力多一点，谁在经济上压力多一点，仅此而已。\n对中国来讲现在也麻烦，在过去的 80 年代、90 年代，西方在不断包容融合右翼化，同时当时的中国也在不断地往右走，当然此处不是指的中国的右倾。注意西方右翼概念和中国完全反的，你们不要觉得是错误的，如果你觉得错误的，你先了解了解什么是左派右派、左倾右倾、左翼右翼。如果你不能理解这个东西，你肯定对左和右在中国和西方的框架里完全是颠倒的。\n中国也是朝着包容、融合的，所以我们才有了非常好的入市、WTO、改革开放等一系列的操作。我经常说家庭中女生是天生右翼，右翼有一个典型特征，右翼可以叫民粹，可以叫国家主义，可以叫爱国主义，极端右翼可以叫纳粹。但右翼的特征很明显，“我没错，都是你的错”，这就是右翼。\n家庭中女同志天生带有，当然我不是歧视各位女士，这是你们 DNA 里带的，两个 X 里带的，如果家庭中男生是左翼，家庭是幸福的，什么意思呢？“老婆，没事儿没事儿，都是我的错”，男生是个左翼，家庭很好，左 + 右。\n如果男女都是左翼，这简直是幸福无比了，男生回家了，女生把拖鞋一放说 “老婆你打会儿游戏，我正做饭呢，一会儿做好了叫你洗手吃饭”，这个男同志真的去打游戏了，吃完饭了说 “你歇一会儿，看会儿剧，我来把碗洗了。” 你可千万别当个大直男，锅一甩又去玩儿了，不行，时间长了，她会右翼化的。\n此时你也表现出左翼特征，你家庭就是融合的。家里如果两个右翼就完蛋了，都是你的错我没错，凭什么说是我的错？就是你的错，就是你做错了。直男碰上女生，一般来讲没啥好组合，两个右翼就是战争，打架到离婚。\n不要认为这是在讨论家庭、婚姻，同样在讨论国家，同样在讨论全球。当国家和国家之间的组合出现统统左翼化的时候，就是包容、融合、全球化共同增长的俱佳的历史环境，当全是右翼化的时候，就是战争。\n我们现在的大麻烦在哪儿？就在这儿。全世界在过去 5、6 年时间里已经陆陆续续都在右翼化了，右翼化的特征，政治的重要性已经体现出来了，选票回归传统的特征已经体现出来了，反移民的特征已经体现出来了。\n我之前说过，这两年全球著名的交易就是 “多美国，空加拿大”，原因就是加拿大的小土豆放了那么多印度裔进来，就完蛋了，加拿大的核心矛盾是什么？经济增长创造了五个蛋糕，原本加拿大的国民可以一人吃一个，现在放了 10 个阿 X 进来，加拿大问题是分配，当分配不够的时候，一定会趋于保守，一定会趋于右翼化，一定会趋于反移民。\n各国都一样，70 年代 80 年代的时候，英国那时候有过排华，现在又开始反穆斯林了，这正常。世界的动荡不是简简单单表现在单纯的资产上，前两天英国又出台了新的政策，你只要非英国国民的，原则上来讲要交遗产税的，英国政府也要收你的遗产税。我之前跟很多富人说，别天天琢磨避税了，包容融合的时候藏点私房钱是没事儿的，当都右翼化的时候，你再藏私房钱你就完蛋了，现在全世界的大麻烦是什么？找个税率低的地方该缴的缴。当年特朗普上来的时候 20% 只要你愿意回流美国，全部合法化，你看有多少资本往回回流？所以你们知道左翼和右翼大概的框架和特征，这才是我那本书里的真正精髓，但被删掉了。\n你把它理解了，你对应的穿透到经济上，穿透到利率上，穿透到资产上，你会门清儿的，这就是大类资产的精髓，真正的精髓。你要问这东西谁创造的，索罗斯那批人，本森特那批人，整体框架大家都是一样的。\n我到底在讲什么？其实我就是在讲回顾，因为从那一刻开始，几个问题就在陆陆续续暴露。美国在进行重构，特朗普上来以后方向继续重构，这里面其实就涉及到民主党为什么是错的，民主党的很多政策为什么是极端左翼，左翼政策不一定是对的，右翼为什么会使得美国进入到增长通胀利率的环境。\n包括有些华人带有意识形态，我只能说一句话，我们作为全球投资人，最佳的选择是没有任何意识形态，对我来讲，我非常清楚左有左的问题，右有右的问题，左有左的好处，右有右的好处，我不会站在任何一侧。我的答案是全世界选择往左走，我就知道我的交易路径是什么，全世界选择往右走，我也同样知道我的交易路径是什么，但我绝对不会站队说谁是绝对正确的，否则的话就会压错宝。世界有时候不一定按照我们的意识走，美国的这次大选也是典型的结果，其实我也没想到，美国右翼化的速度会这么快，推进速度会如此迅速。本来想的是民主党还能够撑一撑，但现在来看基本上是完败的。\n对于中国来讲，当前我们面临的问题不仅仅是外患的问题，还包括了内忧。综合在一起，会有一个非常奇特的答案，之前很多人问我中国到底和日本一不一样？网上这句话炒的纷纷扬扬的，有人说中国就是会走日本的老路，有人说中国不会走日本的老路，你要问我正确的答案，我会告诉你这个问题没有任何意义，为什么？太泛了，如果拆的细一点我能回答你。比如你要问中国的居民部门和日本的居民部门一不一样？我的答案是一样；中国的企业部门跟当年日本的企业部门一样不一样？我的答案是不一样；中国的政府部门和当年日本的政府部门一不一样？我的答案是不一样；中国的金融机构跟当年日本的金融机构不一样？不一样；中国当前面临的国际环境和当时 90 年日本面临的国际环境一不一样？不一样。\n你说最后的答案是什么？如果站在纯居民角度来讲，我可以告诉你 99.99% 可以复刻，但如果站在大的国际环境上来讲，可能得到的是完全不同于日本的最终答案。用我的话说，你是说一样还是不一样呢？没有意义。\n所以我大部分时间给你们分拆的是日本居民部门和中国居民部门的比对。而日本的企业部门、金融部门、发展模型我也给大家分享过，去年你们应该都知道了，巴菲特买三井、三菱、丸红、伊藤忠商社，大笔发行日元债券购入到日本的三井、三菱、丸红、伊藤忠这些资产中，他到底在干吗？\n那时候第一财经找我说付总你去讲讲巴菲特为什么买，我发现很多评论人员单纯在讲三井、三菱、丸红、伊藤忠资产怎么样，稍微聪明点的会讲到当年的商社们是日本的海外资产，是日本 Carry trade 套息交易的主要收入端。再聪明一点的会讲到巴菲特在参与日本过去 40 年存量财富的再分配。\n我可能明年把我们家小儿子送到日本去，我跟他讲的很清楚，我不需要你去学习人工智能、AI，为啥呢？你好像没那么聪明，也不是 IT 技术男，你把日语学好，能考上应庆就不错了，那里面都是一些日本传统贵族的姑娘，你娶一个就行了，最好她们家都是 80 岁 90 岁的，你就躺赢就行，等她们家 80 岁 90 岁的明后年一挂，房是你的，股权是你的，土地是你的，财富是你的，存款是你的，咱们就参与日本存量 40 年财富再分配。巴菲特是用钱去参与，我们用人参与，本质上都一样，你买股票，我把儿子嫁过去，这都是参与财富存量分配。\n你们要明白日本的核心究竟是什么？日本的核心是参与分配，而不是参与增长。很多人不太理解，因为他在国内没参与过分配，永远都是增长处在哪个环节，我距离权力近一点，资源近一点，资本近一点，我就多吃点，卖劳动力的就少吃点。当经济增长增速不够的时候，最底层就没饭吃了。经济增长 5，可能各个阶层的体感是完全不同的，所以网上会有些人说经济数据造假，真的造假了吗？也许没有。5 代表的是整体的蛋糕，而你的体感仅仅代表你的阶层。\n在过去几年中国经济的调研中，我们到底做对了什么？\n第一，在 2020 年疫情后，那时候长白山论坛我跟大家讲的很清楚，我说的非常赤裸裸，中国居民资产负债表出现问题，那时候券商们都很 Happy，因为他们永远需要 Happy，只能做多。但对于我们做 Hedge Fund 出身的来讲，我可不能这么做，我这么做我就完蛋了，我的钱在里头。10 月 8 日之后，有人在里头吗？千万别自己麻醉自己，那都扯淡。网上一般来讲，拿所谓的这种东西蒙蒙别人可以，你自己信了就完蛋了，就跟当时 “6000 点不是梦，1 万点刚起步”，记住那话是说给散户听的，你信了那你就完了。核心是什么？从我们的角度非常明确地大家，大家的预期很高，但现实很残酷。\n那两年跟各家公募基金每个季度做交流的时候，他们没法去理解现在的经济情况，比如说那时候我跟他们讲网约车司机、外卖，那两年我大量的调研样本参数是底层。经济增长消费扩张升级的时候，调研样本是富人先进五星级酒店，富人先买超跑，富人先吃海鲜，然后你的样本参数是下沉的，到最后是老百姓吃上海鲜，老百姓开上汽车，老百姓进五星级酒店。\n但是当经济收缩的时候，倒过来的，第一步先收缩的是底层。我前几年我说每年现在新增几千万的网约车司机，你们都没有想想人从哪儿来的吗？有人说了，农村劳动力进城，我说都啥年代了，还农村劳动力进城，这又不是你当年搞大规模基建城镇化建设的时候缺农民工，把农村劳动力大规模转移过来。现在的农村你去看看，哪儿还有劳动力，除了老弱病残幼以外，还有劳动力吗？你就没想想这两年突然激增的两千万的网约车司机这些人从哪儿来的？答案很简单，中产阶级的陨落。只不过是你的阶层不一样，你看的问题不一样。\n很多人的调研很有问题的，很多人说美国通胀导致美国居民部门水深火热，我问他为什么？他说你看我打电话问了我在美国的朋友，他们都很惨。我说那你美国朋友的样本是个什么状态？他一描述，我说那当然惨了，他们以前爽的时候是老公在中国挣着通胀的钱，老婆在那边花着通缩的钱，享受着社会福利保障体系，还不交税。现在倒过来变成了老公在国内挣不着钱了，海外人家上门给你弄个草皮清理一下要多收你 50 美金一小时，你的钱没增长，花的钱多了，你当然难受。我要是那个铲草皮的，我会告诉你那点通胀算个屁，5 块钱的三明治涨到 7.5 元，翻了 50%，对我来讲不重要，重要的是我从你们家弄个草皮，挣 50 多一个小时，劳动价值提升了。从事劳动的人就很舒服，从事单纯支出的人来讲你就难受了。\n你要调研的样本是一样的，前两年的样本收缩的是时候是底层先吃苦，但对宏观经济数据影响不大，你们记住一点。\n我就说网约车司机，如果你在广州做调研，他们的特征就是有钱没钱，今天都吃龙江猪脚饭。但注意，北京北四环的网约车司机吃的中午盒饭到多少钱吗？15 块钱送瓶水，还带锅包肉，猪肉炖粉条子，耙子肉，嘎嘎香。但你记住一点，千万别问肉多少年，问你就吃不下了，因为基本上都是 80 年陈酿拉菲，一定是冻肉，一定是冻了 20 年、10 年以上的肉，不然怎么那么便宜。所以你们也不要瞧不起预制菜，我觉得预制菜很好，没有预制菜老百姓日子更苦，有预制菜老百姓好一点，为啥？12 块钱能吃饱，还能吃上肉，吃上足够的蛋白质。\n你就记住一点，当你都吃 12 块钱了，你还注意肉多少年吗？现在统计中国在讲需求的时候很有意思，我从来不会用一个数字，从来不会用中国的 CPI，中国的 CPI 一直有一个大的问题，当年宏观经济数据设立的时候中国老百姓第一目标是解决吃穿，解决温饱，所以对我们来讲，物价中的菜价、猪肉价格、粮食价格、油价波动，我们看的比天都大。\n那时候一般来讲，领导们下去做慰问的时候，第一件事儿都是去家里掀锅，动作都很标准，打开锅看看你吃啥，这个动作其实就是因为当年我们的重要问题是解决老百姓的吃穿住行，所以我第一件事情就关注你吃的情况。但改革开放下来以后，到现在为止，吃如果都成问题，那就是大问题了。\n为什么不用数据？因为数据中这部分的波动很大，这部分的波动已经跟需求没关系了。比如说城市里洪涝，那蔬菜价格那几天就会暴涨，那种变动其实影响已经不重要了。我们现在讲需求，比如中国经济从 2019 年获得大问题，非常麻烦，你们不要觉得现在的经济问题是现在，是 2019 年就开始了，在今年是恶化的，所以今年的情况你们都不知道有多严峻，数据里已经告诉你，非常严峻，而在调研的时候更严峻。\n8、9 月份的时候，必须转向，那时候很多人不理解，因为过去的一年大家都养成了一种习惯，这也是右翼化的特征，右翼化的特征就是我没错都是你的错，我不许你说我错。你想想，家里的老婆你敢说她错吗？到最后男生就是出门抽烟，不吭。\n过去几年我们的右翼特征当中体现出来的，大家都有一种习惯，国内经济不许说不行，谁说不行谁就是叛徒，谁说不行谁就是不爱国，谁说不行就网上攻击他。问题是诞生了另外一种生意，什么生意？你们懂得，你只要说这东西遥遥领先，8000 块钱的东西就能卖 18000。\n在我的角度看很简单，这是社会的整体意识形态变动的核心，但是真正可怕的是如果大家都不去讲，到了关键的时间点上，会使得所有的信息反馈形成谬论性错误，最后你们会发现，连决策层都做出错误判断，那就完蛋了。\n到最后谁是那个误国误民的，历史会有正确评价。最上头在关键的时刻该做调研，该让你发声，还是要发声的。8、9 月份到底中国发生了什么事情？大部分人在当时并不了解，8 月 27 日开始，你们关注一下所有的金融峰会和论坛上，全部让你敞开了讲中国经济的核心问题。\n当然只是说我当时在大湾区论坛上讲话时间不够长，大家传播更为广泛，但不是说我胆大讲。当时下午讲完之后，晚上就有朋友发 “付总，这能讲吗？” 我说 “如果能讲，你要想想为啥？”24 小时都不到，大概 12 小时左右，第二天早上易纲同志在上海的外滩金融论坛上马上跟你讲当前中国经济的核心问题，通缩的风险，以及经济有效需求不足，所有人从 8 月份到 9 月份，用的词都是一模一样的，中国经济当前核心问题有效需求不足。其实我想说，有效需求从 2019 年开始就在下降了，而此次的有效需求非常麻烦，可以说是我们改革开放之后的百年之未有大变局。\n我在 9 月初的时候，提的政策建议里，我都没有用 “解决”，我用的是 “对冲”。9 月 11 日我怕大家对这个事儿理解不深刻，当时演讲的原题目是要注意有效需求问题，赶快出政策对冲，9 月 11 日我把东西又给你写出来，再讲了一遍。\n但那时候会发现社会上的整体风气依旧沉浸在 “不许说我们不行，我们挺好的”。到现在为止，现实情况是什么？你觉得资本市场起来这一下，猛冲这一下跟经济好有关系吗？恰恰出现的情况是经济差才来了这么一下，而不是经济好。现在出的所有政策有没有达到目标呢？有一讲一，没有。能不能达到对冲的目标呢？我觉得对冲一点点，解决肯定不可能，因为你如果仔细地了解这次有效需求的复杂性，意思是告诉你这事儿挺难，因为里面掺杂了中短长期的因素。其实在疫情后，我们当时就做出中国国内经济的预期很高但现实很差的根因也来自于有效需求背后的矛盾。\n有谁记得前两年我在各个公开演讲中，一直跟你强调国内经济的核心变量是什么吗？我老跟你们讲到人口的问题，老跟你讲到老龄化的问题，几年前跟你们讲到现在为止，通过金融市场、资本市场、银行背后的数据大概都能看明白到底发生了什么，老龄化对于中国、韩国、日本都不是好事儿。\n西方经济研究中研究移民政策，中国、韩国、日本研究人口出生，因为这几个国家的历史决定了他不会有大规模移民的。你别动不动就来一句，老龄化了人口出生少了，北欧怎么怎么样，好家伙，你这一刀切出去，你玩过《文明》吗？马上《文明》就要上新了，大家可以 Steam 上下载玩一玩，开局资源要素是不一样的，最后你组成的文明和帝国发展战略也是不同的，别动不动做瞎对比，没用的，这就是中国经济的大问题。\n这是所有这次有效需求的组合，包括下面我们对的政策建议，不用看了，意义不大。\n核心的就用这两张图够了，很简单。\n第一，我不会用 CPI 这个数字就是因为里面含了实际上已经跟现在有效需求没太大关系的。用的什么呢？把高清大图放大到 2007 年之后，我们用的是扣除食品和能源以后的通胀。简单讲，我要关心的是老百姓吃饱饭以后没事儿干的价格，你没事儿干的价格高，就说明你的有需求好，你没事儿干的价格低，就说明你有效需求差，就这么简单。至于吃饭这件事情，非常容易解决，龙江猪脚饭。\n说实话，你们点 20 块钱 30 块钱的外卖，成本价格就 4 块钱，4 块钱你都吃的嘎嘎香，可以想想，食品工业发展到现在为止，防腐剂、添加剂一加，成本是很低的。当然了，做不到既要又要还要，既便宜，又好吃，还健康，还得是厨子现割肉现做，你想多了，你要想吃现割肉现做，你掏 50，我去你家做，你就掏 5 块，那就是预制菜。你们要明白，这是解决吃喝拉撒很重要的因素。有的时候，左右两边不可共同都有，健康和便宜不可能同时存在的，所以健康很贵的。\n大家先看放大版的数字，2019 年是整个平台的顶峰期，2019 年后的典型特征是总需求曲线一直在降。10 月份的数字是负的，没有疫情，没有 2008 年金融危机的外需崩塌，从 2002—2024 年，长达 22 年的时间里，在没有任何重大风险的情况下，中国第一次出现了有效需求为负。负数啥意思？非常简单，中产阶级节衣缩食，这个宏观数据就告诉你这个答案。\n刚才我讲了，底层老百姓是一点点往上反馈的，不会很快地作用到宏观经济数据里，所以你们在疫情后看到的这个数字大平台还没有快速往下掉，但当时的底层（网约车司机、送外卖）其实一点点在痛苦，但那时候去金融机构做路演，他们都没有这种感觉。今年所有金融机构都觉得很痛苦的原因是啥？因为他们被裁员了，他们被降本增效了，他们被要求奖金退回了，板子打到了他们的阶层之后，他们开始感受到了痛苦。你知道这代表什么吗？今年经济为什么从 3 月份之后这个数字一路掉下来，答案非常简单，今年的大麻烦是中产阶级陨落。\n别说今年了，这两年底层慢慢 “拼多多”，现在应该是中产阶级开始 “拼多多”，今年最好的样本参数调研应该是隔壁的杭州，其实上海也可以做调研，差不多。3 月份降本裁员裁老张，6 月份降本裁员裁老李，我就问你老王怎么办？回家跟媳妇开个香槟庆祝一下，老张、老李被裁了，我没被裁，是这样吗？现实的情况是回家赶紧跟老婆算账，国际学校多少钱，孩子多少钱，面膜多少钱，健身房多少钱，该花的不该花的多少钱，房贷欠了多少钱，一算账列一个数字，假设被裁员怎么办？算完跟老婆说，你的面膜 SPA 中心别去了，李佳琦的直播间拍一个糊脸上差不多。然后你开始节衣缩食收缩，你的收缩是要命的。记住一点，中产阶级的收缩对整个宏观经济是冲击最大的。\n底层真的是今天干个活儿，跑跑，有钱挣没钱挣都得吃个龙江猪脚饭，反正也不贵。多挣钱了，跑个单王，跟老板说 “龙江猪脚饭加个蛋”，今天各位在外卖平台上给打赏 10 块钱就是龙江猪脚饭加个蛋来个腿。\n我没有太多投资的群，但我会潜伏在全国外卖小哥、网约车司机的群里，因为他们是我广大调研阶层的样本参数。我甚至还有个样本参数是全国最大的美容连锁店的老板，我经常拿他当调研样本，为啥？他背后的 2000 多家店，以及店后面的那些女人们，那就是标准的消费调研样本参数，他的生意好经济就好，他的生意差经济就差。杭州今年上半年应该有 500 家美容店要转让，你们有谁要的我给你们搭个线。你们会要吗？你要知道，不管是正宫娘娘还是非正宫娘娘，都没钱了，她背后的男人们都没钱了。\n你说消费降级吗？其实不仅仅是降级，你们一定要记住，这个大周期的结束很可怕的，因为这是大部分中国投资人里第一次经历这样的周期。\n中国证券市场反应非常精准，不要再看上证综指，那个意义不大的，我们经常讲有结构性行情，一点错没有，结果里对经济、政策的反应非常准确，不是不准确，是非常准确。所以说你真正在这几年对宏观经济的理解，就是告诉你一句话，没有增量，就是结构，对结构怎么把握？这里的结构可不是 40 年前的结构。\n前两天我跟一家公司说了一句话，黑色线是 PPI，相信在座各位都明白，PPI 是什么呢？简单讲就是企业利润，PPI 为负，大家就是在拼命地价格战、竞争，我卷你，你卷我，上游卷完卷下游，下游卷完卷客户，卷到最后就卷到谁能活着，这就是 PPI 为负的答案。\n中国这二十多年来，从 2002 年开始，我们的经济从来没有遇到大问题的根因非常简单，红色线永远存在，上面的红色线存在。\n中国经济的任何供给问题都是有需求在的，有内部需求有外部需求，外部需求是全球化对我们的支撑，内部需求是什么？房地产大佬现在好像在里头踩缝纫机，他当年曾经说过一句经典的话，“什么房地产、供应、需求、土地开发、城镇化，扯淡，就一句话，我们有庞大的 80 后”。我觉得他说的非常诚恳，因为需求内需到底是啥？本质上就是人口收入的债务函数、杠杆函数。\n所以你就知道，中国内需庞大的一代是谁，就是这批 80 后。是 “文革” 之后人口基数最大的那批，可以花 3 个钱的，可以花过去时，上一代人给你留下的 6 个口袋。可以花当下时，你的企业老板给你的收入函数。可以花未来时，金融机构给你们的杠杆。你们是花三代的钱，一代的人口高峰，那就是中国内需的所有底牌。中国经济的任何问题都可以由这部分人买单，所有债务问题、经济问题均由这代人买，那就不会有真正意义上的经济的风险。\n比如说 2008 年，现在也会发现，有些政策跟 2008 年很像，房地产放开、限购放开、购置税减免、消费补贴、刺激消费，但你们都会发现，还能产生 2008 年效果吗？能回去吗？我可以明确告诉你，回不去的。\n你们记住一点，那句忽悠了老百姓这几年的一句话叫 “做内债不是债”，我不知道谁让这句话传出来的，很多人在那儿喊 “内债不是债”，这是我们家祖传对联之一，下句是什么？“内债不是债，只要人还在” 横批 “万税万税万万税”。任何国家的本币债务就是对自己本国居民的征税权，税等于什么呢？税基 × 税率，税基等于人口和收入函数，一叠加就是人口收入 × 税率，这就是税和债务。\n中国现在的化债化什么？要么增加税率，要么增加人口，要么增加收入，人口不增，收入不增，答案只有一个，增税率。那你猜你的遗产税跑得了吗？你猜你的房产税跑得了吗？想啥呢，年轻人不生，咱收不着他们了，那就收老年人的，一样的。你要知道，债务不会像你想的 “内债不是债”，你想多了，本质是税源。\n政府债务驱动的投资行为只要能收到税，所有投资行为理论上都是合理的，2008 年两个经济学家在那儿讨论高铁到底应不应该修，当时他们俩的讨论中我站后者，当时应该修，因为修不修就看能不能征到税，但他俩的计算方式是不一样的。其中一个是按照标准的市场经济去计算，市场经济计算税就是这个项目能不能挣钱，杭州到上海这条高铁修完了，成本核算完，二等票需要 150 元，老百姓能不能承担得起，能承担得起能运营得起就会项目回本。所以他经常挂在嘴边的口号就是如果项目不能挣钱，那原则上高铁是浪费的，就是纯纯的债。他这句话在当年是不对的，因为中国非常奇特，中国的税分为间接和直接的，你刚才所有的成本核算是直接税，但中国的特色是直接税上减免，增收间接税。这就给中国老百姓一种很好的感觉，我们的高铁又快又好还便宜，成本 150 的票价，我们只需要 60 就能坐了，老百姓觉得生活便利。\n你咋那么天真和可爱呢？我就问你，剩下的 65 块钱谁掏？然后就来一句，内债不是债，这钱国家掏。咋可能呢？这钱谁掏？你们知道为什么所有基础设施一定跟着城镇化走吗？一定建在新城吗？一定高铁内新城的土地很便宜，圈完了之后，三通一平做完了，十字格一画，土地一卖，盖上房子，80 后 1 万块钱 2 万块钱买房子，什么意思？这叫间接税，我们是间接收税补直接。\n核心是什么？核心就是只要能收上间接税，所有的投资政府基建全能做，间接税收不下来，项目就完蛋了。你们猜中国以后还会有大规模基建吗？我可以明确告诉你不会有了，只有修修补补，因为最大的税源税基没了，这就是 2015、2016 年中国经济里暴露出来的最大问题。\n知道是什么吗？年轻人，你们咋不生了呢？你不生我咋办？你不生税咋办？当时的人口拐点，大规模老龄化开启，年轻人不再生育，这将是巨大的麻烦，因为我们所有债务的兜底没了，谁给我们兜？此时很简单，去海外收税，所以大家就明白，我们要走国际化，国际化的本质就是向海外征税。政府、企业、金融均向居民征税，记住一点，企业征税就是所谓的商品通胀，1 块钱的东西卖 2 块钱，就是向居民部门收 1 块钱的税，但国内 PPI 持续为负，代表着企业征不上来税，企业恶性循环，企业债务严峻。PPI 为正，代表着企业可以通过通胀、价格转移的方式向居民转移，也就是向你征税。\n只要居民部门在，通过供给端的调整，都会带来周期性的 PPI 恢复，简单讲，供给侧改革一搞，房地产一推，老百姓一买单，企业的债务就不是债务了。所有政府的债务、企业部门的债务、金融部门的债务，只要居民部门能扛得动，都不是债。\n你们知道现在的大问题是什么吗？我现在说了某一个行业，你知道有些人犯的巨大错误是什么？到现在为止跟我讲，付总 PPI 为负很正常，市场化竞争，优胜劣汰，弱者淘汰，强者赢家通吃。我说现在不是的，现在会出现一种情况，都得死。他没懂，在这个图里你们看得懂吗？\n一是，看 2011—2015 年周期里，2008 年 4 万亿基建，加杠杆，把有效需求扩的非常好，那时候政策一出，绝对管用。现在很多官员犯的错误是觉得老百姓还是曾经的老百姓，还用同样的政策。当年的政策是我准备 50 万孝敬丈母娘准备买房子，结果你跟我说首付只需要 40 万，那你知道年轻人怎么做吗？40 万首付，10 万装修，还是花 50 万。现在的情况是什么吗？告诉他不需要 50 万，只需要 499，年轻人说我不缺那 10 万，我现在缺那 40 万。\n杠杆到头，消费是完全两个概念，用加杠杆的方式刺激经济，这个手段将失效，我现在唯一投票的全部是降杠杆刺激经济政策，比如说降低存量房贷利率，这是扎扎实实的降杠杆，说白了是银行吐出钱来给在座各位每个月可以少还 800、1000。但你还是说降低首付比例，大爷快来，加杠杆哦，我可以告诉你，加不动了，这就是核心。当年产能加上去以后供给过剩，主要是旧产能，出现 36 个月 PPI，企业恶性竞争，破产倒闭，银行压力巨大。我们干了供给侧改革，然后行政性出清一部分产能，其实是转移到新产能上去了，使得供需把需求再一刺激，老百姓买单。\n当年的大问题是这儿是一个妹子，白富美，下面是俩小帅哥，俩帅哥在那儿竞争，优胜劣汰，一个把一个淘汰之后，最终迎娶白富美，因为白富美需要一个帅哥，所以你们俩金正，胜者为王。这句话，充分的市场竞争后胜者为王，假设前提是需求不变，经济的这点活儿放到自媒体、网上真的搞坏了。充分的市场竞争后，胜者为王，赢者通吃的假设前提是需求不变，也就是妹子在，你俩竞争。\n知道现在的数字啥意思吗？红色线没了，0，PPI 如果扣掉疫情期间，持续从 2019 年之后为负，两个小伙子在那儿 PK，目标是胜者为王，最后卷完了，剩下一个，摇头一看，妹子呢？你们等着看吧，这件事情必然是两三年后某些行业必然发生的，会真以为是胜者为王？你的大环境是什么环境？是有效需求面临着中长周期的收缩和调整，这种情况下市场如此恶性竞争和卷是没有赢家的，最后会爆发危机的。我把这话送给某些企业的董事长们。\n跟往年不一样，往年任何过剩的市场竞争，最终都胜者通吃的原因是因为居民部门有效需求永远在，永远能加杠杆，永远能为你的企业产能和利润买单。最后只剩下一条路，你们知道是什么路吗？因为这条红色的线只代表着内需，如果国内的姑娘没了，就要迎娶海外白富美，所以他只剩下一条路，出海。这也是网上很多网友们很开心的，我们就是要出海，我们就是要拿下国际市场。\n现在国际环境是什么样？是不是 20 年前、30 年前全球往左翼包容融合的大环境，能让你出去迎娶白富美。当然日本的三井、三菱、丸红、伊藤忠等等，在 90 年之后就是出海迎娶白富美，问题是我们现在能不能？我相信大家心里都有杆秤，“想不想” 跟在未来的大环境上 “能不能” 将形成激烈的碰撞，如果不能，国内没有有效需求给你怎么办？\n现在所有经济问题是两个都存在，供给过剩也存在，有效需求不足也存在，我们需要解决问题，答案是必须提振内需，内需的核心就是进行再分配。政府和居民之间进行再分配，贫富之间进行再分配，债务和杠杆之间进行再分配，如果不做，那我们就是 35 年日本。日本 35 年周期怎么来的，你们最终知道答案了吧？还不知道，我都把儿子送过去了，你们还不懂再分配是什么意思吗？日本战争后获取所有资源要素（岗位、职务、薪资），战争后的第一代和第二代，到了 2012 年开始死亡，代际分配，老同志们死了，年轻人吃的蛋糕就自然多了，就这么简单了。\n你如果能理解到这个的变动，你就能自然地理解到我在说日本经济的核心到底是什么，是代际分配，不是增长，光增长不分配那就是富着恒富、穷着恒穷。这话翻译到股市上你们知道是什么吗？上市公司不分红没增长的话，答案永远是富着恒富、穷着恒穷。00 后指望着炒股来分 60 后的财产，你想多了，你还不如去萧山当个上门女婿来得更快一点，还不用努力，把自己倒腾的帅帅的，嫁进萧山豪门，财富代际再分配，躺赢，何必要天天炒股累死累活的，心里想着我能干掉 60 后，那都活成精了，你能干成他？换手跑的比你还快，一边喊着 “年轻人快上啊，人生唯一一次机会，此次不 all in 梭哈，未来就没机会了。” 他一边 all in 着，咱们一边换着手撤，让他们站在高高的山冈上。\n市场跟经济是一样的，创造增量的同时也要进行分配，不配没有任何意义。有些事儿都是本质一样的，这就是中国经济当前最大的问题。\n2006 年供给侧改革，我提醒大家一句，有几个错误的观点特别强调一下。为啥说错误的？这观点用我的话说一定咱们要知道，不一定要让老百姓知道。\n举个简单的例子，股票市场创造财富效应，用此来改变国运，这是不是外面经常听到的声音？你想啥呢？房子如果没有收入和租金的回报率和住的功能，那换句话说房子不创造自身价值的情况下，纯换手，依旧答案是富着恒富、穷着恒穷，能创造短期财富效应吗？能，就像 2015、2016 年我跟你们举过的例子，满仓 all in 梭哈，融资杠杆伞形都上，然后你发现股票一个涨停一个涨停，账户里全是钱，出门给老婆买了个包，财富效应。\n然后呢？跌停的时候你知道你后悔买啥吗？你后悔股票没卖掉，放心股票卖不掉的，因为开盘就跌停了。你真正后悔的是，我没给老婆买这包就对了。我经常劝他们，辛苦你给你老婆买了包，因为她至少还剩个包。你要当时没买这个包，你连这个包都不剩了。\n这种换手的游戏只有结果是富着恒富、穷着恒穷，而且后果会越来越差，中国就是典型的这个逻辑。不要把泡沫当成家庭财富去忽悠老百姓，这是扯淡的，背离收入的，背离企业增长和股息分红的，这种东西咱都心知肚明，就是为了来换手的，你把它当成家庭财富配置，会死人的，最后对经济会造成今年这种情况。\n换手的时候你看着消费很爽，比如说我这儿给你举的房子，中国的房子上涨幅度最大的真的不是 2008—2015 年，恰恰是 2015、2016 年股灾之后房价是最猛的，那时候北京我记得最清楚，2009 年炒房的时候，亚运村是 17500，2015 年年终的时候亚运村房价是 25000，2019 年亚运村的房价是 10 万，黑色线是同比上涨，70 个大中型城市同比上涨，同比上涨 + 长时间累计就是房价涨幅最大的时候，所以我们就是 2015、2016 年那一波，房价带来了大家的消费预期和希望，但从这张图上你们可以非常明显地看到消费背离了收入，这种消费就是大家讲的建立在财富效应上的，但此时的财富并不是收入支撑起来的。\n问题就来了，四年前五年前我拍过一些短视频，跟平台合作让我拍些短视频，我当时就讲得很清楚，房子如果纯换手，到底是什么东西？我 200 万买的房子，600 万卖给年轻人，我拿走的就是年轻人未来 40 年青春的当期现金折现。我可以为我的未来 40 年潇洒了，他背上这 40 年的债务，他要还的。如果没有收入的增长，他要硬硬地还 40 年，他就是失去的，我替他多活 40 年了，就这么简单。\n股票价格也一样，咱们交换的叫时间价值，我是大股东，我现在拿走，我现在 Happy，把你套在里面套 10 年，10 年后能不能解套呢？也许解套了，你觉得你开心吗？你丢了 10 年。金融资产交换成本你们一定要注意时间函数，没有时间函数都是扯淡。\n问题就在于，如果收入不增长，纯换，短期内创造的财富效应毕竟等于另外一批人短期内累积的债务。换句话说，我们爽了，他的债务达到一定程度的时候会造成全面的坍塌，整个资产不可能持续的，他买的房子 800 万买的时候，指望 800 万买，1000 万卖给下一个年轻人，结果发现没年轻人了，下一个年轻人接不动 1000 万了，此时他的资产负债表就开始恶化了，消费开始出现断崖式的回归，这就是 2019 年后的结果。2019 年后开始逐层断崖往下走，向着真实的收入回归。\n千万不敢跟老百姓讲把股票、房子当成家庭财富，过去有年轻人的时候，他才是我们的财富，不管通过股票还是通过房子，年轻人就是所有人财富的来源。说实话，中国的房地产涨了差不多 20 年的根本原因是啥？有一讲一，凭良心讲，任何的房子年轻人能买走，我们就拿走财富了，我的房子就是他们的负债，咱们所有人在吃的就一条东西，就是居民部门杠杆率，所有人吃的就是这根红色线。\n有些研究员说，中国现在居民部门杠杆率比海外低，因为他单纯的对比数字。我可以告诉你不低了，你知道原因是什么吗？我们的杠杆背后没有高福利，高福利国家 70%，低福利国家 60%，你跟我说 60% 比 70% 低，你自己实际的杠杆压力到底是多少，你心里没点数吗？你的教育、医疗、养老，上有老下有小，你需要花多少钱你心里没点数吗？你是社会福利 70 年代 80 年代建立起来国家的居民部门杠杆率吗？不是的。从各种现象上去观察，这个杠杆率到头了。\n资本市场很聪明，从 2002 年一直到现在，长达 18、20 年左右的时间，交易中国的消费升级，不管上证综指是 3000 点还是 3500，不重要，消费板块大周期就是中国居民部门 80 后加杠杆这一带。\n从 2019、2020 年开始，我对中国消费的所有教育逻辑就是：一是消费会发生结构性的变化，这种变化实际上是代际的变化；二是消费开始降级。\n那时候我演讲中讲的那句话，咖啡不再是喝完 20 喝 30，喝完 30 喝 40，喝完 40 喝 50，而是开始喝 9.9 买一赠一，年轻人开始周四攒个肯德基优惠券。\n年轻人开始发生消费型变化，比如我们家孩子喝茶，我看他们喝茶马上告诉我老婆，把囤的普洱的茶饼全甩卖。为啥？我们家姑娘怎么喝茶知道吗？去她办公室，红茶绿茶普洱，你说红茶，东方树叶拿出来拧开，连水都不用，倒壶里，卡哇伊的小杯子往那儿一放，往那儿一倒，请。她不会给你拿个饼搓半天，然后再一泡，那是上一代人。\n日本当年经济顶峰期的时候，做日本的清酒和威士忌，结果 1990 年之后真正火起来的是三得利、Jim Beam 嗨棒。年轻人说 1000 块钱的酒，啥酒？我要的就是 10 块钱，口味偏甜，RIO 喝起来微醺，能醉吗？能，行了。我的社交场景已经变了，我不会有请客吃饭坐在那儿了，我的消费场景已经变成俩孩子往那儿一坐，看电竞比赛直播。\n这种年代已经到了，你可千万不要以为没到，你囤的邮票、木头，你记住一点，没得传承的，还囤邮票，我家儿子都不知道邮票长啥样？他倒知道小马宝莉值钱，这就是时代的变化，消费在发生结构性变化及总量上的变化。\n中国的资本市场对经济的反应是完全准确的，你们可以看看整个的板块指数，房地产结束了，居民部门的食品、饮料、消费、零售结束了。新能源汽车到底结没结束，我的答案是你们等着瞧。其实现在只有一个板块在扩张，半导体。\n你们看懂啥意思了吗？银行的对联叫 “只做锦上添花，绝不雪中送炭”，横批 “我家银行”。你要是经营不善，我们家第一个干的事儿是抽贷。“内债不是债，只要税还在”，还有一个秘诀是关于中国特色的经济，海外没有的，我们是非市场经济下的 “J、Q、K”。\n“J” 是什么意思？大爷快来。“Q”，大爷，投点钱吧，把钱圈住。“K” 是出去，KO。中国能够高速经济发展实际上和这只手有密切关系，大家炒股票都知道，经济越差的时候，你炒的是这只手动不动，有人问中国的股市跟经济到底有没有关系，我可以告诉你，两头是反向关系，中间是正向关系。\n两头反向关系就是经济越差，这只手会出动，你会有反向关系，中间一定重新回归到跟经济相关，然后再往那头，过于亢奋了，也是行政关系。举个例子，2015、2016 年当时非常典型，我发了个微博，最后一个月，我说你们谁爱玩谁玩，我们要撤了，拜拜了您。当然好处我没做空中国，我做空了香港，我要是做空中国我就回不来了。\n那时候我跑到江浙沪调研当时的伞形信托场外融资配置，证监会一出政策，我说很简单，你们谁爱玩谁玩，老子撤了，根本原因这只手才是关键，你现在的市场什么 6000 点不是梦，10000 点刚起步，你哪一条支持了？债务杠杆再一撤，游戏就崩了，赶紧跑。你们不觉得这玩意要出事？那也是手，不是经济，中间这一段才是正常经济发展，而中国的指数编制将决定了大部分时间经济反映出来的是结构，不是增量。现在出来个 A500，是想试图让 A500 类似标普那样能反映总量加结构。\nJQK 什么意思呢？中国非常奇特，在投资的过程中，只做 JQ 环节，绝不做 K。JQ 环节是什么呢？行业有没有崛起呢？没有。行业有没有国家主义的意义呢？有。你们一定要记住一点，我们是右翼，右翼的产业政策全是偏向于国家主义的，所以说国家主义干任何事情不是要挣钱，要的是有，你们记住这句话。所以 JQ 的所有目的是为了政绩，是为了有。\n老股民都懂，看新闻联播炒股的逻辑是啥，你告诉我你看新闻联播是炒经济吗？你看新闻联播炒股就是炒的他哪儿没有他想要，你就投。这时候是没有证伪的，而他会倾注所有资源给你，倾注土地、税收、地方引导基金，倾注一切资源，股市也是资源，用来融资的，会把一切资源给你，你是最爽的。而你一旦做到了遥遥领先，他的政治目的达到以后，就会把你甩到市场上进行市场经济的 KO，此时你们就会发现 PPI 的秘密。你们就会发现 PPI 的周期性，PPI 的周期性很简单，你如果把 PPI 里的行业再分一下，生产资料、生活资料，再细拆就会发现周期性和政策的关系。\n啥东西呢？我没有，就会让 PPI 为正，我倾注一切资源和方式可以让你在里头挣到钱，而且不需要竞争。但我一旦达到目的，把你扔到市场经济的时候，你们会迅速发展，如果是正式的市场经济，竞争波动会比较温和的，也就是说稍微一有点钱挣，就有人进来了，就会烫平，周期拉的比较长，需要 30 年才能崛起一个大型企业。\n但在中国不是，中国是 5 年，产业链就要做到全球遥遥领先，在 JQ 的保护期内，大家都可以活，但同样会造成很多 “大家”，一旦保护期一到，扔到市场经济的时候，你们就会发现大家就变成了非自己人，开始 PK、竞争、内卷，PPI 开始转负，就这么简单。然后一轮产业过剩，开始淘汰，政府驱动再引导新的产业。用这种前浪推后浪的方式，推动整个产业各个环节的周期缩短到五年，但是代价就是很多行业会以很快的速度进入到 PPI 为负，而所有能到 PPI 为负的产业，最后能活下来都得感谢有自己的负债端，居民部门能买单，一旦内需不够还这么搞，就会出危机，就是现在这种状态。\n老百姓的投资是说你看新能源渗透率到了多少多少了，老百姓开的越来越多了，怎么股票一直跌呢？这就是他的错误，他没有理解政策到底什么时候投资，成熟的时候是不能投的，因为能放给市场的时候一定不那么挣钱了，不放给市场的时候一定是特别挣钱的。\n当然，这里面还牵扯到一点就是当年供给侧改革，你们可能都没有人会想到供给侧改革跟当年的股灾和楼市是有高度关系的。当年周兴涛（音）在市的时候，2015 年底 2016 年初在上海搞了个会议让我讲供给侧改革，我说供给侧改革很简单，1997 年朱镕基总理翻一下，供给侧改革这个词就来自于那儿。中国这一轮所有的起点是 2002 年，PPI 为正，核心 CPI 为正，有效需求为正，持续到了 2012 年，供给开始过剩，但有效需求可以继续加杠杆，在这儿就是供给矛盾，2009 年供需双落，这就是中国这一轮从 2012 年开始的大周期的末端。\n上一次末端是什么时间呢？改革开放一直到 90 年代末，2000 年初。出门京东上 150 块钱买《朱镕基总理答记者问》，三卷本，里面所有的事儿都发生过，房地产泡沫、金融经济危机，鼓励老百姓要有信心。你知道当年怎么鼓励老百姓有信心吗？“心若在，梦就在，大不了从头再来”，刘欢同志从此从那儿活起来的，那就是当年鼓励你们有信心。\n把年轻人的失业率不能拉那么高，你们知道当年怎么做的吗？大学本科扩招，因为我们的年轻失业率统计上是不统计在校生的。把你都赶到大学里，失业率就能往后延三年。\n今年清北附交本硕的比例是多少吗？1 比 3，5000 本科，15000 硕士，当然，当年那种政策最后直接结果造成的什么？曾经本科很值钱，然后本科不值钱。我大概率觉得以后硕士可能也不咋值钱了，如果三年后经济的问题还不基础，我估计开始鼓励你们读博了，读到 30 岁再开始就业吧。在座家里有孩子的，你孩子不是富二代的，就别卷了，富二代就更不用卷了。用我的话说，想清楚了，后面卷学历没什么太大价值了。\n当年还干过啥？银行风险，四大资产管理公司处理不良，供给侧改革，化债，股票和政府化债。如果你想知道股票市场到底用来干啥的，请品品当年。2002—2004 年，经济已经恢复了，A 股跌到 2004 年的原因是啥？都有，所以你们知道债务到底怎么化吗？答案非常简单，所有的债务记住上下联，“只要人还在，啥债都能化”。只要人不在，这债怎么化？税率。量收不上来，就抓率。以前有人说中国是高税率，是居民部门高税率，企业部门低税率，因为各种退税、补贴给你的是低税率的，大家要懂得，该抓税率的时候要抓税率，不然是不够的。这一段大周期到现在为止进入到末端，这就是当前最麻烦的点以及外围环境。\n海外我就不分析了，因为你倒过去就 OK 了，你把过去的 40 年倒过来就是海外正在慢慢发生变化，产业在回归，贸易关系在重塑。我这两天刚从新加坡回来，新加坡、东南亚、马来西亚、印度尼西亚、越南，开句玩笑话说，2016 年之后真的是受益于你俩人打架，因为他们在走正向反馈和循环，他的正向反馈循环就是我们转移的。\n最后送大家一句话，这张图是全球很重要的，当财政需要扩张，当利率在下降，你们可以想想财政花钱短期内挣不到，国内经济的有效需求不够，储蓄过剩，投资回报率下降，利率下降，在这种背景下，汇率就代表着你的实际回报率以及本币购买力，是减弱的。所以新兴市场一般来讲，如果出现这种状况一是利差会推着汇率贬值；二是政府的债务会推着汇率的贬值，会导致资本流出，会导致你需要加息去应对，但一加息，经济崩，资本进一步流出，这就是新兴市场危机。\n注意，新兴市场危机不单纯是美国加息，这是很多人错误的认知。我可以告诉你，中国以前从来不会崩，因为不管老美加到几，中国的投资回报率都远远高于老美的话，我不会有新兴市场危机的，本质上是对内投资回报率和债务。\n大家老是讲一句，老美加息就会收割别人。我开句玩笑话说，你如果没有借那么多钱，且投资回报率很强，他加息对你没影响。有一讲一，老讲成阴谋论，不是左就是右了，是偏颇的，我们站在中立的角度看，左有左的问题，右有右的问题，两边都有。\n全世界在低利率和政府财政扩张情况下能保证汇率稳定的只有欧美、日本，他采用的模式很简单，自己家里不能挣钱，又要保证自己的信用和币值的稳定，答案就是我可以作为资本方到海外挣钱，这也是全球化必然在当年会发生的路径，拿海外的 carry trading 套利资产作为背书，支撑汇率。\n我可不认为《广场协议》把日本打败了，你去日本访问，他们会告诉你日本当年的官员都是偏国家主义的右翼，因为从二战后过来的，他们在写自己所有回忆录的时候都说，我们日本发展的挺好，我们的政策没有错，都怪美帝国主义。你想想，哪个右翼会写本书说我错了，你们家老婆会说自己错了吗？想多了，怎么着都得说你错了。当年你们看日本官员书的时候，就会形成错误的右翼认知，原来是美帝国主义把日本打败的，而他不会去反思自己的问题。日本中立的这批人相反在做历史分析和回顾的时候，那个答案更准确。\n在那个背景下，《广场协议》以后日元大幅度升值，日本形成了低息日元，强势汇率，什么意思？到海外去，购买海外资产吧，日元 carry trading 套息，到海外去形成，这就是日本的三井、三菱、丸红、伊藤忠，他们承载了日本海外所有财富。而更关键的是日本政府债务用于了对那一代居民的补偿，教育、医疗、养老对你们的支撑。当然，没有增长了，所以他的内心是痛苦的，肉体不痛苦，所以日本是内心痛苦，肉体不痛苦，答案就是抑郁症、焦虑症、自杀森林，如果肉体痛苦，那就不是自杀，那是杀别人。\n在这种背景下，财政转向、利率下降，carry trading 套息，用海外资产兜住，形成汇率，这就是当年很著名的，日本只要国内有地震，全球资产就会马上出现抛售潮，日元套息交易会迅速支撑日本，重要的就是这部分资产会回流。\n美国也是一样，1980 年后，美元套息交易，所以全球就形成了低利率美元、借贷美元，永远借贷，美国不能加息，永远降息，美元永远是借贷方，不是投资方。这种背景下，用他的财政扩张和低利率，支撑汇率的就是美元的跨国资产，也就是美股里的所有上市公司和跨国企业。\n但是他造成的结果是，三井、三菱、丸红、伊藤忠富了，老百姓穷了，也不叫穷，就是不增长了。老美也是同样的道理，跨国企业高管富了，老百姓穷了，而老百姓最终会用选票红脖子投出特朗普进行逆转。逆转了游戏就颠倒了，低利率就会回归，套利会回归，产业会回归，债务会下降，汇率会走向，就这个逻辑。\n中国也想这么干，但做不到，我们现在的问题是利率低又不能低到那么低，财政想帮老百姓又不能真的帮到老百姓，汇率升值，我不知道当年有多少人你们咋想的升到 5 块 6 块，不是指 2016 年，是指这两年突然间有人说人民币将来升到 5 块 4 块，你靠啥升？你用什么升？现在说白了就是一种平衡，利率不能那么低，财政不能那么扩，汇率不能那么贬，三者之间找平衡点。比如说 2 的利率，对应的就是 7-7.3 的汇率，财政对应的就是能救救地方政府。如果明年打贸易战，变的更加严峻了，那利率可以更低点，比如破 2，汇率可以往上放一下，7.3-7.6，7.3-7.8，财政可以再扩一点，这是我们现在手上唯一剩下的牌，怎么可能一次给你打出去呢？咋打，打出去以后没有海外市场给你做背书，我们就是新兴市场了。这个游戏就是现在国内的逻辑，止和稳，没有刺激，靠啥刺激？你对国内所有资产理解透了，大概率也就是明年的一些东西了。\n说句实在话，全球这两年战争风险不断加大，某些资产计入的可不是利率、汇率、货币，某些资产在计入的是战争和脱钩，此处请参考俄罗斯。\n时间原因，留几分钟给大家提问。\n现场提问：付总我问一个问题，您刚才也在报告里提到了，这么大的人口国家，也到了 1 万美金以上的人均收入，结构性机会会在哪些行业或者哪些领域里有？\n付鹏：你就记住一点，你现在要么做富的，要么做穷的，放弃中产吧，这就是答案，做富的不受影响。比如说刚才的奢侈品，富的是啥？各位女士们，记住一点，只买爱马仕，香奈儿、LV、GUCCI、Prada 通通放弃，从新品到二手都会崩的，这叫富的。\n穷的怎么做？杭州已经开始了，香奈儿一个包一天租金 25，二奢已经都玩不转了，现在玩的都是租一天 25，干吗呢？租给名媛们拍拍照打打卡，这就是极致的两头。优衣库，要么就往上走，要么就是升级到始祖鸟，要么就往下降级到优衣库，不过现在年轻人更猛，他们都觉得优衣库贵，这都没辙了，我发现优衣库在国内的销售数据在下降。为啥呢？年轻人一问，优衣库挺贵，这没法去理解了，优衣库。就是往两头，中间的部分不做。\n第二，年轻人的生意做，老年人的生意做，40 多岁中年不做，因为他基本上是上有老下有小，还着债，苦哈哈的中年牛马，这部分放弃。年轻人做就是他的兴趣爱好会发生很大的变化，他们不一样，不管有钱没钱，他们的兴趣爱好完全不一样。比如动漫、游戏、二次元，就像年轻人买包，我们家姑娘买啥包？什么 LV、GUCCI、爱马仕统统不买，人家买 “痛包”，知道啥是痛包吗？知道里面塞一堆吧唧是啥东西吗？这就是他们那个时代的消费。\n老年人你们知道做什么吗？老年人记住一点，人生中最后一刻花钱，一定是最后一个房子，ICU 病房。中间 60、70 岁你也没啥好花的，我一直鼓励中国应该尽早退休，趁着这代人有财富的，能花的时候让他花，把岗位职务让出来给年轻人。你真学日本，老着站着，年轻的上不去，你会发现该花的没花还在工作，该挣的挣不着，时间就拖了，中国也一样，放弃中间。\n剩下的是什么呢？国家让你干哪些产业你就干，而且一定干早期，早期干完，后期一定过剩，干早期，达到顶峰的时候就是市场热度极高，要名有名，要利有利的时候，撤。\n现场提问：半导体到了吗？\n付鹏：没到，很简单，我们还没宣布我们 “遥遥领先”，着啥急。会不惜一切代价，哪怕 10 个公司中有 9 个是骗子，他都认，这没办法，你必须明白国家主义的特征。\n现场提问：感谢付总，想问关于海外资产配置的问题，个人在海外资产美股、美债、新兴市场的债券和股票，有什么建议？\n付鹏：新兴市场的债券就是中国，原则上你购买他。比如说你们配置型的会配新兴市场债券，我们投机倒把型的直接在新兴市场放高利贷，任何新兴市场早期第一件事情都进去放贷。2015 年去越南，我原来是做小米总代的，干着干着开始放贷，为什么？中国早些年也是放贷的，新兴市场有个特征，金融体系不完善的情况下，央行和银行的利率并不能正确地反映经济周期的资本供应和需求，所以说银行的利率一定低于实际经济的投资回报率。\n我们的 “搬运工” 直接搬到最高的利率上就可以了，放小贷违约率很低的，现在在中国敢放贷吗？\n举个例子，在座各位 2 分有没有人借钱给我，你们大概第一反应是 2 分，你要我本金的吧？但把时间倒回 10 年前，2 分，开发商问你借，你借不借？那时候你们担心违约吗？不担心，原因跟你放多少息没关系，是对经济的判断，我可以告诉你，新兴市场在这个维度上就是当年的中国。\n人家的员工 00 后就是 00 后，2015 年有一些产业转移跟我们去越南，我跟老板说的很清楚，你不要觉得越南劳动力成本低，不低的。他说这不是挺便宜的，我说加班是要给加班费的，4 点 59 是必须下班的，工会真会罢工的。中国劳动力成本低的原因是啥？牛马可以随便压榨，这才是劳动力低的根因。\n这两年又有些企业想往回迁的原因是啥？越南这两年年轻人动不动就罢工，罢工了人家工会就上，你不给加薪人家就不干的，老板拿着没辙的，中国老板很不适应，就想迁回来。我说你也别迁了，因为中国的 00 后们也很快崛起了，他们整顿职场已经开始了。\n这两天香港闹的很凶的是华为的 HR 招聘，一样的道理，这个时代到了。\n新兴市场的债券，本质上确实是高息的，这很好，美股美债就不用说了，美元资产的投资回报率你自然琢磨去，当然美股明年会有点特殊，因为今年创造奇迹了，今年是美股的奇迹年，你们可能都没注意过回报率、波动率、估值，高估值，低波动，高回报，这三种组合理论上不会同时出现的，但今年同时出现了，是绝对异常的。这就是前几年我跟你讲的，你们必须要明白人工智能已经开始了。前几年我说美股会从人工智能的集中到慢慢扩散，很多人说不可能，他对股市结构的理解不够深刻的。\n当然今年最辉煌的一仗就是英伟达闪崩之前我们明确告诉国内所有的公募基金，你们要注意英伟达场外杠杆，那天晚上崩了，崩完了之后，第二天晚上马上做了将近 8000 人的直播，跟各家公募基金说，这就是波动率的高点，因为经济没有问题，市场没有问题，其实就是过低的波动率带来很多人加了杠杆，把这帮人干掉就完了。\n当时新加坡有些朋友给我打电话说付总这怎么办？我说你今天晚上把保证金补上，明天就能活，补不上死的就是你。这跟英伟达、人工智能没任何关系，妥妥的就是爆杠杆，爆完了就完了，我们也爆完，去完杠杆，英伟达重新回到 3 万亿，现在是这种情况。但这种组合明年应该不会持续，高估值、低波动、高回报，不会。明年要么保持着高估值，保持着低波动，回报率就得下降，要么就是保持着高波动，回报率下降，高估值，要么就是直接杀估值，我目前看还看不到杀估值的路径，杀杠杆是有可能的，杀估值的可能性不大，产业的中期早期估值都是偏高的。到明年去看，美股确实不太一样。\n但我还是那句话，大部分时间你要琢磨琢磨百年美股为啥都是上涨的，是有原因的。对于老百姓来讲，美股不是因为它高的所以高了，是防止高波动就行了，你只要防止高波动，大部分时间就是让你定投了，这没啥选的。\n还有一点，记住，巴菲特是资产管理，不是大散户，老百姓一理解巴菲特持有那么多现金，是不是美股要崩了？现金是啥？是零波动率 4.5% 股息的股票，你去品品这句话就 OK 了，在资产组合中你就是评估资值、波动、回报率，当三者之间异常的时候，你的比重会调到 0 波动率的股息，4.5% 的股票上，这就是现金，千万别把巴菲特搞成大散户，说巴菲特买现金说因为美股要崩，做做短视频蒙蒙老百姓可以，咱们自己就别这么干了，这大概就是美股。\n主持人：感谢付鹏先生的精彩分享。稍后的自由交流时间，各位有任何咨询或问题，可以和您的私人财富规划师继续交流。活动的最后再占用大家两分钟的时间，麻烦大家扫描屏幕上方二维码，填写调查问卷，我们很期待能收到您对于本次活动的反馈，以便我们在以后的活动中更好的服务于您。\n","date":"1 December 2024","permalink":"/blog/fupeng/","section":"Blog","summary":"\u003cp\u003eHSBC 速记\n汇丰私人财富规划\u003c/p\u003e\n\u003cp\u003e玺越世家 · 臻享沙龙 上海站\u003c/p\u003e\n\u003cp\u003e（速记稿）\u003c/p\u003e\n\u003cp\u003e时间：2024 年 11 月 24 日\u003c/p\u003e\n\u003cp\u003e地点：上海浦东文华东方酒店 LG1 层东方厅\u003c/p\u003e\n\u003cp\u003e主持人：女士们，先生们，各位尊敬的来宾，我是陈佳昊（音），我是汇丰私人财富规划上海分区总经理，我代表上海汇丰私人财富规划欢迎各位的莅临。\u003c/p\u003e\n\u003cp\u003e今天有很多新朋友，也有很多老朋友，我在周五的时候问过后台同事报名报了多少了，他告诉我们已经快要接近 200 人了，但从今天的规模来看，我感觉好像今天的人数还要再超过一些。\u003c/p\u003e\n\u003cp\u003e当然了，有一些是原先的老客户，也有很多是慕名而来，看到这次邀请的是付鹏先生，所以慕名而来。也有一些新朋友。在付鹏先生上台之前，请允许我对汇丰私人财富规划做简短的介绍。\u003c/p\u003e\n\u003cp\u003e汇丰私人财富规划是全球的战略重点之一，老朋友都知道，汇丰私人财富规划成立于 2020 年，距今刚好四年，在四年的过程中集团一直在给我们大力注资，也是集团里最重要的项目之一。\u003c/p\u003e\n\u003cp\u003e为什么聚焦在中国市场上？大家很多人都明白，中国中产阶级的人数在世界上占有量是最庞大的，随着中国经济的高速发展，中国人财富管理的需求逐步提升到很高的水准。所以，私人财富规划也会变成汇丰的重要战略之一。\u003c/p\u003e\n\u003cp\u003e介绍一下发展历史，从 2020 年汇丰私人财富规划成立，先是在上海和广州，总部离这里不远，汇丰总部就在国金，欢迎大家去坐一坐。逐步进入到杭州、深圳、北京、佛山，今年在苏州、成都开立了分支机构。\u003c/p\u003e\n\u003cp\u003e2020 年汇丰私人财富规划才刚刚成立，那汇丰的历史又是怎么样的？汇丰简称叫 HSBC，很多人会问 HSBC 四个字母分别代表着什么，可以跟大家简单介绍一下，H 代表的是香港的意思，S 代表的是上海的意思。很多人印象中以为汇丰是一家外资银行，但其实大家有所不知，其实汇丰在清朝的时候就在外滩已经设立了总部，现在这栋楼交给了浦发银行。1949 年之后，汇丰因为历史的原因退出了中国，在 WTO 之后回到了中国。\u003c/p\u003e\n\u003cp\u003e汇丰 1865 年成立至今已经有 100 多年了，那时候还是清朝的同治年间，同时已经在全球的 62 个国家还有 3900 多名客户，这段历史和这么大的分布也是汇丰很多同事内心的骄傲。我们跟很多客户做沟通的时候，经常会把这段历史拿出来跟大家讲一讲，就像这头石狮子，很多人都见过，但很多人都不知道它的历史，很多人在海报、广告、港元大钞上看过这个石狮子，原来在外滩上也有两座，现在放在上海博物馆里，前一阵儿我在博物馆参观的时候还看到了这两只石狮子，上面还有很多历史的痕迹，比如说战争而留下的弹孔，就在人民广场的博物馆里，大家有兴趣的话可以去看一下。\u003c/p\u003e\n\u003cp\u003e财富大矩阵与中国内地市场，汇丰集团对于中国私人财富规划业务的重视程度，在大矩阵中承担了很重要的地位。\u003c/p\u003e\n\u003cp\u003e每 100 位客户中，会有 87 位客户将汇丰私人财富规划视作为提供财富重要的主要品牌，提出了很多好评，82% 的调研者打出 9-10 分的高分。\u003c/p\u003e\n\u003cp\u003e也有一些比较有意思的话，如：“对产品内容的保障满意，公司大有保障；甄汇生活有一定的吸引力，汇丰的产品较贵但也愿意买，因为对汇丰私人财富规划师的认可。”\u003c/p\u003e\n\u003cp\u003e这两年提出一句比较新的 Slogan“懂你关心的，给你安心的”。\u003c/p\u003e\n\u003cp\u003e今天的活动我们邀请到了一位重量级嘉宾，他曾任职于雷曼兄弟、所罗门投资集团等全球顶尖金融机构，从事对冲基金等相关工作。他就是东北证券首席经济学家付鹏先生。让我们欢迎付鹏先生为我们带来《2024 年年终回顾和 2025 年展望——对冲风险 VS 软着陆》主题分享，有请付鹏先生！\u003c/p\u003e\n\u003cp\u003e付鹏：正值年底，虽然刚才汇丰一直强调大家不录音不录像，但大概率你挡不住。我在这儿讲话会谨慎一些，非常小心谨慎，大概率会有人透露出去，放到 YouTube 上，基本上所有见我都说付总我在 YouTube 上看过你的视频，我说那都是盗版的，靠盗版发财的也不少。\u003c/p\u003e","title":"付鹏HSBC"},{"content":"OrderBook 本地维护方案设计 #一、业务背景 #OrderBook（订单簿）是反映市场深度和流动性的核心数据结构，其维护质量直接影响：\n策略交易决策的准确性 风险控制的有效性 市场定价的及时性 1.1 业务价值 # 价格发现\n实时反映市场供需状态 提供多层次价格信息 展示市场深度分布 交易决策支持\n最优价格确定（NBBO） 流动性评估 交易成本估算 风险管理\n市场异常监控 流动性风险评估 价格波动追踪 二、技术方案 #2.1 核心数据结构 #class LockFreeOrderBook { private: // 基础信息 std::string symbol_; // 状态管理 std::atomic\u0026lt;uint64_t\u0026gt; last_update_time_{0}; std::atomic\u0026lt;uint64_t\u0026gt; last_sequence_{0}; std::atomic\u0026lt;bool\u0026gt; initialized_{false}; // 价格档位存储 using PriceLevelMap = tbb::concurrent_map\u0026lt;double, PriceLevel, std::greater\u0026lt;\u0026gt;\u0026gt;; PriceLevelMap bids_; // 买盘 - 降序 PriceLevelMap asks_; // 卖盘 - 升序 }; // 价格档位结构 struct PriceLevel { double price; double quantity; uint64_t update_time; }; // 深度数据结构 struct DepthData { std::vector\u0026lt;PriceLevel\u0026gt; bids; std::vector\u0026lt;PriceLevel\u0026gt; asks; uint64_t sequence_num; uint64_t timestamp; }; 2.2 核心功能实现 # 快照数据处理 void LockFreeOrderBook::onSnapshot(const QuoteData::L2MarketData\u0026amp; data) { // 序列号检查 if (initialized_ \u0026amp;\u0026amp; data.sequence_num \u0026lt;= last_sequence_) return; // 重建订单簿 bids_.clear(); asks_.clear(); // 批量构建价格档位 for (const auto\u0026amp; event : data.events) { for (const auto\u0026amp; update : event.updates) { if (update.new_quantity \u0026lt;= 0) continue; PriceLevel level(update.price_level, update.new_quantity, data.timestamp); if (update.side == \u0026#34;bid\u0026#34;) { bids_.emplace(update.price_level, level); } else { asks_.emplace(update.price_level, level); } } } // 更新状态 updateState(data); } 增量更新处理 void LockFreeOrderBook::onUpdate(const QuoteData::L2MarketData\u0026amp; data) { // 状态检查 if (!initialized_ || data.sequence_num \u0026lt;= last_sequence_) return; // 处理价格档位更新 for (const auto\u0026amp; event : data.events) { for (const auto\u0026amp; update : event.updates) { PriceLevel level(update.price_level, update.new_quantity, data.timestamp); auto\u0026amp; book = (update.side == \u0026#34;bid\u0026#34;) ? bids_ : asks_; auto [it, inserted] = book.emplace(update.price_level, level); if (!inserted) { it-\u0026gt;second = level; // 更新现有档位 } } } // 更新状态 updateState(data); } 深度数据查询 DepthData LockFreeOrderBook::getDepth(size_t levels) const { DepthData result; result.sequence_num = last_sequence_; result.timestamp = last_update_time_; // 收集有效价格档位 for (const auto\u0026amp; [price, level] : bids_) { if (level.quantity \u0026gt; 0 \u0026amp;\u0026amp; result.bids.size() \u0026lt; levels) { result.bids.push_back(level); } } for (const auto\u0026amp; [price, level] : asks_) { if (level.quantity \u0026gt; 0 \u0026amp;\u0026amp; result.asks.size() \u0026lt; levels) { result.asks.push_back(level); } } return result; } 2.3 技术特点 # 并发安全\n使用 TBB concurrent_map 保证数据一致性 原子操作保证状态更新的安全性 无锁设计减少竞争 性能优化\n最小化锁竞争 高效的数据结构选择 批量处理能力 可靠性保证\n序列号机制确保数据完整性 异常处理机制 状态一致性维护 三、应用场景 #3.1 策略应用 # 做市策略 void MarketMakingStrategy::onOrderBookUpdate() { auto depth = orderbook_-\u0026gt;getDepth(5); // 计算买卖价差 double spread = depth.asks[0].price - depth.bids[0].price; // 评估市场状态 if (isValidSpread(spread)) { updateQuotes(depth); } } 套利策略 void ArbitrageStrategy::checkOpportunity() { auto depth1 = orderbook1_-\u0026gt;getDepth(1); auto depth2 = orderbook2_-\u0026gt;getDepth(1); double spread = calculateSpread(depth1, depth2); if (spread \u0026gt; threshold_) { executeArbitrage(); } } 3.2 风险控制 #void RiskManager::monitorMarket() { auto depth = orderbook_-\u0026gt;getDepth(10); // 检查市场质量 checkMarketQuality(depth); // 监控价格波动 monitorPriceMovement(depth); // 评估流动性 assessLiquidity(depth); } 四、性能指标 # 延迟要求\n更新处理延迟 \u0026lt; 100微秒 查询响应延迟 \u0026lt; 50微秒 批量处理能力 \u0026gt; 10000次/秒 资源消耗\n内存占用 \u0026lt; 1GB/交易对 CPU使用率 \u0026lt; 30% 网络带宽 \u0026lt; 100Mbps 五、后续优化方向 # 性能优化\n引入内存池管理 实现定期清理机制 优化数据结构布局 功能扩展\n添加统计分析功能 实现历史数据回放 支持多市场整合 监控完善\n延迟监控 内存使用监控 异常事件告警 通过这套方案，我们可以高效地维护本地订单簿，为上层策略提供准确、及时的市场数据支持，同时保证系统的可靠性和可扩展性。\n","date":"27 November 2024","permalink":"/blog/orderbook/","section":"Blog","summary":"\u003ch1 id=\"orderbook-本地维护方案设计\" class=\"relative group\"\u003eOrderBook 本地维护方案设计 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#orderbook-%e6%9c%ac%e5%9c%b0%e7%bb%b4%e6%8a%a4%e6%96%b9%e6%a1%88%e8%ae%be%e8%ae%a1\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e\u003ch2 id=\"一业务背景\" class=\"relative group\"\u003e一、业务背景 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e4%b8%80%e4%b8%9a%e5%8a%a1%e8%83%8c%e6%99%af\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003eOrderBook（订单簿）是反映市场深度和流动性的核心数据结构，其维护质量直接影响：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e策略交易决策的准确性\u003c/li\u003e\n\u003cli\u003e风险控制的有效性\u003c/li\u003e\n\u003cli\u003e市场定价的及时性\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"11-业务价值\" class=\"relative group\"\u003e1.1 业务价值 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#11-%e4%b8%9a%e5%8a%a1%e4%bb%b7%e5%80%bc\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e价格发现\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e实时反映市场供需状态\u003c/li\u003e\n\u003cli\u003e提供多层次价格信息\u003c/li\u003e\n\u003cli\u003e展示市场深度分布\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e交易决策支持\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e最优价格确定（NBBO）\u003c/li\u003e\n\u003cli\u003e流动性评估\u003c/li\u003e\n\u003cli\u003e交易成本估算\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e风险管理\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e市场异常监控\u003c/li\u003e\n\u003cli\u003e流动性风险评估\u003c/li\u003e\n\u003cli\u003e价格波动追踪\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"二技术方案\" class=\"relative group\"\u003e二、技术方案 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e4%ba%8c%e6%8a%80%e6%9c%af%e6%96%b9%e6%a1%88\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"21-核心数据结构\" class=\"relative group\"\u003e2.1 核心数据结构 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#21-%e6%a0%b8%e5%bf%83%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eLockFreeOrderBook\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eprivate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 基础信息\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003esymbol_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 状态管理\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eatomic\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003euint64_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elast_update_time_\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eatomic\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003euint64_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elast_sequence_\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eatomic\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003einitialized_\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 价格档位存储\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ePriceLevelMap\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etbb\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econcurrent_map\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ePriceLevel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003egreater\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ePriceLevelMap\u003c/span\u003e \u003cspan class=\"n\"\u003ebids_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 买盘 - 降序\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003ePriceLevelMap\u003c/span\u003e \u003cspan class=\"n\"\u003easks_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 卖盘 - 升序\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 价格档位结构\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003ePriceLevel\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003equantity\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003euint64_t\u003c/span\u003e \u003cspan class=\"n\"\u003eupdate_time\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 深度数据结构\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eDepthData\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ePriceLevel\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ebids\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ePriceLevel\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003easks\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003euint64_t\u003c/span\u003e \u003cspan class=\"n\"\u003esequence_num\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003euint64_t\u003c/span\u003e \u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"22-核心功能实现\" class=\"relative group\"\u003e2.2 核心功能实现 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#22-%e6%a0%b8%e5%bf%83%e5%8a%9f%e8%83%bd%e5%ae%9e%e7%8e%b0\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e快照数据处理\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eLockFreeOrderBook\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eonSnapshot\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eQuoteData\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eL2MarketData\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 序列号检查\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einitialized_\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esequence_num\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003elast_sequence_\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 重建订单簿\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003ebids_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclear\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003easks_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclear\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 批量构建价格档位\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"nl\"\u003eevent\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eevents\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"nl\"\u003eupdate\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eupdates\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enew_quantity\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ePriceLevel\u003c/span\u003e \u003cspan class=\"nf\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprice_level\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                           \u003cspan class=\"n\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enew_quantity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                           \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eside\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;bid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003ebids_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eemplace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprice_level\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003easks_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eemplace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprice_level\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 更新状态\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eupdateState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003e增量更新处理\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eLockFreeOrderBook\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eonUpdate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eQuoteData\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eL2MarketData\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 状态检查\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003einitialized_\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esequence_num\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003elast_sequence_\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 处理价格档位更新\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"nl\"\u003eevent\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eevents\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"nl\"\u003eupdate\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eupdates\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ePriceLevel\u003c/span\u003e \u003cspan class=\"nf\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprice_level\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                           \u003cspan class=\"n\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enew_quantity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                           \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ebook\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eside\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;bid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nl\"\u003ebids_\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003easks_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einserted\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebook\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eemplace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprice_level\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003einserted\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 更新现有档位\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 更新状态\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eupdateState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003e深度数据查询\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eDepthData\u003c/span\u003e \u003cspan class=\"n\"\u003eLockFreeOrderBook\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003egetDepth\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003elevels\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eDepthData\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esequence_num\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elast_sequence_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elast_update_time_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 收集有效价格档位\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ebids_\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equantity\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebids\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003elevels\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebids\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush_back\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003easks_\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equantity\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003easks\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003elevels\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003easks\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush_back\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elevel\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"23-技术特点\" class=\"relative group\"\u003e2.3 技术特点 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#23-%e6%8a%80%e6%9c%af%e7%89%b9%e7%82%b9\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e并发安全\u003c/strong\u003e\u003c/p\u003e","title":"OrderBook 本地维护方案设计"},{"content":"","date":null,"permalink":"/tags/memeoy/","section":"Tags","summary":"","title":"Memeoy"},{"content":"1. 概述 #内存映射（mmap）是一种将文件或设备映射到内存的方法，而零拷贝是一种减少或避免数据在内核空间和用户空间之间不必要复制的技术。这两个概念密切相关，但又有所不同。\n2. mmap 是零拷贝吗？ #答案是：mmap 本身不是零拷贝技术，但它可以实现零拷贝的效果。\n2.1 mmap 的工作原理 # 当调用 mmap 时，操作系统会在虚拟内存中创建一个新的内存区域。 这个内存区域会映射到文件系统缓存（page cache）中的物理页面。 当程序访问这个内存区域时，如果相应的页面不在内存中，会触发缺页中断，操作系统会从磁盘加载数据到内存。 2.2 为什么 mmap 可以实现零拷贝 # 一旦映射建立，用户进程可以直接读写这个内存区域，而无需在用户空间和内核空间之间进行数据复制。 对于读操作，数据从磁盘读入 page cache 后，可以直接被用户进程访问，无需额外复制。 对于写操作，修改直接发生在 page cache 上，操作系统会在适当的时候将修改同步到磁盘。 3. mmap 与传统 I/O 的比较 #3.1 传统 read 系统调用 #char buffer[4096]; ssize_t bytes_read = read(fd, buffer, sizeof(buffer)); 这个过程涉及两次数据拷贝：\n从磁盘到内核缓冲区 从内核缓冲区到用户空间缓冲区 3.2 使用 mmap #void* addr = mmap(NULL, file_size, PROT_READ, MAP_PRIVATE, fd, 0); // 直接访问 addr 指向的内存 mmap 减少了一次数据拷贝，数据直接从磁盘到用户可访问的内存。\n4. mmap 的优势和注意事项 #4.1 优势 # 减少数据拷贝，提高I/O效率 支持随机访问大文件 可以实现进程间通信 4.2 注意事项 # 大文件映射可能导致地址空间碎片 写操作可能触发写时复制（Copy-on-Write），影响性能 需要谨慎处理文件大小变化的情况 5. 真正的零拷贝技术 #zero copy\n虽然 mmap 可以减少拷贝，但真正的零拷贝技术通常指的是：\nsendfile() 系统调用：直接在内核空间完成文件到网络套接字的数据传输。 支持 scatter-gather 的 DMA 传输：允许硬件直接在磁盘和网络接口之间传输数据，完全绕过 CPU。 6. 示例：使用 mmap 实现高效文件复制 ##include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/mman.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;iostream\u0026gt; void copy_file(const char* src, const char* dst) { int src_fd = open(src, O_RDONLY); if (src_fd == -1) { std::cerr \u0026lt;\u0026lt; \u0026#34;Error opening source file\u0026#34; \u0026lt;\u0026lt; std::endl; return; } struct stat sb; if (fstat(src_fd, \u0026amp;sb) == -1) { std::cerr \u0026lt;\u0026lt; \u0026#34;Error getting file size\u0026#34; \u0026lt;\u0026lt; std::endl; close(src_fd); return; } void* src_addr = mmap(NULL, sb.st_size, PROT_READ, MAP_PRIVATE, src_fd, 0); if (src_addr == MAP_FAILED) { std::cerr \u0026lt;\u0026lt; \u0026#34;Error mapping source file\u0026#34; \u0026lt;\u0026lt; std::endl; close(src_fd); return; } int dst_fd = open(dst, O_RDWR | O_CREAT | O_TRUNC, 0644); if (dst_fd == -1) { std::cerr \u0026lt;\u0026lt; \u0026#34;Error creating destination file\u0026#34; \u0026lt;\u0026lt; std::endl; munmap(src_addr, sb.st_size); close(src_fd); return; } if (ftruncate(dst_fd, sb.st_size) == -1) { std::cerr \u0026lt;\u0026lt; \u0026#34;Error setting file size\u0026#34; \u0026lt;\u0026lt; std::endl; close(dst_fd); munmap(src_addr, sb.st_size); close(src_fd); return; } void* dst_addr = mmap(NULL, sb.st_size, PROT_WRITE, MAP_SHARED, dst_fd, 0); if (dst_addr == MAP_FAILED) { std::cerr \u0026lt;\u0026lt; \u0026#34;Error mapping destination file\u0026#34; \u0026lt;\u0026lt; std::endl; close(dst_fd); munmap(src_addr, sb.st_size); close(src_fd); return; } memcpy(dst_addr, src_addr, sb.st_size); munmap(dst_addr, sb.st_size); munmap(src_addr, sb.st_size); close(dst_fd); close(src_fd); } int main() { copy_file(\u0026#34;source.txt\u0026#34;, \u0026#34;destination.txt\u0026#34;); return 0; } 这个例子展示了如何使用 mmap 高效地复制文件，避免了传统 read/write 方法中的多次数据拷贝。\n7. 结论 #虽然 mmap 不是严格意义上的零拷贝技术，但它确实能显著减少数据拷贝次数，提高 I/O 效率。在处理大文件或需要频繁随机访问的场景中，mmap 可以成为非常有效的工具。然而，在使用 mmap 时，开发者需要权衡其优势和潜在的复杂性，以确保在特定应用场景中获得最佳性能。\n","date":"22 October 2024","permalink":"/blog/zero_copy/","section":"Blog","summary":"\u003ch2 id=\"1-概述\" class=\"relative group\"\u003e1. 概述 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-%e6%a6%82%e8%bf%b0\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e内存映射（mmap）是一种将文件或设备映射到内存的方法，而零拷贝是一种减少或避免数据在内核空间和用户空间之间不必要复制的技术。这两个概念密切相关，但又有所不同。\u003c/p\u003e\n\u003ch2 id=\"2-mmap-是零拷贝吗\" class=\"relative group\"\u003e2. mmap 是零拷贝吗？ \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#2-mmap-%e6%98%af%e9%9b%b6%e6%8b%b7%e8%b4%9d%e5%90%97\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e答案是：\u003cstrong\u003emmap 本身不是零拷贝技术，但它可以实现零拷贝的效果\u003c/strong\u003e。\u003c/p\u003e\n\u003ch3 id=\"21-mmap-的工作原理\" class=\"relative group\"\u003e2.1 mmap 的工作原理 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#21-mmap-%e7%9a%84%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003col\u003e\n\u003cli\u003e当调用 mmap 时，操作系统会在虚拟内存中创建一个新的内存区域。\u003c/li\u003e\n\u003cli\u003e这个内存区域会映射到文件系统缓存（page cache）中的物理页面。\u003c/li\u003e\n\u003cli\u003e当程序访问这个内存区域时，如果相应的页面不在内存中，会触发缺页中断，操作系统会从磁盘加载数据到内存。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"22-为什么-mmap-可以实现零拷贝\" class=\"relative group\"\u003e2.2 为什么 mmap 可以实现零拷贝 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#22-%e4%b8%ba%e4%bb%80%e4%b9%88-mmap-%e5%8f%af%e4%bb%a5%e5%ae%9e%e7%8e%b0%e9%9b%b6%e6%8b%b7%e8%b4%9d\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e一旦映射建立，用户进程可以直接读写这个内存区域，而无需在用户空间和内核空间之间进行数据复制。\u003c/li\u003e\n\u003cli\u003e对于读操作，数据从磁盘读入 page cache 后，可以直接被用户进程访问，无需额外复制。\u003c/li\u003e\n\u003cli\u003e对于写操作，修改直接发生在 page cache 上，操作系统会在适当的时候将修改同步到磁盘。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-mmap-与传统-io-的比较\" class=\"relative group\"\u003e3. mmap 与传统 I/O 的比较 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#3-mmap-%e4%b8%8e%e4%bc%a0%e7%bb%9f-io-%e7%9a%84%e6%af%94%e8%be%83\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"31-传统-read-系统调用\" class=\"relative group\"\u003e3.1 传统 read 系统调用 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#31-%e4%bc%a0%e7%bb%9f-read-%e7%b3%bb%e7%bb%9f%e8%b0%83%e7%94%a8\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003ebuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4096\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003essize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ebytes_read\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个过程涉及两次数据拷贝：\u003c/p\u003e","title":"内存映射（mmap）与零拷贝技术：深入理解和实践"},{"content":"目录 # 简介 仓库结构和分支策略 协作者权限管理 保护主分支 Pull Request 和代码审查流程 持续集成与部署 (CI/CD) 文档和沟通 最佳实践和注意事项 简介 #在没有高级 GitHub 功能的私有仓库中进行协同开发可能具有挑战性，但通过正确的实践和工具，我们可以建立一个高效、安全的开发环境。本指南总结了我们讨论的主要策略和技术。\n仓库结构和分支策略 # 主分支：main（稳定、可部署的代码） 开发分支：main_for_dev（日常开发工作） 特性分支：从 main_for_dev 分出，用于开发新功能 工作流程：\n从 main_for_dev 创建特性分支 在特性分支上开发 完成后，创建 Pull Request 到 main_for_dev 代码审查和测试 合并到 main_for_dev 定期将 main_for_dev 合并到 main 协作者权限管理 #GitHub 私有仓库提供以下权限级别：\nRead Triage Write Maintain Admin 设置步骤：\n进入仓库 \u0026ldquo;Settings\u0026rdquo; \u0026gt; \u0026ldquo;Collaborators and teams\u0026rdquo; 点击 \u0026ldquo;Add people\u0026rdquo; 或 \u0026ldquo;Add teams\u0026rdquo; 输入用户名并选择适当的权限级别 最佳实践：\n遵循最小权限原则 定期审查和更新权限 保护主分支 #由于缺乏高级分支保护功能，我们采用以下策略：\n团队约定：\n禁止直接推送到 main 分支 所有更改通过 PR 进行 Git Hooks： 创建 pre-push hook（.git/hooks/pre-push）：\n#!/bin/sh branch=$(git rev-parse --abbrev-ref HEAD) if [ \u0026#34;$branch\u0026#34; = \u0026#34;main\u0026#34; ]; then echo \u0026#34;Direct push to main branch is not allowed. Please create a Pull Request.\u0026#34; exit 1 fi 设置权限：chmod +x .git/hooks/pre-push\nGitHub Actions： 创建 .github/workflows/protect-main.yml：\nname: Protect Main Branch on: push: branches: - main jobs: check_push: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Check if push was direct run: | if [[ $(git log --format=%B -n 1 ${{ github.sha }}) != *\u0026#34;Merge pull request\u0026#34;* ]]; then echo \u0026#34;::error::Direct push to main branch detected. Please use Pull Requests.\u0026#34; exit 1 fi Pull Request 和代码审查流程 # 创建 PR 模板： 在 .github/pull_request_template.md 中定义模板。\n审查流程：\n至少一名审查者批准 通过所有自动化测试 遵循团队定义的代码规范 合并策略： 使用 \u0026ldquo;Squash and merge\u0026rdquo; 或 \u0026ldquo;Rebase and merge\u0026rdquo; 保持清晰的提交历史。\n持续集成与部署 (CI/CD) #使用 GitHub Actions 进行 CI/CD：\n在 PR 中运行测试和代码质量检查 只从 main 分支进行部署 自动化版本标记和发布流程 文档和沟通 # README.md：项目概述和快速开始指南 CONTRIBUTING.md：详细的贡献指南 代码注释：保持代码自文档化 定期团队会议：讨论项目进展和问题 最佳实践和注意事项 # 定期培训团队成员，确保everyone遵循协作流程 使用 GitHub Issues 进行任务跟踪和 bug 报告 考虑使用项目看板（Project Boards）进行任务管理 定期审查和更新工作流程，适应团队需求 鼓励知识共享和对等编程 重视代码质量，包括单元测试和文档 考虑实施持续反馈机制，不断改进协作流程 通过实施这些策略和最佳实践，即使在私有仓库的限制下，也能建立一个高效、安全的协作环境。记住，成功的协作不仅依赖于工具和流程，更依赖于团队的沟通和相互信任。\n","date":"16 October 2024","permalink":"/blog/project_manage/","section":"Blog","summary":"\u003ch2 id=\"目录\" class=\"relative group\"\u003e目录 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e7%9b%ae%e5%bd%95\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003col\u003e\n\u003cli\u003e\u003ca href=\"#%e7%ae%80%e4%bb%8b\"\u003e简介\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%e4%bb%93%e5%ba%93%e7%bb%93%e6%9e%84%e5%92%8c%e5%88%86%e6%94%af%e7%ad%96%e7%95%a5\"\u003e仓库结构和分支策略\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%e5%8d%8f%e4%bd%9c%e8%80%85%e6%9d%83%e9%99%90%e7%ae%a1%e7%90%86\"\u003e协作者权限管理\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%e4%bf%9d%e6%8a%a4%e4%b8%bb%e5%88%86%e6%94%af\"\u003e保护主分支\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#pull-request-%e5%92%8c%e4%bb%a3%e7%a0%81%e5%ae%a1%e6%9f%a5%e6%b5%81%e7%a8%8b\"\u003ePull Request 和代码审查流程\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%e6%8c%81%e7%bb%ad%e9%9b%86%e6%88%90%e4%b8%8e%e9%83%a8%e7%bd%b2-cicd\"\u003e持续集成与部署 (CI/CD)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%e6%96%87%e6%a1%a3%e5%92%8c%e6%b2%9f%e9%80%9a\"\u003e文档和沟通\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5%e5%92%8c%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9\"\u003e最佳实践和注意事项\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"简介\" class=\"relative group\"\u003e简介 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e7%ae%80%e4%bb%8b\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e在没有高级 GitHub 功能的私有仓库中进行协同开发可能具有挑战性，但通过正确的实践和工具，我们可以建立一个高效、安全的开发环境。本指南总结了我们讨论的主要策略和技术。\u003c/p\u003e\n\u003ch2 id=\"仓库结构和分支策略\" class=\"relative group\"\u003e仓库结构和分支策略 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e4%bb%93%e5%ba%93%e7%bb%93%e6%9e%84%e5%92%8c%e5%88%86%e6%94%af%e7%ad%96%e7%95%a5\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e主分支\u003c/strong\u003e：\u003ccode\u003emain\u003c/code\u003e（稳定、可部署的代码）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e开发分支\u003c/strong\u003e：\u003ccode\u003emain_for_dev\u003c/code\u003e（日常开发工作）\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e特性分支\u003c/strong\u003e：从 \u003ccode\u003emain_for_dev\u003c/code\u003e 分出，用于开发新功能\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e工作流程：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e从 \u003ccode\u003emain_for_dev\u003c/code\u003e 创建特性分支\u003c/li\u003e\n\u003cli\u003e在特性分支上开发\u003c/li\u003e\n\u003cli\u003e完成后，创建 Pull Request 到 \u003ccode\u003emain_for_dev\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e代码审查和测试\u003c/li\u003e\n\u003cli\u003e合并到 \u003ccode\u003emain_for_dev\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e定期将 \u003ccode\u003emain_for_dev\u003c/code\u003e 合并到 \u003ccode\u003emain\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"协作者权限管理\" class=\"relative group\"\u003e协作者权限管理 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e5%8d%8f%e4%bd%9c%e8%80%85%e6%9d%83%e9%99%90%e7%ae%a1%e7%90%86\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003eGitHub 私有仓库提供以下权限级别：\u003c/p\u003e","title":"GitHub私有仓库协同开发指南"},{"content":"","date":null,"permalink":"/tags/project-management/","section":"Tags","summary":"","title":"Project Management"},{"content":"1. 引言 #Fork是Unix/Linux系统中最基本也是最强大的系统调用之一。它允许一个进程创建一个新的进程,这个新进程是原进程的一个几乎完全相同的副本。本次技术分享将深入探讨fork机制,从基本概念到高级应用。\n2. Fork的基本原理 #2.1 什么是Fork #Fork是一个系统调用,用于创建一个新的进程。新进程（称为子进程）是调用进程（称为父进程）的一个几乎完全相同的副本。\n2.2 Fork的工作原理 #当一个进程调用fork时:\n系统会创建一个新的进程。 新进程是父进程的一个副本,包括代码段、数据段、堆栈等。 子进程获得父进程数据空间、堆和栈的副本。 父进程和子进程继续执行fork调用之后的代码。 2.3 Fork的返回值 #Fork调用会返回两次:\n在父进程中,返回子进程的PID。 在子进程中,返回0。 这允许程序区分父进程和子进程。\npid_t pid = fork(); if (pid \u0026gt; 0) { printf(\u0026#34;父进程\\n\u0026#34;); } else if (pid == 0) { printf(\u0026#34;子进程\\n\u0026#34;); } else { perror(\u0026#34;fork失败\u0026#34;); exit(1); } 3. Fork的高级特性 #3.1 写时复制 (Copy-on-Write) #为了提高效率,现代操作系统使用\u0026quot;写时复制\u0026quot;技术:\n初始时,子进程与父进程共享同一物理内存。 只有当其中一个进程尝试修改内存时,才会创建该部分内存的副本。 这大大减少了fork的开销和内存使用。\n3.2 文件描述符的继承 #子进程继承父进程的文件描述符。这意味着:\n子进程可以访问父进程打开的文件。 父子进程共享文件偏移量。 int fd = open(\u0026#34;example.txt\u0026#34;, O_RDWR); if (fork() == 0) { // 子进程 write(fd, \u0026#34;Hello from child\u0026#34;, 16); } else { // 父进程 write(fd, \u0026#34;Hello from parent\u0026#34;, 17); } 3.3 内存独立性 #虽然子进程初始时与父进程共享内存,但它们的内存空间是独立的:\n一个进程对变量的修改不会影响另一个进程。 这适用于全局变量、堆、栈等所有内存区域。 4. Fork的高级应用 #4.1 多进程并行处理 #Fork常用于创建多个并行工作的进程,例如在服务器程序中:\nfor (int i = 0; i \u0026lt; NUM_WORKERS; i++) { if (fork() == 0) { worker_process(); exit(0); } } 4.2 实现管道 #Fork结合管道可以用于进程间通信:\nint pipefd[2]; pipe(pipefd); if (fork() == 0) { close(pipefd[1]); // 关闭写端 char buf[100]; read(pipefd[0], buf, 100); printf(\u0026#34;子进程读取: %s\\n\u0026#34;, buf); } else { close(pipefd[0]); // 关闭读端 write(pipefd[1], \u0026#34;Hello from parent\u0026#34;, 17); } 4.3 实现Shell命令 #Shell使用fork和exec来执行命令:\nif (fork() == 0) { execl(\u0026#34;/bin/ls\u0026#34;, \u0026#34;ls\u0026#34;, \u0026#34;-l\u0026#34;, NULL); exit(1); // 如果exec失败 } 5. Fork的性能考虑 #5.1 资源消耗 #每次fork都会创建一个新进程,这涉及:\n内存分配 复制进程信息 更新系统表 在资源受限的环境中,过度使用fork可能导致性能问题。\n5.2 上下文切换 #多个进程意味着更多的上下文切换,可能影响性能。在某些情况下,使用线程可能更为高效。\n6. Fork的高级技巧和注意事项 #6.1 信号处理 #Fork后,子进程继承父进程的信号处理程序。但在多线程程序中fork需要特别小心,因为子进程只包含调用fork的线程。\n6.2 清理资源 #在使用fork时,要注意适当地关闭不需要的文件描述符和释放资源,以防止资源泄漏。\n6.3 竞态条件 #需要注意父子进程之间可能的竞态条件,特别是在访问共享资源时。\n7. 实例分析：多重Fork #让我们回到最初的例子:\nvoid test(){ fork() \u0026amp;\u0026amp; fork() \u0026amp;\u0026amp; fork() \u0026amp;\u0026amp; sleep(10); printf(\u0026#34;hello\\n\u0026#34;); exit(0); } 这个例子展示了fork的几个关键特性:\n短路评估: 利用\u0026amp;\u0026amp;操作符的短路特性控制fork的执行。 进程创建: 每个成功的fork都创建一个新进程。 并发执行: 多个进程并发运行,导致多个\u0026quot;hello\u0026quot;输出。 7.1 Fork调用分析 #代码解析 #这段代码的关键在于 fork() \u0026amp;\u0026amp; fork() \u0026amp;\u0026amp; fork() \u0026amp;\u0026amp; sleep(10) 这一行。\nfork() 的行为 # fork() 创建一个新的子进程。 在父进程中，fork() 返回子进程的 PID（非零值）。 在子进程中，fork() 返回 0。 逻辑短路 #由于使用了 \u0026amp;\u0026amp;（逻辑与）操作符，这里涉及到短路评估：\n只有当前面的 fork() 返回非零值（在父进程中）时，后续的 fork() 才会执行。 如果任何 fork() 返回 0（在子进程中），后续的 fork() 和 sleep(10) 都不会执行。 执行流程 # 第一个 fork()：\n创建一个子进程 父进程继续执行下一个 fork() 子进程跳过后续 fork() 和 sleep()，直接打印 \u0026ldquo;hello\u0026rdquo; 第二个 fork()（只在父进程中执行）：\n再创建一个子进程 新的父进程继续执行第三个 fork() 新的子进程跳过后续 fork() 和 sleep()，打印 \u0026ldquo;hello\u0026rdquo; 第三个 fork()（只在最初的父进程中执行）：\n再创建一个子进程 最初的父进程执行 sleep(10) 新的子进程跳过 sleep()，打印 \u0026ldquo;hello\u0026rdquo; 10秒后，最初的父进程也会打印 \u0026ldquo;hello\u0026rdquo;\n进程树 #原始进程 ─── 子进程1 (打印\u0026#34;hello\u0026#34;) │ ├─── 子进程2 (打印\u0026#34;hello\u0026#34;) │ └─── 子进程3 (打印\u0026#34;hello\u0026#34;) │ └─── 父进程 (等待10秒后打印\u0026#34;hello\u0026#34;) 结果 #这段代码会输出 4 个 \u0026ldquo;hello\u0026rdquo;。\n3 个来自立即执行的子进程 1 个来自等待 10 秒后的父进程 8. 结论 #Fork是一个强大而复杂的系统调用,它为Unix/Linux系统提供了创建新进程的基本机制。理解和正确使用fork可以帮助开发者创建高效、可靠的多进程应用。然而,fork也带来了一些挑战,如资源管理和同步问题。在实际应用中,需要根据具体需求权衡使用fork、线程或其他并发机制。\n","date":"15 October 2024","permalink":"/blog/fork/","section":"Blog","summary":"\u003ch2 id=\"1-引言\" class=\"relative group\"\u003e1. 引言 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-%e5%bc%95%e8%a8%80\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003eFork是Unix/Linux系统中最基本也是最强大的系统调用之一。它允许一个进程创建一个新的进程,这个新进程是原进程的一个几乎完全相同的副本。本次技术分享将深入探讨fork机制,从基本概念到高级应用。\u003c/p\u003e\n\u003ch2 id=\"2-fork的基本原理\" class=\"relative group\"\u003e2. Fork的基本原理 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#2-fork%e7%9a%84%e5%9f%ba%e6%9c%ac%e5%8e%9f%e7%90%86\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"21-什么是fork\" class=\"relative group\"\u003e2.1 什么是Fork \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#21-%e4%bb%80%e4%b9%88%e6%98%affork\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003eFork是一个系统调用,用于创建一个新的进程。新进程（称为子进程）是调用进程（称为父进程）的一个几乎完全相同的副本。\u003c/p\u003e\n\u003ch3 id=\"22-fork的工作原理\" class=\"relative group\"\u003e2.2 Fork的工作原理 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#22-fork%e7%9a%84%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e当一个进程调用fork时:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e系统会创建一个新的进程。\u003c/li\u003e\n\u003cli\u003e新进程是父进程的一个副本,包括代码段、数据段、堆栈等。\u003c/li\u003e\n\u003cli\u003e子进程获得父进程数据空间、堆和栈的副本。\u003c/li\u003e\n\u003cli\u003e父进程和子进程继续执行fork调用之后的代码。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"23-fork的返回值\" class=\"relative group\"\u003e2.3 Fork的返回值 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#23-fork%e7%9a%84%e8%bf%94%e5%9b%9e%e5%80%bc\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003eFork调用会返回两次:\u003c/p\u003e","title":"Fork机制详解：从基础到高级应用"},{"content":"","date":null,"permalink":"/tags/system-programming/","section":"Tags","summary":"","title":"System Programming"},{"content":"","date":null,"permalink":"/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/","section":"Tags","summary":"","title":"性能优化"},{"content":"1. 基础概念 #1.1 二进制表示 # 计算机使用二进制（0和1）存储和处理数据 1 byte = 8 bits 32位整数可以表示从 0 到 2^32 - 1 的数值 1.2 位操作基础 # 与操作 (\u0026amp;): 两位都为1时结果为1，否则为0 或操作 (|): 至少一位为1时结果为1，否则为0 异或操作 (^): 两位不同时结果为1，相同时为0 非操作 (~): 将每一位取反 左移 (\u0026laquo;): 将所有位向左移动，右侧补0 右移 (\u0026raquo;): 将所有位向右移动，左侧补0或符号位 示例：\nunsigned int a = 5; // 0101 unsigned int b = 3; // 0011 unsigned int and_result = a \u0026amp; b; // 0001 (1) unsigned int or_result = a | b; // 0111 (7) unsigned int xor_result = a ^ b; // 0110 (6) unsigned int not_result = ~a; // 11111111111111111111111111111010 (-6 in 2\u0026#39;s complement) unsigned int left_shift = a \u0026lt;\u0026lt; 1; // 1010 (10) unsigned int right_shift = a \u0026gt;\u0026gt; 1;// 0010 (2) 2. 掩码（Mask） #2.1 掩码定义 #掩码是用于选择或修改特定位的二进制模式\n2.2 常见掩码操作 # 提取位：value \u0026amp; mask 设置位：value | mask 清除位：value \u0026amp; ~mask 切换位：value ^ mask 示例：\nunsigned int value = 0xA5; // 10100101 unsigned int mask = 0x0F; // 00001111 unsigned int extract = value \u0026amp; mask; // 00000101 (5) unsigned int set = value | mask; // 10101111 (175) unsigned int clear = value \u0026amp; ~mask; // 10100000 (160) unsigned int toggle = value ^ mask; // 10101010 (170) 3. 位域（Bit Fields） #3.1 概念 #将较大的数据类型分割成多个小的字段，每个字段占用特定数量的位\n3.2 优势 # 内存效率：在一个整数中存储多个值 性能：位操作通常比其他操作更快 原子性：可以在一个操作中读取或修改多个字段 3.3 位域布局示例 #32-bit integer layout: [Instrument (29 bits)][Offset (2 bits)][Direction (1 bit)] 31 3 1 0 4. 实现技术 #4.1 定义掩码和偏移 ##define DIRECTION_BITS_MASK 0x1 #define DIRECTION_BITS_OFFSET 0x0 #define OFFSET_BITS_MASK 0x3 #define OFFSET_BITS_OFFSET 0x1 #define INSTRUMENT_BITS_MASK 0x1FFFFFFF #define INSTRUMENT_BITS_OFFSET 0x3 4.2 获取字段值 #int get_Field(int\u0026amp; value, int mask, int offset) { return (value \u0026gt;\u0026gt; offset) \u0026amp; mask; } // 具体实现示例 int get_Direction(int\u0026amp; value) { return (value \u0026gt;\u0026gt; DIRECTION_BITS_OFFSET) \u0026amp; DIRECTION_BITS_MASK; } 4.3 设置字段值 #根据字段的位置和大小，设置函数可能有不同的实现：\n// 对于最低位的单位字段（如 Direction） int set_Direction(int\u0026amp; value, int new_direction) { if (new_direction != 1 \u0026amp;\u0026amp; new_direction != 0) { return -1; } value = (value \u0026amp; ~DIRECTION_BITS_MASK) | new_direction; return 0; } // 对于非最低位的多位字段（如 Offset） int set_Offset(int\u0026amp; value, int new_offset) { if (new_offset \u0026lt; 3 \u0026amp;\u0026amp; new_offset \u0026gt; 0) { value = (value \u0026amp; ~(OFFSET_BITS_MASK \u0026lt;\u0026lt; OFFSET_BITS_OFFSET)) | (new_offset \u0026lt;\u0026lt; OFFSET_BITS_OFFSET); return 0; } return -1; } 注意 set_Direction 和 set_Offset 的区别：\nset_Direction 直接使用掩码，因为它操作的是最低位 set_Offset 需要将掩码和新值左移，因为它操作的位不在最低位置 4.4 通用设置函数 #int set_Field(int\u0026amp; value, int new_field_value, int mask, int offset) { value = (value \u0026amp; ~(mask \u0026lt;\u0026lt; offset)) | (new_field_value \u0026lt;\u0026lt; offset); return 0; } 5. 在高频交易（HFT）系统中的应用 #高频交易系统对性能和延迟极其敏感，位操作在这里发挥着关键作用。\n5.1 订单编码 #在HFT系统中，订单信息需要快速处理和传输。使用位域可以将订单的多个属性打包到一个整数中：\n#define ORDER_TYPE_MASK 0x03 #define SIDE_MASK 0x04 #define QUANTITY_MASK 0xFFFFF8 #define PRICE_MASK 0xFFF00000 #define ORDER_TYPE_OFFSET 0 #define SIDE_OFFSET 2 #define QUANTITY_OFFSET 3 #define PRICE_OFFSET 20 typedef unsigned int OrderInfo; OrderInfo createOrder(unsigned char type, bool isBuy, unsigned int quantity, unsigned int price) { return (type \u0026amp; ORDER_TYPE_MASK) | ((isBuy ? 1 : 0) \u0026lt;\u0026lt; SIDE_OFFSET) | ((quantity \u0026amp; (QUANTITY_MASK \u0026gt;\u0026gt; QUANTITY_OFFSET)) \u0026lt;\u0026lt; QUANTITY_OFFSET) | ((price \u0026amp; (PRICE_MASK \u0026gt;\u0026gt; PRICE_OFFSET)) \u0026lt;\u0026lt; PRICE_OFFSET); } unsigned char getOrderType(OrderInfo order) { return order \u0026amp; ORDER_TYPE_MASK; } bool isBuyOrder(OrderInfo order) { return (order \u0026amp; SIDE_MASK) != 0; } unsigned int getQuantity(OrderInfo order) { return (order \u0026amp; QUANTITY_MASK) \u0026gt;\u0026gt; QUANTITY_OFFSET; } unsigned int getPrice(OrderInfo order) { return (order \u0026amp; PRICE_MASK) \u0026gt;\u0026gt; PRICE_OFFSET; } 5.2 市场数据压缩 #HFT系统需要处理大量的市场数据。使用位操作可以压缩数据，减少网络传输和存储需求：\nstruct CompressedQuote { unsigned long long timestamp : 48; // 微秒级时间戳 unsigned int symbol : 24; // 股票代码 unsigned int bidPrice : 32; // 买入价 unsigned int askPrice : 32; // 卖出价 unsigned int bidSize : 24; // 买入量 unsigned int askSize : 24; // 卖出量 unsigned int flags : 8; // 各种标志 }; 5.3 快速比较和匹配 #位操作可用于实现快速的订单匹配和比较：\nbool isMatchingOrder(OrderInfo order1, OrderInfo order2) { return (getOrderType(order1) == getOrderType(order2)) \u0026amp;\u0026amp; (isBuyOrder(order1) != isBuyOrder(order2)) \u0026amp;\u0026amp; ((isBuyOrder(order1) \u0026amp;\u0026amp; getPrice(order1) \u0026gt;= getPrice(order2)) || (!isBuyOrder(order1) \u0026amp;\u0026amp; getPrice(order1) \u0026lt;= getPrice(order2))); } 5.4 风险管理和合规检查 #位操作可以用于快速执行风险检查和合规验证：\n#define RISK_CHECK_MASK 0xF0000000 bool passesRiskCheck(OrderInfo order) { return (order \u0026amp; RISK_CHECK_MASK) == 0; } 5.5 性能优化 # 缓存友好：紧凑的数据表示有助于更好地利用CPU缓存。\nSIMD操作：某些位操作可以利用SIMD（单指令多数据）指令进行并行处理。\n// 使用SIMD指令并行处理多个订单 void processOrdersSIMD(OrderInfo* orders, int count) { // 使用 AVX2 指令集 __m256i orderVector = _mm256_loadu_si256((__m256i*)orders); __m256i typeMask = _mm256_set1_epi32(ORDER_TYPE_MASK); __m256i types = _mm256_and_si256(orderVector, typeMask); // 进一步处理... } 网络优化：压缩的数据格式减少了网络传输量，降低延迟。\n5.6 HFT系统中的注意事项 # 可读性 vs 性能：在HFT系统中，通常会牺牲一定的可读性来换取极致的性能。 正确性验证：由于位操作容易出错，需要严格的单元测试和集成测试。 文档和注释：详细的文档和注释对于维护这类高度优化的代码至关重要。 硬件考虑：某些位操作可能在特定硬件上更高效，需要针对目标平台优化。 6. 结论 #位操作和位域是强大的编程技术，在需要高性能和内存效率的场景中尤其有用。在高频交易系统中，这些技术能够显著提升数据处理速度、减少内存使用和网络延迟。然而，使用这些技术需要在性能、可读性和可维护性之间取得平衡。随着金融技术的不断发展，掌握和巧妙运用这些基础但强大的技术将继续在高性能计算领域，特别是在HFT系统中发挥重要作用。\n","date":"13 October 2024","permalink":"/blog/bit_field_compression/","section":"Blog","summary":"\u003ch2 id=\"1-基础概念\" class=\"relative group\"\u003e1. 基础概念 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"11-二进制表示\" class=\"relative group\"\u003e1.1 二进制表示 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#11-%e4%ba%8c%e8%bf%9b%e5%88%b6%e8%a1%a8%e7%a4%ba\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e计算机使用二进制（0和1）存储和处理数据\u003c/li\u003e\n\u003cli\u003e1 byte = 8 bits\u003c/li\u003e\n\u003cli\u003e32位整数可以表示从 0 到 2^32 - 1 的数值\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"12-位操作基础\" class=\"relative group\"\u003e1.2 位操作基础 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#12-%e4%bd%8d%e6%93%8d%e4%bd%9c%e5%9f%ba%e7%a1%80\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e与操作 (\u0026amp;): 两位都为1时结果为1，否则为0\u003c/li\u003e\n\u003cli\u003e或操作 (|): 至少一位为1时结果为1，否则为0\u003c/li\u003e\n\u003cli\u003e异或操作 (^): 两位不同时结果为1，相同时为0\u003c/li\u003e\n\u003cli\u003e非操作 (~): 将每一位取反\u003c/li\u003e\n\u003cli\u003e左移 (\u0026laquo;): 将所有位向左移动，右侧补0\u003c/li\u003e\n\u003cli\u003e右移 (\u0026raquo;): 将所有位向右移动，左侧补0或符号位\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e示例：\u003c/p\u003e","title":"高频交易系统中的位域压缩技术"},{"content":"1. 背景介绍 #在高频交易系统中，市场数据的快速读取和处理是关键性能指标之一。我们的系统使用共享内存来存储和访问实时市场数据，其中 MarketDataStore 类负责管理这些数据。本文将讨论如何优化 MarketDataStore 中的 readLatestData 函数，以提高数据读取的效率。\n2. 初始实现 #最初的 readLatestData 函数实现如下：\nstd::optional\u0026lt;MappedTickerData\u0026gt; MarketDataStore::readLatestData(const std::string\u0026amp; symbol) const { std::shared_lock\u0026lt;std::shared_mutex\u0026gt; lock(mutex); size_t offset = calculateOffset(symbol); MappedTickerData data; if (dataFile-\u0026gt;read(\u0026amp;data, offset, sizeof(MappedTickerData))) { if (data.timestamp != 0 \u0026amp;\u0026amp; std::string(data.product_id) == symbol) { return data; } else { LOG_WARN(\u0026#34;readLatestData symbol = {} failed\u0026#34;, symbol); return std::nullopt; } } else { LOG_ERROR(\u0026#34;Failed to read data for symbol = {}\u0026#34;, symbol); return std::nullopt; } } 这个实现存在几个性能瓶颈：\n使用共享锁可能导致并发读取的性能下降。 字符串比较效率低下，特别是创建临时 std::string 对象。 没有利用现代 CPU 的 SIMD 指令集。 3. 优化过程 #3.1 字符串比较优化 #首先，我们优化了字符串比较逻辑：\nstatic inline bool compareProductId(const char* product_id, const std::string\u0026amp; symbol) { size_t symbolLength = symbol.length(); if (symbolLength \u0026gt; sizeof(MappedTickerData::product_id) - 1) { return false; } if (memcmp(product_id, symbol.data(), symbolLength) != 0) { return false; } return product_id[symbolLength] == \u0026#39;\\0\u0026#39;; } 这个优化避免了创建临时字符串对象，并使用了更高效的 memcmp 函数。\n3.2 SIMD 指令优化 #为了进一步提高性能，我们引入了 SIMD 指令来并行化字符串比较：\nstatic inline bool compareProductIdSIMD(const char* product_id, const std::string\u0026amp; symbol) { size_t symbolLength = symbol.length(); if (symbolLength \u0026gt; 15) { return false; } __m128i prod_id = _mm_loadu_si128(reinterpret_cast\u0026lt;const __m128i*\u0026gt;(product_id)); char mask[16] = {0}; memcpy(mask, symbol.data(), symbolLength); __m128i symbol_mask = _mm_loadu_si128(reinterpret_cast\u0026lt;const __m128i*\u0026gt;(mask)); __m128i cmp_result = _mm_cmpeq_epi8(prod_id, symbol_mask); int match_mask = _mm_movemask_epi8(cmp_result); int should_match = (1 \u0026lt;\u0026lt; symbolLength) - 1; if ((match_mask \u0026amp; should_match) != should_match) { return false; } return (match_mask \u0026amp; (1 \u0026lt;\u0026lt; symbolLength)) != 0; } 这个实现利用 SSE 指令集同时比较 16 个字节，显著提高了比较速度。\n3.3 无锁读取 #考虑到 readLatestData 函数被频繁调用，我们探讨了使用无锁读取技术：\nstd::optional\u0026lt;MappedTickerData\u0026gt; MarketDataStore::readLatestData(const std::string\u0026amp; symbol) const { size_t offset = calculateOffset(symbol); MappedTickerData data; std::atomic_thread_fence(std::memory_order_acquire); memcpy(\u0026amp;data, static_cast\u0026lt;char*\u0026gt;(mappedMemory) + offset, sizeof(MappedTickerData)); std::atomic_thread_fence(std::memory_order_acquire); if (data.timestamp != 0 \u0026amp;\u0026amp; compareProductIdSIMD(data.product_id, symbol)) { return data; } return std::nullopt; } 这个版本移除了共享锁，使用内存屏障确保数据一致性。\n4. 最终优化版本 #综合以上优化，我们的最终版本如下：\nclass MarketDataStore { private: void* mappedMemory; size_t memorySize; std::unordered_map\u0026lt;std::string_view, size_t\u0026gt; symbolOffsets; static inline bool compareProductIdSIMD(const char* product_id, const std::string\u0026amp; symbol) { // SIMD 比较实现（如前所示） } public: inline std::optional\u0026lt;MappedTickerData\u0026gt; readLatestData(std::string_view symbol) const noexcept { auto it = symbolOffsets.find(symbol); if (it == symbolOffsets.end()) { return std::nullopt; } size_t offset = it-\u0026gt;second; if (offset + sizeof(MappedTickerData) \u0026gt; memorySize) { return std::nullopt; } MappedTickerData data; std::atomic_thread_fence(std::memory_order_acquire); memcpy(\u0026amp;data, static_cast\u0026lt;char*\u0026gt;(mappedMemory) + offset, sizeof(MappedTickerData)); std::atomic_thread_fence(std::memory_order_acquire); if (data.timestamp == 0) { return std::nullopt; } if (compareProductIdSIMD(data.product_id, std::string(symbol))) { return data; } return std::nullopt; } }; 5. 性能考虑和注意事项 # SIMD 指令：确保目标平台支持使用的 SIMD 指令集。 内存对齐：考虑将 MappedTickerData 结构体对齐到缓存线边界。 预计算偏移量：使用 symbolOffsets 哈希表预存储偏移量，避免重复计算。 无锁读取：在多线程环境中需要仔细考虑内存一致性问题。 字符串视图：使用 std::string_view 减少不必要的字符串拷贝。 6. 结论 #通过这一系列优化，我们显著提高了 MarketDataStore 的读取性能。主要改进包括：\n使用 SIMD 指令加速字符串比较 实现无锁读取减少线程竞争 优化内存访问模式提高缓存效率 这些优化对于高频交易系统的整体性能有重要影响。然而，在实际部署前，务必进行全面的基准测试和压力测试，以确保在实际工作负载下的性能提升。\n7. 未来工作 # 探索使用更高级的 SIMD 指令集（如 AVX-512）进一步优化。 实现自适应策略，根据数据特征动态选择最佳的比较方法。 考虑引入预取技术，进一步减少内存访问延迟。 持续监控和分析系统性能，识别新的优化机会。 ","date":"29 September 2024","permalink":"/blog/read/","section":"Blog","summary":"\u003ch2 id=\"1-背景介绍\" class=\"relative group\"\u003e1. 背景介绍 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-%e8%83%8c%e6%99%af%e4%bb%8b%e7%bb%8d\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e在高频交易系统中，市场数据的快速读取和处理是关键性能指标之一。我们的系统使用共享内存来存储和访问实时市场数据，其中 \u003ccode\u003eMarketDataStore\u003c/code\u003e 类负责管理这些数据。本文将讨论如何优化 \u003ccode\u003eMarketDataStore\u003c/code\u003e 中的 \u003ccode\u003ereadLatestData\u003c/code\u003e 函数，以提高数据读取的效率。\u003c/p\u003e\n\u003ch2 id=\"2-初始实现\" class=\"relative group\"\u003e2. 初始实现 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#2-%e5%88%9d%e5%a7%8b%e5%ae%9e%e7%8e%b0\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e最初的 \u003ccode\u003ereadLatestData\u003c/code\u003e 函数实现如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eoptional\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eMappedTickerData\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eMarketDataStore\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ereadLatestData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003esymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eshared_lock\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eshared_mutex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003eoffset\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecalculateOffset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eMappedTickerData\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edataFile\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eoffset\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMappedTickerData\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etimestamp\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eproduct_id\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003esymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eLOG_WARN\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;readLatestData symbol = {} failed\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullopt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eLOG_ERROR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Failed to read data for symbol = {}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullopt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个实现存在几个性能瓶颈：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e使用共享锁可能导致并发读取的性能下降。\u003c/li\u003e\n\u003cli\u003e字符串比较效率低下，特别是创建临时 \u003ccode\u003estd::string\u003c/code\u003e 对象。\u003c/li\u003e\n\u003cli\u003e没有利用现代 CPU 的 SIMD 指令集。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"3-优化过程\" class=\"relative group\"\u003e3. 优化过程 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#3-%e4%bc%98%e5%8c%96%e8%bf%87%e7%a8%8b\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"31-字符串比较优化\" class=\"relative group\"\u003e3.1 字符串比较优化 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#31-%e5%ad%97%e7%ac%a6%e4%b8%b2%e6%af%94%e8%be%83%e4%bc%98%e5%8c%96\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e首先，我们优化了字符串比较逻辑：\u003c/p\u003e","title":"高频交易系统中的市场数据存储优化"},{"content":"高频交易系统中的重连机制最佳实践 #背景 #在高频交易系统中，网络连接的稳定性至关重要。然而，由于网络波动或其他原因，连接可能会中断。为了确保系统的连续性和可靠性，需要实现一个高效的重连机制。然而，频繁的重连检查和处理可能导致重复重连，影响系统性能。\n问题描述 #在现有实现中，主循环频繁检查 m_client-\u0026gt;needsReconnection()，如果需要重连，则调用 handleReconnect()。然而，由于主循环速度很快，可能在 resetReconnectionFlag() 生效前再次检查 needsReconnection()，导致重复调用 handleReconnect()。\n解决方案 #通过使用原子操作和双重检查机制，确保重连过程的原子性和一致性，避免重复重连。\n1. 定义连接状态管理 #使用原子变量来管理连接状态，确保线程安全。\nclass WebSocketClient { private: std::atomic\u0026lt;bool\u0026gt; isReconnecting{false}; std::atomic\u0026lt;bool\u0026gt; needsReconnection{false}; public: bool needsReconnection() const { return needsReconnection.load(std::memory_order_acquire); } bool tryInitiateReconnection() { bool expected = false; return isReconnecting.compare_exchange_strong(expected, true, std::memory_order_acq_rel); } void setNeedsReconnection(bool value) { needsReconnection.store(value, std::memory_order_release); } void resetReconnectionFlag() { needsReconnection.store(false, std::memory_order_release); isReconnecting.store(false, std::memory_order_release); } }; 2. 修改主循环 #在主循环中使用双重检查机制，确保重连过程的原子性。\nvoid StrategyAndTrading::run() { initializeConnection(); marketDataReader-\u0026gt;start(); positionManager-\u0026gt;updatePositionsThread(); m_commonLib-\u0026gt;getConfigManager().configWatcher(); while (running_) { if (m_client-\u0026gt;needsReconnection() \u0026amp;\u0026amp; m_client-\u0026gt;tryInitiateReconnection()) { handleReconnect(); } // 执行其他高频交易逻辑 std::this_thread::sleep_for(std::chrono::microseconds(100)); // 微秒级的睡眠 } } 3. 实现重连处理 #确保重连过程的原子性和一致性。\nvoid StrategyAndTrading::handleReconnect() { LOG_INFO(\u0026#34;Initiating reconnection process\u0026#34;); int retryCount = 0; const int MAX_RETRIES = 3; while (retryCount \u0026lt; MAX_RETRIES) { LOG_INFO(\u0026#34;retryCount: {} RECONNECTING\u0026#34;, retryCount); if (establishConnection(true)) { LOG_INFO(\u0026#34;Reconnection successful\u0026#34;); m_client-\u0026gt;resetReconnectionFlag(); return; } retryCount++; LOG_WARN(\u0026#34;Reconnection attempt {} failed, retrying...\u0026#34;, retryCount); std::this_thread::sleep_for(std::chrono::seconds(5 * retryCount)); } LOG_ERROR(\u0026#34;Reconnection failed after {} attempts\u0026#34;, MAX_RETRIES); m_client-\u0026gt;setNeedsReconnection(true); // 保持重连需求 m_client-\u0026gt;resetReconnectionFlag(); // 允许下一次重连尝试 } 设计理由 # 原子操作：使用 std::atomic 确保线程安全，避免数据竞争。 双重检查：通过 needsReconnection() 和 tryInitiateReconnection() 的组合，避免重复进入重连流程。 状态一致性：resetReconnectionFlag() 同时重置两个标志，确保状态一致。 性能优化：主循环中的睡眠时间可以调整到微秒级，保持高响应性。 简单直接：相比复杂的多线程或状态机方案，这个解决方案更加直接地解决了您描述的问题。 可扩展性：这个设计易于扩展，可以添加更多的连接状态和相应的处理逻辑。 错误恢复：如果重连失败，系统会保持重连需求，允许在下一个循环中再次尝试。 compare_exchange_strong 的使用 #用法 #compare_exchange_strong 是 C++ 标准库中 std::atomic 提供的一种原子操作，用于实现无锁编程。它的作用是比较并交换（Compare and Swap, CAS），确保在多线程环境下对变量的更新是原子的。\n函数签名 #bool compare_exchange_strong(T\u0026amp; expected, T desired, std::memory_order order = std::memory_order_seq_cst) noexcept; 参数 # expected：一个引用，表示预期的旧值。如果当前值与 expected 相等，则将其更新为 desired，否则将当前值写入 expected。 desired：要设置的新值。 order：内存序（memory order），控制内存操作的顺序。常用的有 std::memory_order_acquire、std::memory_order_release 和 std::memory_order_acq_rel。 返回值 # 如果当前值与 expected 相等，则返回 true，并将当前值更新为 desired。 如果当前值与 expected 不相等，则返回 false，并将当前值写入 expected。 在新方案中的作用 #在新方案中，compare_exchange_strong 用于确保只有一个线程可以成功启动重连过程，避免多个线程同时进入重连过程。\n代码示例 #bool tryInitiateReconnection() { bool expected = false; return isReconnecting.compare_exchange_strong(expected, true, std::memory_order_acq_rel); } 解释 # 初始化 expected：expected 被初始化为 false，表示预期的旧值是 false。 调用 compare_exchange_strong： 如果 isReconnecting 当前值等于 expected（即 false），则将 isReconnecting 更新为 true，并返回 true。 如果 isReconnecting 当前值不等于 expected（即已经有其他线程将其设置为 true），则将 isReconnecting 的当前值写入 expected，并返回 false。 内存序 # std::memory_order_acq_rel：确保在获取和释放内存时的顺序性，保证在重连过程中对内存的访问是有序的。 具体应用 #在主循环中，通过 tryInitiateReconnection 方法来检查并启动重连过程：\nvoid StrategyAndTrading::run() { while (running_) { if (m_client-\u0026gt;needsReconnection() \u0026amp;\u0026amp; m_client-\u0026gt;tryInitiateReconnection()) { handleReconnect(); } std::this_thread::sleep_for(std::chrono::microseconds(100)); // 微秒级的睡眠 } } 解释 # 检查 needsReconnection：首先检查是否需要重连。 尝试启动重连：如果需要重连，调用 tryInitiateReconnection。 如果 tryInitiateReconnection 返回 true，表示当前线程成功启动了重连过程。 如果 tryInitiateReconnection 返回 false，表示已经有其他线程在进行重连，当前线程不需要重复启动重连过程。 实施注意事项 # 确保线程安全：所有涉及连接状态的操作都应是线程安全的。 调整睡眠时间：根据系统需求调整主循环中的睡眠时间，在响应性和系统负载之间找到平衡。 添加日志和监控：适当的日志记录和监控有助于跟踪重连过程和系统状态。 扩展性：可以根据需要在 WebSocketClient 中实现更复杂的状态管理逻辑，如处理部分连接、认证失败等状态。 总结 #通过这个最佳实践，您可以有效管理高频交易系统中的重连过程，避免重复重连，同时保持系统的高性能和可靠性。这个设计方案不仅解决了当前的问题，还为未来的扩展和维护提供了良好的基础。\n","date":"27 September 2024","permalink":"/blog/atom/","section":"Blog","summary":"\u003ch1 id=\"高频交易系统中的重连机制最佳实践\" class=\"relative group\"\u003e高频交易系统中的重连机制最佳实践 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e9%ab%98%e9%a2%91%e4%ba%a4%e6%98%93%e7%b3%bb%e7%bb%9f%e4%b8%ad%e7%9a%84%e9%87%8d%e8%bf%9e%e6%9c%ba%e5%88%b6%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e\u003ch2 id=\"背景\" class=\"relative group\"\u003e背景 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e8%83%8c%e6%99%af\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e在高频交易系统中，网络连接的稳定性至关重要。然而，由于网络波动或其他原因，连接可能会中断。为了确保系统的连续性和可靠性，需要实现一个高效的重连机制。然而，频繁的重连检查和处理可能导致重复重连，影响系统性能。\u003c/p\u003e\n\u003ch2 id=\"问题描述\" class=\"relative group\"\u003e问题描述 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e9%97%ae%e9%a2%98%e6%8f%8f%e8%bf%b0\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e在现有实现中，主循环频繁检查 \u003ccode\u003em_client-\u0026gt;needsReconnection()\u003c/code\u003e，如果需要重连，则调用 \u003ccode\u003ehandleReconnect()\u003c/code\u003e。然而，由于主循环速度很快，可能在 \u003ccode\u003eresetReconnectionFlag()\u003c/code\u003e 生效前再次检查 \u003ccode\u003eneedsReconnection()\u003c/code\u003e，导致重复调用 \u003ccode\u003ehandleReconnect()\u003c/code\u003e。\u003c/p\u003e\n\u003ch2 id=\"解决方案\" class=\"relative group\"\u003e解决方案 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e通过使用原子操作和双重检查机制，确保重连过程的原子性和一致性，避免重复重连。\u003c/p\u003e\n\u003ch3 id=\"1-定义连接状态管理\" class=\"relative group\"\u003e1. 定义连接状态管理 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-%e5%ae%9a%e4%b9%89%e8%bf%9e%e6%8e%a5%e7%8a%b6%e6%80%81%e7%ae%a1%e7%90%86\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e使用原子变量来管理连接状态，确保线程安全。\u003c/p\u003e","title":"高频交易系统中的重连机制最佳实践"},{"content":"1. 初始问题：数据读取效率 #最初，我们关注的是市场数据读取器本身的效率问题。\n1.1 轮询方式（初始状态） #void MarketDataReader::readingLoop() { while (running) { for (const auto\u0026amp; symbol : symbols_) { processSymbol(symbol); } std::this_thread::sleep_for(std::chrono::milliseconds(100)); } } 问题：持续轮询即使在没有新数据时也会消耗资源。\n1.2 条件控制方式 #void MarketDataReader::readingLoop() { while (running) { std::unique_lock\u0026lt;std::mutex\u0026gt; lock(conditionMutex); dataCondition.wait(lock, [this] { return !running || !symbols_.empty(); }); for (const auto\u0026amp; symbol : symbols_) { processSymbol(symbol); } } } 改进：减少了不必要的CPU使用，但可能会在高频数据更新时引入延迟。\n思考转变：这个阶段，我们主要关注如何提高单个组件（数据读取器）的效率。\n2. 扩展考虑：数据读取对其他系统组件的影响 #随着对系统的深入思考，我们开始考虑数据读取器的行为如何影响整个系统，特别是订单流的执行效率。\n2.1 资源竞争问题 #观察：尽管我们优化了数据读取器的效率，但数据读取线程占据太多的计算资源，也会进而影响订单处理的性能。即使在没有新数据可读时，频繁的检查也会占用宝贵的计算资源。\n思考：\n数据读取和订单处理是否在竞争同样的系统资源（CPU、内存、I/O）？ 如何在保证数据及时性的同时，不影响订单处理的响应速度？ 如何协调各个线程，使系统达到最低的时延？ 2.2 自适应间隔机制 #引入动态调整处理间隔的机制，以平衡数据读取和系统资源使用。\nvoid MarketDataReader::readingLoop() { while (running) { auto start = std::chrono::steady_clock::now(); for (const auto\u0026amp; symbol : symbols_) { processSymbol(symbol); } auto end = std::chrono::steady_clock::now(); auto duration = std::chrono::duration_cast\u0026lt;std::chrono::microseconds\u0026gt;(end - start); if (duration \u0026lt; currentInterval) { std::this_thread::sleep_for(currentInterval - duration); } adjustInterval(); } } 思考转变：从单纯的效率优化转向了资源使用的平衡，考虑到了系统的整体性能。\n3. 系统级优化：负载均衡 #随着对系统整体的思考，我们意识到需要从更高的层面来优化性能和资源分配。\n3.1 多线程数据读取 #将数据读取任务分散到多个线程，以提高并行处理能力。\nclass BalancedMarketDataReader { private: std::vector\u0026lt;std::thread\u0026gt; readerThreads; std::vector\u0026lt;std::vector\u0026lt;std::string\u0026gt;\u0026gt; symbolGroups; public: void start() { for (int i = 0; i \u0026lt; numThreads; ++i) { readerThreads.emplace_back(\u0026amp;BalancedMarketDataReader::readingLoop, this, i); } } }; 思考：如何最有效地分配交易品种给不同的线程，以平衡负载？\n3.2 动态负载均衡 #实现能够根据实时负载情况动态调整工作分配的机制。\nclass DynamicLoadBalancer { private: std::vector\u0026lt;std::atomic\u0026lt;int\u0026gt;\u0026gt; threadLoads; std::mutex symbolsMutex; std::vector\u0026lt;std::string\u0026gt; symbols; public: void balancerLoop() { while (running) { rebalanceLoad(); std::this_thread::sleep_for(std::chrono::seconds(10)); } } }; 思考：如何在数据读取和订单处理之间动态分配系统资源，以实现最佳的整体性能？\n3.3 工作窃取算法 #引入更复杂的负载均衡策略，允许空闲线程从繁忙线程\u0026quot;窃取\u0026quot;工作。\nclass WorkStealingBalancer { private: std::vector\u0026lt;std::unique_ptr\u0026lt;WorkStealingQueue\u0026gt;\u0026gt; queues; bool stealWork(int threadId) { for (size_t i = 0; i \u0026lt; queues.size(); ++i) { if (i == threadId) continue; std::string symbol; if (queues[i]-\u0026gt;steal(symbol)) { processSymbol(symbol); queues[threadId]-\u0026gt;push(symbol); return true; } } return false; } }; 思考转变：从单一组件的优化，发展到了整个系统的资源分配和负载均衡策略。\n思考过程的演进 # 局部到全局：从优化单一数据读取器的效率，扩展到考虑整个系统的性能平衡。 单线程到多线程：认识到多线程处理在提高系统整体吞吐量方面的重要性。 静态分配到动态平衡：从固定的处理策略，转向能够适应实时负载变化的动态系统。 资源使用的权衡：深入思考如何在关键组件（如数据读取和订单处理）之间合理分配资源。 性能指标的全面性：从仅关注数据读取的速度，扩展到考虑系统整体的响应时间、吞吐量和资源利用率。 跨组件影响的认识：理解到一个组件的优化可能会对其他组件产生意料之外的影响，需要从整体角度进行评估。 结论 #这个思考探究过程展示了如何从解决具体问题逐步扩展到系统层面的优化。它强调了在高频交易这样的复杂系统中，局部优化虽然重要，但必须放在整体系统性能和资源平衡的大背景下来考虑。\n这种思维方式的转变不仅适用于市场数据读取器的优化，也可以应用于其他复杂系统的性能优化过程。它提醒我们，在进行任何优化时，都需要考虑：\n这个优化如何影响系统的其他部分？ 我们是否在正确的层面上解决问题？ 局部的高效是否会导致全局的低效？ 如何设计一个能够适应变化和自我调节的系统？ 通过这样的思考过程，我们不仅解决了最初的数据读取效率问题，还提出了更全面、更有弹性的系统优化方案，为构建一个高性能、高可靠性的高频交易系统奠定了基础。\n","date":"25 September 2024","permalink":"/blog/datareader_design/","section":"Blog","summary":"\u003ch2 id=\"1-初始问题数据读取效率\" class=\"relative group\"\u003e1. 初始问题：数据读取效率 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-%e5%88%9d%e5%a7%8b%e9%97%ae%e9%a2%98%e6%95%b0%e6%8d%ae%e8%af%bb%e5%8f%96%e6%95%88%e7%8e%87\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e最初，我们关注的是市场数据读取器本身的效率问题。\u003c/p\u003e\n\u003ch3 id=\"11-轮询方式初始状态\" class=\"relative group\"\u003e1.1 轮询方式（初始状态） \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#11-%e8%bd%ae%e8%af%a2%e6%96%b9%e5%bc%8f%e5%88%9d%e5%a7%8b%e7%8a%b6%e6%80%81\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eMarketDataReader\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ereadingLoop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erunning\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"nl\"\u003esymbol\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esymbols_\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eprocessSymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ethis_thread\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esleep_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003echrono\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emilliseconds\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e问题：持续轮询即使在没有新数据时也会消耗资源。\u003c/p\u003e\n\u003ch3 id=\"12-条件控制方式\" class=\"relative group\"\u003e1.2 条件控制方式 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#12-%e6%9d%a1%e4%bb%b6%e6%8e%a7%e5%88%b6%e6%96%b9%e5%bc%8f\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eMarketDataReader\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ereadingLoop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erunning\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunique_lock\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econditionMutex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edataCondition\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewait\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003erunning\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003esymbols_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eempty\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"nl\"\u003esymbol\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esymbols_\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eprocessSymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esymbol\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e改进：减少了不必要的CPU使用，但可能会在高频数据更新时引入延迟。\u003c/p\u003e\n\u003cp\u003e思考转变：这个阶段，我们主要关注如何提高单个组件（数据读取器）的效率。\u003c/p\u003e\n\u003ch2 id=\"2-扩展考虑数据读取对其他系统组件的影响\" class=\"relative group\"\u003e2. 扩展考虑：数据读取对其他系统组件的影响 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#2-%e6%89%a9%e5%b1%95%e8%80%83%e8%99%91%e6%95%b0%e6%8d%ae%e8%af%bb%e5%8f%96%e5%af%b9%e5%85%b6%e4%bb%96%e7%b3%bb%e7%bb%9f%e7%bb%84%e4%bb%b6%e7%9a%84%e5%bd%b1%e5%93%8d\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e随着对系统的深入思考，我们开始考虑数据读取器的行为如何影响整个系统，特别是订单流的执行效率。\u003c/p\u003e","title":"高频交易系统优化：从数据读取到系统平衡的思考过程"},{"content":"高性能低延迟交易系统设计：技术分享 update #在高频交易和实时金融系统中，性能和延迟是关键因素。本文将分享一些设计和实现高性能低延迟交易系统的关键技术和策略。\n1. 数据结构优化 #1.1 内存映射（Memory-Mapped）文件 #使用内存映射文件可以显著提高I/O性能，减少系统调用，并允许快速的进程间通信。\nclass MmapOrderBook { // 使用内存映射文件存储订单簿数据 }; 1.2 自定义内存池 #实现自定义内存池可以减少内存分配和释放的开销，提高内存使用效率。\ntemplate\u0026lt;typename T, size_t MaxSize\u0026gt; class MemoryPool { // 实现高效的内存分配和回收 }; 2. 并发控制 #2.1 细粒度锁 #使用细粒度锁可以减少锁竞争，提高并发性能。\nstd::array\u0026lt;std::shared_mutex, MAX_POSITIONS\u0026gt; m_positionMutexes; 2.2 无锁数据结构 #在关键路径上使用无锁数据结构可以进一步减少同步开销。\nstd::atomic\u0026lt;double\u0026gt; quantity; std::atomic\u0026lt;double\u0026gt; averagePrice; 3. 高效的更新策略 #3.1 增量更新 vs 全量更新 #根据具体场景选择合适的更新策略。增量更新适合频繁的小幅度变化，全量更新适合大幅度变化或定期同步。\nvoid updatePosition(const char* instId, AssetType type, PositionSide side, double quantityDelta, double price); void syncPositionWithExchange(const char* instId, AssetType type, PositionSide side, double quantity, double price); 3.2 原子操作 #使用原子操作可以在不使用锁的情况下实现线程安全的更新。\natomicUpdate(positionPtr-\u0026gt;averagePrice, [newQuantity, quantityDelta, price](double oldAvgPrice) { return (oldAvgPrice * (newQuantity - quantityDelta) + price * quantityDelta) / newQuantity; }); 4. 代码优化 #4.1 内联函数 #使用内联函数可以减少函数调用开销。\ninline void updateAvailable(double delta) { available.fetch_add(delta, std::memory_order_relaxed); } 4.2 分支预测优化 #减少难以预测的分支，利用现代CPU的分支预测功能。\n// 避免复杂的嵌套条件判断 if (type == AssetType::SPOT) { // SPOT 逻辑 } else { // 其他类型逻辑 } 5. 系统架构 #5.1 职责分离 #将不同功能模块分离，如将订单管理和持仓管理分开，可以提高系统的可维护性和可扩展性。\nclass OrderManager { /* ... */ }; class PositionManager { /* ... */ }; 5.2 最小化跨模块调用 #减少模块间的频繁调用，可以降低系统复杂度和延迟。\n6. 性能监控和日志 #6.1 高效日志 #使用异步日志和日志级别控制，确保日志不会成为性能瓶颈。\nLOG_INFO(\u0026#34;Position updated: instId={}, type={}, side={}\u0026#34;, instId, static_cast\u0026lt;int\u0026gt;(type), static_cast\u0026lt;int\u0026gt;(side)); 6.2 性能指标监控 #实时监控关键性能指标，如更新延迟、吞吐量等，以便及时发现和解决性能问题。\n结论 #构建高性能低延迟的交易系统需要在多个层面进行优化，包括数据结构、并发控制、更新策略、代码优化和系统架构等。通过综合运用这些技术，可以显著提升系统的性能和响应速度，满足高频交易和实时金融系统的严格要求。\n","date":"20 September 2024","permalink":"/blog/high_performance/","section":"Blog","summary":"\u003ch1 id=\"高性能低延迟交易系统设计技术分享-update\" class=\"relative group\"\u003e高性能低延迟交易系统设计：技术分享 update \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e9%ab%98%e6%80%a7%e8%83%bd%e4%bd%8e%e5%bb%b6%e8%bf%9f%e4%ba%a4%e6%98%93%e7%b3%bb%e7%bb%9f%e8%ae%be%e8%ae%a1%e6%8a%80%e6%9c%af%e5%88%86%e4%ba%ab-update\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e\u003cp\u003e在高频交易和实时金融系统中，性能和延迟是关键因素。本文将分享一些设计和实现高性能低延迟交易系统的关键技术和策略。\u003c/p\u003e\n\u003ch2 id=\"1-数据结构优化\" class=\"relative group\"\u003e1. 数据结构优化 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e4%bc%98%e5%8c%96\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"11-内存映射memory-mapped文件\" class=\"relative group\"\u003e1.1 内存映射（Memory-Mapped）文件 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#11-%e5%86%85%e5%ad%98%e6%98%a0%e5%b0%84memory-mapped%e6%96%87%e4%bb%b6\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e使用内存映射文件可以显著提高I/O性能，减少系统调用，并允许快速的进程间通信。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMmapOrderBook\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 使用内存映射文件存储订单簿数据\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"12-自定义内存池\" class=\"relative group\"\u003e1.2 自定义内存池 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#12-%e8%87%aa%e5%ae%9a%e4%b9%89%e5%86%85%e5%ad%98%e6%b1%a0\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e实现自定义内存池可以减少内存分配和释放的开销，提高内存使用效率。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003eMaxSize\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMemoryPool\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 实现高效的内存分配和回收\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"2-并发控制\" class=\"relative group\"\u003e2. 并发控制 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#2-%e5%b9%b6%e5%8f%91%e6%8e%a7%e5%88%b6\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"21-细粒度锁\" class=\"relative group\"\u003e2.1 细粒度锁 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#21-%e7%bb%86%e7%b2%92%e5%ba%a6%e9%94%81\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e使用细粒度锁可以减少锁竞争，提高并发性能。\u003c/p\u003e","title":"实现高性能低延迟的交易系统设计"},{"content":"在高频交易系统的开发中，我们经常面临着性能和正确性之间的权衡。最近，我们在优化订单处理流程时，发现了一个有趣的问题：是否需要在高层组件中实现锁定？本文将深入探讨这个问题，分析其必要性，并展示优化前后的实现。\n背景 我们的系统主要由以下组件构成：\nMmapOrderBook：核心数据存储，使用内存映射文件实现 PositionManager：负责仓位管理 OrderValidator：负责订单验证 OrderManager：负责订单处理流程 最初，我们的实现如下：\n// OrderManager.cpp bool OrderManager::processOrder(const MmapOrderBook::Order\u0026amp; order) { if (!orderValidator_-\u0026gt;validateOrder(order)) { return false; } if (orderBook_-\u0026gt;addOrder(order)) { auto position = positionManager_-\u0026gt;getPosition(order.accountId, /* instrumentId */); if (position) { position-\u0026gt;quantity += order.isBuy ? order.quantity : -order.quantity; positionManager_-\u0026gt;updatePosition(*position); } // 发布订单已处理事件 return true; } return false; } 问题分析 虽然 MmapOrderBook 内部使用了分片锁来保证单个操作的线程安全，但我们发现这种方法在处理复合操作时可能存在问题。主要原因如下：\na) 复合操作的原子性： processOrder 方法包含多个相关操作（验证、添加、更新仓位），这些操作需要作为一个原子单元执行。\nb) 避免竞态条件： 在验证订单和添加订单之间，系统状态可能发生变化，导致基于过时信息做出决策。\nc) 保持不变量： 某些业务逻辑依赖于多个相关数据的一致状态，需要在整个操作过程中维护这些不变量。\nd) 简化并发模型： 高层锁定可以简化并发模型，使代码更易于理解和维护。\ne) 防止死锁： 复杂操作中可能需要获取多个低层锁，增加死锁风险。高层锁可以降低这种风险。\n优化后的实现 考虑到上述因素，我们决定在 OrderManager 和 PositionManager 中引入高层锁定：\n// OrderManager.h class OrderManager { public: bool processOrder(const MmapOrderBook::Order\u0026amp; order); private: std::shared_ptr\u0026lt;MmapOrderBook\u0026gt; orderBook_; std::shared_ptr\u0026lt;PositionManager\u0026gt; positionManager_; std::shared_ptr\u0026lt;OrderValidator\u0026gt; orderValidator_; mutable std::shared_mutex mutex_; // 新增：读写锁 }; // OrderManager.cpp bool OrderManager::processOrder(const MmapOrderBook::Order\u0026amp; order) { std::unique_lock\u0026lt;std::shared_mutex\u0026gt; lock(mutex_); // 写锁 if (!orderValidator_-\u0026gt;validateOrder(order)) { return false; } if (orderBook_-\u0026gt;addOrder(order)) { auto position = positionManager_-\u0026gt;getPosition(order.accountId, /* instrumentId */); if (position) { position-\u0026gt;quantity += order.isBuy ? order.quantity : -order.quantity; positionManager_-\u0026gt;updatePosition(*position); } // 发布订单已处理事件 return true; } return false; } // PositionManager.h class PositionManager { public: bool updatePosition(const MmapOrderBook::Position\u0026amp; position); std::optional\u0026lt;MmapOrderBook::Position\u0026gt; getPosition(int64_t accountId, int64_t instrumentId) const; private: std::shared_ptr\u0026lt;MmapOrderBook\u0026gt; orderBook_; mutable std::shared_mutex mutex_; // 新增：读写锁 }; // PositionManager.cpp bool PositionManager::updatePosition(const MmapOrderBook::Position\u0026amp; position) { std::unique_lock\u0026lt;std::shared_mutex\u0026gt; lock(mutex_); // 写锁 return orderBook_-\u0026gt;updatePosition(position); } std::optional\u0026lt;MmapOrderBook::Position\u0026gt; PositionManager::getPosition(int64_t accountId, int64_t instrumentId) const { std::shared_lock\u0026lt;std::shared_mutex\u0026gt; lock(mutex_); // 读锁 return orderBook_-\u0026gt;getPosition(accountId, instrumentId); } 优化效果 通过引入高层锁定，我们实现了以下目标：\n确保了复合操作的原子性 消除了潜在的竞态条件 简化了并发模型，使代码更易维护 降低了死锁风险 注意事项 尽管高层锁定解决了许多问题，但它也带来了一些潜在的挑战：\n性能影响：高层锁可能会降低并发性，因为它们tend会持锁时间更长。 可能的过度序列化：如果锁的范围过大，可能会导致一些本可以并行的操作被不必要地序列化。 潜在的资源浪费：如果锁覆盖了太多不相关的操作，可能会造成资源的浪费。 未来优化方向 为了进一步提高系统性能，我们可以考虑以下优化方向：\n实现轻量级事务机制，允许将多个操作组合成原子单元，而不需要持有锁那么长时间。 尝试在较低层次上实现更细粒度的锁，只在绝对必要的地方使用高层锁。 考虑使用乐观并发控制，使用版本号或时间戳来检测并发修改。 对特定操作使用无锁算法来提高并发性。 进一步优化读写分离，允许更多的读操作并发进行。 结论：\n在高频交易系统中，高层组件的锁定策略对于保证数据一致性和系统正确性至关重要。通过仔细权衡和设计，我们可以在保证正确性的同时，尽可能地提高系统性能。本次优化是我们持续改进过程中的一个重要步骤，我们将继续监控系统性能，并在实践中寻找最佳的平衡点。\n","date":"18 September 2024","permalink":"/blog/mutex/","section":"Blog","summary":"\u003cp\u003e在高频交易系统的开发中，我们经常面临着性能和正确性之间的权衡。最近，我们在优化订单处理流程时，发现了一个有趣的问题：是否需要在高层组件中实现锁定？本文将深入探讨这个问题，分析其必要性，并展示优化前后的实现。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e背景\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e我们的系统主要由以下组件构成：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMmapOrderBook：核心数据存储，使用内存映射文件实现\u003c/li\u003e\n\u003cli\u003ePositionManager：负责仓位管理\u003c/li\u003e\n\u003cli\u003eOrderValidator：负责订单验证\u003c/li\u003e\n\u003cli\u003eOrderManager：负责订单处理流程\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e最初，我们的实现如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// OrderManager.cpp\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eOrderManager\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eprocessOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eMmapOrderBook\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eOrder\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eorderValidator_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003evalidateOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorderBook_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eaddOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eposition\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epositionManager_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egetPosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccountId\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* instrumentId */\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003equantity\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisBuy\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nl\"\u003equantity\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equantity\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003epositionManager_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eupdatePosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 发布订单已处理事件\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e问题分析\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e虽然 MmapOrderBook 内部使用了分片锁来保证单个操作的线程安全，但我们发现这种方法在处理复合操作时可能存在问题。主要原因如下：\u003c/p\u003e\n\u003cp\u003ea) 复合操作的原子性：\nprocessOrder 方法包含多个相关操作（验证、添加、更新仓位），这些操作需要作为一个原子单元执行。\u003c/p\u003e\n\u003cp\u003eb) 避免竞态条件：\n在验证订单和添加订单之间，系统状态可能发生变化，导致基于过时信息做出决策。\u003c/p\u003e\n\u003cp\u003ec) 保持不变量：\n某些业务逻辑依赖于多个相关数据的一致状态，需要在整个操作过程中维护这些不变量。\u003c/p\u003e\n\u003cp\u003ed) 简化并发模型：\n高层锁定可以简化并发模型，使代码更易于理解和维护。\u003c/p\u003e\n\u003cp\u003ee) 防止死锁：\n复杂操作中可能需要获取多个低层锁，增加死锁风险。高层锁可以降低这种风险。\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e优化后的实现\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e考虑到上述因素，我们决定在 OrderManager 和 PositionManager 中引入高层锁定：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// OrderManager.h\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eOrderManager\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eprocessOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eMmapOrderBook\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eOrder\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eprivate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eshared_ptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eMmapOrderBook\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eorderBook_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eshared_ptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ePositionManager\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epositionManager_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eshared_ptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eOrderValidator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eorderValidator_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emutable\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eshared_mutex\u003c/span\u003e \u003cspan class=\"n\"\u003emutex_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 新增：读写锁\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// OrderManager.cpp\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eOrderManager\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eprocessOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eMmapOrderBook\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eOrder\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunique_lock\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eshared_mutex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emutex_\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 写锁\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eorderValidator_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003evalidateOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorderBook_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eaddOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eposition\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epositionManager_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egetPosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eaccountId\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* instrumentId */\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003equantity\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisBuy\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nl\"\u003equantity\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eorder\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equantity\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003epositionManager_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eupdatePosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 发布订单已处理事件\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// PositionManager.h\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePositionManager\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eupdatePosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eMmapOrderBook\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ePosition\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eoptional\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eMmapOrderBook\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ePosition\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003egetPosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint64_t\u003c/span\u003e \u003cspan class=\"n\"\u003eaccountId\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint64_t\u003c/span\u003e \u003cspan class=\"n\"\u003einstrumentId\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eprivate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eshared_ptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eMmapOrderBook\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eorderBook_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003emutable\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eshared_mutex\u003c/span\u003e \u003cspan class=\"n\"\u003emutex_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 新增：读写锁\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// PositionManager.cpp\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003ePositionManager\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eupdatePosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eMmapOrderBook\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ePosition\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunique_lock\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eshared_mutex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emutex_\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 写锁\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eorderBook_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eupdatePosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eoptional\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eMmapOrderBook\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ePosition\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ePositionManager\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003egetPosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint64_t\u003c/span\u003e \u003cspan class=\"n\"\u003eaccountId\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint64_t\u003c/span\u003e \u003cspan class=\"n\"\u003einstrumentId\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eshared_lock\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eshared_mutex\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elock\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emutex_\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 读锁\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eorderBook_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egetPosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaccountId\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einstrumentId\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e优化效果\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e通过引入高层锁定，我们实现了以下目标：\u003c/p\u003e","title":"高频交易系统中的高层锁定：必要性与实现"},{"content":"高频交易系统优化：从WebSocket到市场数据处理的全面解析 #在当今竞争激烈的金融市场中,高频交易(HFT)系统的性能直接关系到交易策略的成功与否。本文将深入探讨高频交易系统中两个关键环节的优化：WebSocket消息接收机制和市场数据处理。我们将分析当前最佳实践,探讨潜在的优化方向,并提供具体的代码示例。\n1. WebSocket消息接收机制优化 #在高频交易系统中,每一毫秒的延迟都可能导致巨大的经济损失。因此,优化WebSocket消息的接收机制对于系统的整体性能至关重要。\n1.1 WebSocketClient类设计与实现 #以下是一个高效的WebSocketClient类的实现示例：\nclass WebSocketClient { public: using MessageHandler = std::function\u0026lt;void(const char*, size_t)\u0026gt;; WebSocketClient(/* 构造函数参数 */) : ws_(nullptr), running_(false) {} void receiveMessages(MessageHandler handler) { if (!ws_) { throw std::runtime_error(\u0026#34;WebSocket is not connected\u0026#34;); } constexpr size_t BUFFER_SIZE = 1024 * 1024; // 1MB buffer std::array\u0026lt;char, BUFFER_SIZE\u0026gt; buffer; int flags; while (running_) { try { int n = ws_-\u0026gt;receiveFrame(buffer.data(), buffer.size(), flags); if (n \u0026gt; 0) { handler(buffer.data(), n); } else if (n == 0) { // 连接关闭 break; } } catch (const Poco::Exception\u0026amp; e) { // 仅在关键错误时记录日志 // 考虑添加重连逻辑 } } } void start() { running_ = true; } void stop() { running_ = false; } private: std::unique_ptr\u0026lt;Poco::Net::WebSocket\u0026gt; ws_; std::atomic\u0026lt;bool\u0026gt; running_; }; 1.2 关键优化点 # 大缓冲区: 使用1MB的缓冲区大幅减少系统调用次数,提高吞吐量。 零拷贝接口: 通过MessageHandler直接传递原始数据指针和长度,避免不必要的内存拷贝。 简化的错误处理: 只在关键错误时记录日志,减少正常操作中的开销。 原子操作控制: 使用std::atomic\u0026lt;bool\u0026gt;安全地控制接收循环。 1.3 在Quote进程中的应用 #在Quote进程中,我们直接在主线程中处理WebSocket消息,以最小化延迟：\nclass QuoteApplication { public: QuoteApplication() : running_(false) { initializeWebSocket(); } void run() { running_ = true; webSocketClient_-\u0026gt;start(); webSocketClient_-\u0026gt;receiveMessages([this](const char* data, size_t length) { this-\u0026gt;handleQuoteMessage(data, length); }); } void stop() { running_ = false; webSocketClient_-\u0026gt;stop(); } private: void initializeWebSocket() { webSocketClient_ = std::make_unique\u0026lt;WebSocketClient\u0026gt;(/* 参数 */); // 配置WebSocket连接 } void handleQuoteMessage(const char* data, size_t length) { // 处理接收到的市场数据 // 例如:解析JSON,更新共享内存等 } std::atomic\u0026lt;bool\u0026gt; running_; std::unique_ptr\u0026lt;WebSocketClient\u0026gt; webSocketClient_; }; 1.4 在StrategyAndTrading进程中的应用 #在StrategyAndTrading进程中,我们使用独立的线程来处理WebSocket消息,以避免阻塞主要的策略执行逻辑：\nclass MessageHandler { public: MessageHandler() : running_(false) {} void start() { if (receiveThread_.joinable()) { throw std::runtime_error(\u0026#34;Receive thread is already running\u0026#34;); } running_ = true; webSocketClient_-\u0026gt;start(); receiveThread_ = std::thread([this]() { webSocketClient_-\u0026gt;receiveMessages([this](const char* data, size_t length) { this-\u0026gt;handleMessage(data, length); }); }); } void stop() { running_ = false; webSocketClient_-\u0026gt;stop(); if (receiveThread_.joinable()) { receiveThread_.join(); } } private: void handleMessage(const char* data, size_t length) { // 处理接收到的消息 // 例如:解析JSON,更新订单状态等 } std::atomic\u0026lt;bool\u0026gt; running_; std::unique_ptr\u0026lt;WebSocketClient\u0026gt; webSocketClient_; std::thread receiveThread_; }; 2. 市场数据处理优化 #在获取交易所市场数据时,传统的队列方法可能不是最佳选择。让我们分析使用队列的利弊,并探讨更适合高频交易系统的替代方案。\n2.1 使用队列的劣势 # 额外延迟: 队列操作引入的延迟在HFT中可能造成显著影响。 内存开销: 额外的内存分配可能导致缓存未命中,进一步增加延迟。 上下文切换: 多线程环境中的频繁上下文切换增加系统开销。 顺序处理限制: FIFO处理可能不适合需要优先处理某些关键数据的场景。 潜在的锁竞争: 高并发情况下,队列可能成为竞争热点。 2.2 替代方案 #2.2.1 无锁环形缓冲区 (Lock-free Ring Buffer) #template\u0026lt;typename T, size_t Size\u0026gt; class LockFreeRingBuffer { private: std::array\u0026lt;T, Size\u0026gt; buffer_; std::atomic\u0026lt;size_t\u0026gt; head_{0}; std::atomic\u0026lt;size_t\u0026gt; tail_{0}; public: bool push(const T\u0026amp; item) { size_t current_tail = tail_.load(std::memory_order_relaxed); size_t next_tail = (current_tail + 1) % Size; if (next_tail == head_.load(std::memory_order_acquire)) return false; // Buffer is full buffer_[current_tail] = item; tail_.store(next_tail, std::memory_order_release); return true; } bool pop(T\u0026amp; item) { size_t current_head = head_.load(std::memory_order_relaxed); if (current_head == tail_.load(std::memory_order_acquire)) return false; // Buffer is empty item = buffer_[current_head]; head_.store((current_head + 1) % Size, std::memory_order_release); return true; } }; 这种方法可以显著减少锁竞争,降低延迟。\n2.2.2 直接处理模型 #class MarketDataHandler { public: void onMarketData(const MarketData\u0026amp; data) { // 直接处理市场数据 processData(data); } private: void processData(const MarketData\u0026amp; data) { // 实现数据处理逻辑 } }; 直接在回调函数中处理数据,避免了队列带来的额外开销。\n2.2.3 内存映射文件与共享内存 #class SharedMemoryManager { public: SharedMemoryManager(const std::string\u0026amp; name, size_t size) : shm_object_(boost::interprocess::open_or_create, name.c_str(), size) , region_(shm_object_.get_address(), shm_object_.get_size()) {} void writeMarketData(const MarketData\u0026amp; data) { // 写入共享内存 } MarketData readMarketData() { // 从共享内存读取 } private: boost::interprocess::shared_memory_object shm_object_; boost::interprocess::mapped_region region_; }; 使用共享内存可以实现极低延迟的进程间通信。\n3. 性能考量与未来优化方向 #3.1 当前实现的优势 # 低延迟: 通过最小化内存拷贝和系统调用,实现了低延迟的消息处理。 高吞吐量: 大缓冲区设计允许系统在高频率的消息流中保持稳定性。 灵活性: 同一个WebSocketClient类可以在不同的进程中以不同的方式使用。 无锁设计: 使用无锁数据结构减少了线程竞争,提高了并发性能。 3.2 潜在的优化方向 # 内存池: 实现自定义的内存分配器,进一步减少动态内存分配的开销。 SIMD指令: 利用现代CPU的SIMD指令集加速数据处理。 硬件加速: 探索使用FPGA或GPU加速特定的消息处理任务。 网络优化: 考虑使用内核旁路技术如DPDK,进一步减少网络延迟。 机器学习优化: 使用机器学习技术预测市场数据变化,优化处理流程。 4. 结论与建议 #高频交易系统的性能优化是一个持续的过程,需要从多个层面进行考虑和改进。基于我们的分析,以下是一些关键建议：\n采用零拷贝设计: 在整个数据处理流程中,尽可能减少数据拷贝操作。\n使用无锁数据结构: 在高并发场景中,无锁数据结构可以显著提高性能。\n直接处理模型: 对于关键路径,考虑使用直接处理模型而非队列缓冲。\n混合策略: 根据不同数据流的重要性和处理要求,采用不同的处理策略。\n持续监控与优化: 实施严格的性能监控,并根据实时数据持续优化系统。\n考虑硬件因素: 在软件优化的基础上,探索硬件加速的可能性。\n保持简洁: 在追求极致性能的同时,保持系统设计的简洁性和可维护性。\n在高频交易的世界中,毫秒级甚至微秒级的优化可能带来显著的竞争优势。通过精心设计的WebSocket客户端、高效的市场数据处理机制,以及不断的性能调优,我们可以构建出反应迅速、高度可靠的高频交易系统。然而,优化是一个永无止境的过程。随着技术的发展和市场的变化,我们需要不断评估和改进我们的实现,以保持系统的竞争力。\n在这个瞬息万变的金融科技领域,唯有持续学习和创新,才能在激烈的市场竞争中立于不败之地。\n","date":"15 September 2024","permalink":"/blog/queue_usage2/","section":"Blog","summary":"\u003ch1 id=\"高频交易系统优化从websocket到市场数据处理的全面解析\" class=\"relative group\"\u003e高频交易系统优化：从WebSocket到市场数据处理的全面解析 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e9%ab%98%e9%a2%91%e4%ba%a4%e6%98%93%e7%b3%bb%e7%bb%9f%e4%bc%98%e5%8c%96%e4%bb%8ewebsocket%e5%88%b0%e5%b8%82%e5%9c%ba%e6%95%b0%e6%8d%ae%e5%a4%84%e7%90%86%e7%9a%84%e5%85%a8%e9%9d%a2%e8%a7%a3%e6%9e%90\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e\u003cp\u003e在当今竞争激烈的金融市场中,高频交易(HFT)系统的性能直接关系到交易策略的成功与否。本文将深入探讨高频交易系统中两个关键环节的优化：WebSocket消息接收机制和市场数据处理。我们将分析当前最佳实践,探讨潜在的优化方向,并提供具体的代码示例。\u003c/p\u003e\n\u003ch2 id=\"1-websocket消息接收机制优化\" class=\"relative group\"\u003e1. WebSocket消息接收机制优化 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-websocket%e6%b6%88%e6%81%af%e6%8e%a5%e6%94%b6%e6%9c%ba%e5%88%b6%e4%bc%98%e5%8c%96\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e在高频交易系统中,每一毫秒的延迟都可能导致巨大的经济损失。因此,优化WebSocket消息的接收机制对于系统的整体性能至关重要。\u003c/p\u003e\n\u003ch3 id=\"11-websocketclient类设计与实现\" class=\"relative group\"\u003e1.1 WebSocketClient类设计与实现 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#11-websocketclient%e7%b1%bb%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%ae%9e%e7%8e%b0\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e以下是一个高效的WebSocketClient类的实现示例：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eWebSocketClient\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eMessageHandler\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003efunction\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eWebSocketClient\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"cm\"\u003e/* 构造函数参数 */\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ews_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003erunning_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ereceiveMessages\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMessageHandler\u003c/span\u003e \u003cspan class=\"n\"\u003ehandler\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003ews_\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eruntime_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;WebSocket is not connected\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003eBUFFER_SIZE\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1024\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e1024\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 1MB buffer\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eBUFFER_SIZE\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ebuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erunning_\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ews_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ereceiveFrame\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003ebuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"n\"\u003ehandler\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuffer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"c1\"\u003e// 连接关闭\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e                    \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ePoco\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"c1\"\u003e// 仅在关键错误时记录日志\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e                \u003cspan class=\"c1\"\u003e// 考虑添加重连逻辑\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003erunning_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003estop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003erunning_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eprivate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunique_ptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ePoco\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eNet\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eWebSocket\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ews_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eatomic\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003erunning_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"12-关键优化点\" class=\"relative group\"\u003e1.2 关键优化点 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#12-%e5%85%b3%e9%94%ae%e4%bc%98%e5%8c%96%e7%82%b9\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e大缓冲区\u003c/strong\u003e: 使用1MB的缓冲区大幅减少系统调用次数,提高吞吐量。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e零拷贝接口\u003c/strong\u003e: 通过\u003ccode\u003eMessageHandler\u003c/code\u003e直接传递原始数据指针和长度,避免不必要的内存拷贝。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e简化的错误处理\u003c/strong\u003e: 只在关键错误时记录日志,减少正常操作中的开销。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e原子操作控制\u003c/strong\u003e: 使用\u003ccode\u003estd::atomic\u0026lt;bool\u0026gt;\u003c/code\u003e安全地控制接收循环。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"13-在quote进程中的应用\" class=\"relative group\"\u003e1.3 在Quote进程中的应用 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#13-%e5%9c%a8quote%e8%bf%9b%e7%a8%8b%e4%b8%ad%e7%9a%84%e5%ba%94%e7%94%a8\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e在Quote进程中,我们直接在主线程中处理WebSocket消息,以最小化延迟：\u003c/p\u003e","title":"高频交易系统优化：从WebSocket到市场数据处理的全面解析"},{"content":"高频交易系统中市场数据处理：队列的利弊分析 #在高频交易（HFT）系统中，处理市场数据的方式直接影响着系统的性能和延迟。使用队列是一种常见的数据处理方法，但在追求极低延迟的HFT系统中，这种选择是否合适需要仔细考虑。本文将分析使用队列的利弊，并探讨可能的替代方案。\n1. 使用队列的优势 # 解耦和缓冲：队列可以有效地解耦数据生产者（如市场数据源）和消费者（如策略引擎），提供一个缓冲区来处理突发的数据流。\n负载均衡：在多线程处理中，队列可以帮助分配工作负载，防止某个处理单元过载。\n简化设计：队列提供了一个直观的数据流模型，可以简化系统的整体设计。\n容错性：队列可以帮助系统更好地处理暂时的处理速度不匹配，增强系统的稳定性。\n2. 使用队列的劣势 # 额外延迟：队列操作（入队和出队）会引入额外的延迟，即使是几微秒的延迟在HFT中也可能造成显著影响。\n内存开销：队列需要额外的内存分配，这可能导致缓存未命中，进一步增加延迟。\n上下文切换：在多线程环境中，队列操作可能导致频繁的上下文切换，增加系统开销。\n顺序处理限制：队列通常按FIFO顺序处理数据，这可能不适合需要优先处理某些关键数据的场景。\n潜在的锁竞争：在高并发情况下，队列可能成为竞争热点，导致性能下降。\n3. 替代方案 #考虑到队列可能引入的延迟，以下是一些可能的替代方案：\n3.1 无锁环形缓冲区（Lock-free Ring Buffer） #template\u0026lt;typename T, size_t Size\u0026gt; class LockFreeRingBuffer { private: std::array\u0026lt;T, Size\u0026gt; buffer_; std::atomic\u0026lt;size_t\u0026gt; head_{0}; std::atomic\u0026lt;size_t\u0026gt; tail_{0}; public: bool push(const T\u0026amp; item) { size_t current_tail = tail_.load(std::memory_order_relaxed); size_t next_tail = (current_tail + 1) % Size; if (next_tail == head_.load(std::memory_order_acquire)) return false; // Buffer is full buffer_[current_tail] = item; tail_.store(next_tail, std::memory_order_release); return true; } bool pop(T\u0026amp; item) { size_t current_head = head_.load(std::memory_order_relaxed); if (current_head == tail_.load(std::memory_order_acquire)) return false; // Buffer is empty item = buffer_[current_head]; head_.store((current_head + 1) % Size, std::memory_order_release); return true; } }; 这种方法可以显著减少锁竞争，降低延迟。\n3.2 直接处理模型 #class MarketDataHandler { public: void onMarketData(const MarketData\u0026amp; data) { // 直接处理市场数据 processData(data); } private: void processData(const MarketData\u0026amp; data) { // 实现数据处理逻辑 } }; 直接在回调函数中处理数据，避免了队列带来的额外开销。\n3.3 内存映射文件与共享内存 #class SharedMemoryManager { public: SharedMemoryManager(const std::string\u0026amp; name, size_t size) : shm_object_(boost::interprocess::open_or_create, name.c_str(), size) , region_(shm_object_.get_address(), shm_object_.get_size()) {} void writeMarketData(const MarketData\u0026amp; data) { // 写入共享内存 } MarketData readMarketData() { // 从共享内存读取 } private: boost::interprocess::shared_memory_object shm_object_; boost::interprocess::mapped_region region_; }; 使用共享内存可以实现极低延迟的进程间通信。\n4. 结论与建议 #对于追求极低延迟的高频交易系统，使用传统队列处理市场数据可能不是最佳选择。虽然队列提供了良好的解耦和缓冲功能，但它引入的额外延迟可能对系统性能造成显著影响。\n建议：\n评估系统需求：仔细评估系统的具体需求，包括延迟要求、数据处理量、系统复杂度等。\n考虑混合方案：对于关键路径，使用直接处理或无锁数据结构；对于次要路径，可以考虑使用队列来平衡性能和系统复杂度。\n性能测试：实施严格的性能测试，比较不同方案在实际环境中的表现。\n持续优化：随着系统的演进和需求的变化，持续评估和优化数据处理方式。\n定制化解决方案：考虑开发针对特定需求的定制化数据结构和处理机制。\n在高频交易系统中，每一微秒的延迟都可能转化为实际的经济损失。因此，在设计系统时，需要在功能、性能和复杂度之间找到最佳平衡点。直接处理模型或高度优化的无锁数据结构通常是处理市场数据的更好选择，但具体实现需要根据系统的特定需求和约束来决定。\n","date":"15 September 2024","permalink":"/blog/queue_usage/","section":"Blog","summary":"\u003ch1 id=\"高频交易系统中市场数据处理队列的利弊分析\" class=\"relative group\"\u003e高频交易系统中市场数据处理：队列的利弊分析 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e9%ab%98%e9%a2%91%e4%ba%a4%e6%98%93%e7%b3%bb%e7%bb%9f%e4%b8%ad%e5%b8%82%e5%9c%ba%e6%95%b0%e6%8d%ae%e5%a4%84%e7%90%86%e9%98%9f%e5%88%97%e7%9a%84%e5%88%a9%e5%bc%8a%e5%88%86%e6%9e%90\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e\u003cp\u003e在高频交易（HFT）系统中，处理市场数据的方式直接影响着系统的性能和延迟。使用队列是一种常见的数据处理方法，但在追求极低延迟的HFT系统中，这种选择是否合适需要仔细考虑。本文将分析使用队列的利弊，并探讨可能的替代方案。\u003c/p\u003e\n\u003ch2 id=\"1-使用队列的优势\" class=\"relative group\"\u003e1. 使用队列的优势 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-%e4%bd%bf%e7%94%a8%e9%98%9f%e5%88%97%e7%9a%84%e4%bc%98%e5%8a%bf\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e解耦和缓冲\u003c/strong\u003e：队列可以有效地解耦数据生产者（如市场数据源）和消费者（如策略引擎），提供一个缓冲区来处理突发的数据流。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e负载均衡\u003c/strong\u003e：在多线程处理中，队列可以帮助分配工作负载，防止某个处理单元过载。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e简化设计\u003c/strong\u003e：队列提供了一个直观的数据流模型，可以简化系统的整体设计。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e容错性\u003c/strong\u003e：队列可以帮助系统更好地处理暂时的处理速度不匹配，增强系统的稳定性。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"2-使用队列的劣势\" class=\"relative group\"\u003e2. 使用队列的劣势 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#2-%e4%bd%bf%e7%94%a8%e9%98%9f%e5%88%97%e7%9a%84%e5%8a%a3%e5%8a%bf\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e额外延迟\u003c/strong\u003e：队列操作（入队和出队）会引入额外的延迟，即使是几微秒的延迟在HFT中也可能造成显著影响。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e内存开销\u003c/strong\u003e：队列需要额外的内存分配，这可能导致缓存未命中，进一步增加延迟。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e上下文切换\u003c/strong\u003e：在多线程环境中，队列操作可能导致频繁的上下文切换，增加系统开销。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e顺序处理限制\u003c/strong\u003e：队列通常按FIFO顺序处理数据，这可能不适合需要优先处理某些关键数据的场景。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e潜在的锁竞争\u003c/strong\u003e：在高并发情况下，队列可能成为竞争热点，导致性能下降。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"3-替代方案\" class=\"relative group\"\u003e3. 替代方案 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#3-%e6%9b%bf%e4%bb%a3%e6%96%b9%e6%a1%88\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e考虑到队列可能引入的延迟，以下是一些可能的替代方案：\u003c/p\u003e\n\u003ch3 id=\"31-无锁环形缓冲区lock-free-ring-buffer\" class=\"relative group\"\u003e3.1 无锁环形缓冲区（Lock-free Ring Buffer） \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#31-%e6%97%a0%e9%94%81%e7%8e%af%e5%bd%a2%e7%bc%93%e5%86%b2%e5%8c%balock-free-ring-buffer\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003eSize\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eLockFreeRingBuffer\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eprivate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSize\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ebuffer_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eatomic\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003esize_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ehead_\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eatomic\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003esize_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etail_\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent_tail\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etail_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ememory_order_relaxed\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003enext_tail\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent_tail\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003eSize\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enext_tail\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ehead_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ememory_order_acquire\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// Buffer is full\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003ebuffer_\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent_tail\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003etail_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estore\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enext_tail\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ememory_order_release\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent_head\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehead_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ememory_order_relaxed\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent_head\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003etail_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ememory_order_acquire\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// Buffer is empty\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003eitem\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuffer_\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent_head\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ehead_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estore\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent_head\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003eSize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ememory_order_release\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这种方法可以显著减少锁竞争，降低延迟。\u003c/p\u003e","title":"高频交易系统中市场数据处理：队列的利弊分析"},{"content":"故障复盘报告：内存映射文件中的 std::string 导致的段错误 #1. 问题描述 #在使用内存映射文件存储订单数据的过程中，程序在重启后出现段错误。具体表现为在尝试访问存储在内存映射文件中的 Order 结构体的 id 字段时，程序崩溃。\n2. 错误信息 #程序崩溃时的 GDB 调试信息如下：\nThread 2 \u0026#34;strategyandtrad\u0026#34; received signal SIGSEGV, Segmentation fault. [Switching to Thread 0x7ffff6f4c6c0 (LWP 446582)] __memcmp_sse2 () at ../sysdeps/x86_64/multiarch/memcmp-sse2.S:258 258 ../sysdeps/x86_64/multiarch/memcmp-sse2.S: No such file or directory. (gdb) bt #0 __memcmp_sse2 () at ../sysdeps/x86_64/multiarch/memcmp-sse2.S:258 #1 0x000055555556d79b in std::char_traits\u0026lt;char\u0026gt;::compare (__s1=0x7f4710000eb0 \u0026lt;error: Cannot access memory at address 0x7f4710000eb0\u0026gt;, __s2=0x7fffe8000c80 \u0026#34;ORD-1726124231791862593\u0026#34;, __n=23) at /usr/include/c++/12/bits/char_traits.h:385 #2 0x000055555559c599 in std::operator==\u0026lt;char\u0026gt; (__lhs=\u0026lt;error: Cannot access memory at address 0x7f4710000eb0\u0026gt;, __rhs=\u0026#34;ORD-1726124231791862593\u0026#34;) at /usr/include/c++/12/bits/basic_string.h:3587 #3 0x000055555561a7fa in MmapOrderBook::Impl::getOrder (this=0x555555776170, orderId=\u0026#34;ORD-1726124231791862593\u0026#34;) at /home/hft_trading_system/strategyandtradingwitheventbus/src/order_management/mmap_order_book_impl.cpp:211 ... (gdb) frame 3 #3 0x000055555561a7fa in MmapOrderBook::Impl::getOrder (this=0x555555776170, orderId=\u0026#34;ORD-1726124231791862593\u0026#34;) at /home/hft_trading_system/strategyandtradingwitheventbus/src/order_management/mmap_order_book_impl.cpp:211 211 if (m_orders[i].id == orderId) { (gdb) print orderId $1 = \u0026#34;ORD-1726124231791862593\u0026#34; (gdb) print m_orders[i].id $2 = \u0026lt;error: Cannot access memory at address 0x7f4710000eb0\u0026gt; (gdb) print m_orders[i] $3 = {id = \u0026lt;error: Cannot access memory at address 0x7f4710000eb0\u0026gt;, instId = \u0026lt;error: Cannot access memory at address 0x7f4710000ed0\u0026gt;, price = 58126.699999999997, quantity = 100, status = 3} 相关代码 struct Order { std::string id; std::string instId; double price; double quantity; int status; // 0: pending, 1: filled, 2: cancelled }; 这个结构体直接在内存映射文件中使用，导致了我们遇到的问题。\n4. 问题分析 #通过分析错误信息和代码结构，我们发现：\n程序崩溃发生在比较 m_orders[i].id 和 orderId 时。 无法访问 m_orders[i].id 的内存地址（0x7f4710000eb0）。 Order 结构体中的 id 和 instId 字段使用了 std::string 类型。 问题的根本原因是：std::string 是一个复杂对象，包含指向堆内存的指针。当程序退出后，这些指针所指向的内存不再有效。重新启动程序并尝试访问内存映射文件中的这些 std::string 对象时，就会导致段错误。\n5. 解决方案 #将 Order 结构体中的 std::string 类型替换为固定大小的字符数组：\nconstexpr size_t MAX_ID_LENGTH = 64; constexpr size_t MAX_INST_ID_LENGTH = 32; struct Order { char id[MAX_ID_LENGTH]; char instId[MAX_INST_ID_LENGTH]; double price; double quantity; int status; // 构造函数和辅助方法... }; 同时，添加辅助方法来方便地设置和获取这些字段的值：\nvoid setId(const std::string\u0026amp; newId) { strncpy(id, newId.c_str(), MAX_ID_LENGTH - 1); id[MAX_ID_LENGTH - 1] = \u0026#39;\\0\u0026#39;; } std::string getId() const { return std::string(id); } // 类似地实现 setInstId 和 getInstId 6. 实施步骤 # 修改 Order 结构体的定义。 更新所有使用 Order 结构体的代码，使用新的 setter 和 getter 方法。 删除旧的内存映射文件（如果存在），因为新的结构体布局与旧的不兼容。 重新编译整个项目。 运行测试，确保问题已解决且没有引入新的问题。 7. 经验教训 # 在使用内存映射文件时，应避免直接存储包含指针或复杂对象（如 std::string）的结构体。 对于需要持久化的数据结构，优先使用固定大小的数组或基本数据类型。 在设计持久化数据结构时，考虑跨会话和跨进程的兼容性。 增加更多的错误检查和日志记录，以便更容易地诊断类似问题。 8. 后续行动 # 审查其他使用内存映射文件的代码，确保没有类似的潜在问题。 考虑实现一个数据完整性检查机制，在程序启动时验证内存映射文件的内容。 更新开发指南，强调在使用内存映射文件时应注意的事项。 考虑实现一个版本控制机制，以便在未来需要更改数据结构时能够平滑迁移。 Incident Report: Segmentation Fault Caused by std::string in Memory-Mapped File #1. Problem Description #The program experienced a segmentation fault after restart when attempting to access order data stored in a memory-mapped file. Specifically, the crash occurred when trying to access the id field of the Order struct stored in the memory-mapped file.\n2. Error Information #The GDB debug information at the time of the crash was as follows:\nThread 2 \u0026#34;strategyandtrad\u0026#34; received signal SIGSEGV, Segmentation fault. [Switching to Thread 0x7ffff6f4c6c0 (LWP 446582)] __memcmp_sse2 () at ../sysdeps/x86_64/multiarch/memcmp-sse2.S:258 258 ../sysdeps/x86_64/multiarch/memcmp-sse2.S: No such file or directory. (gdb) bt #0 __memcmp_sse2 () at ../sysdeps/x86_64/multiarch/memcmp-sse2.S:258 #1 0x000055555556d79b in std::char_traits\u0026lt;char\u0026gt;::compare (__s1=0x7f4710000eb0 \u0026lt;error: Cannot access memory at address 0x7f4710000eb0\u0026gt;, __s2=0x7fffe8000c80 \u0026#34;ORD-1726124231791862593\u0026#34;, __n=23) at /usr/include/c++/12/bits/char_traits.h:385 #2 0x000055555559c599 in std::operator==\u0026lt;char\u0026gt; (__lhs=\u0026lt;error: Cannot access memory at address 0x7f4710000eb0\u0026gt;, __rhs=\u0026#34;ORD-1726124231791862593\u0026#34;) at /usr/include/c++/12/bits/basic_string.h:3587 #3 0x000055555561a7fa in MmapOrderBook::Impl::getOrder (this=0x555555776170, orderId=\u0026#34;ORD-1726124231791862593\u0026#34;) at /home/hft_trading_system/strategyandtradingwitheventbus/src/order_management/mmap_order_book_impl.cpp:211 ... (gdb) frame 3 #3 0x000055555561a7fa in MmapOrderBook::Impl::getOrder (this=0x555555776170, orderId=\u0026#34;ORD-1726124231791862593\u0026#34;) at /home/hft_trading_system/strategyandtradingwitheventbus/src/order_management/mmap_order_book_impl.cpp:211 211 if (m_orders[i].id == orderId) { (gdb) print orderId $1 = \u0026#34;ORD-1726124231791862593\u0026#34; (gdb) print m_orders[i].id $2 = \u0026lt;error: Cannot access memory at address 0x7f4710000eb0\u0026gt; (gdb) print m_orders[i] $3 = {id = \u0026lt;error: Cannot access memory at address 0x7f4710000eb0\u0026gt;, instId = \u0026lt;error: Cannot access memory at address 0x7f4710000ed0\u0026gt;, price = 58126.699999999997, quantity = 100, status = 3} 3. Relevant Code #The issue originated in the definition of the Order struct. The original Order struct was defined as follows:\nstruct Order { std::string id; std::string instId; double price; double quantity; int status; // 0: pending, 1: filled, 2: cancelled }; This struct was directly used in the memory-mapped file, leading to the problem we encountered.\n4. Problem Analysis #Through analysis of the error information and code structure, we found:\nThe program crash occurred when comparing m_orders[i].id with orderId. The memory address of m_orders[i].id (0x7f4710000eb0) could not be accessed. The id and instId fields in the Order struct used the std::string type. The root cause of the problem is: std::string is a complex object that contains pointers to heap memory. When the program exits, the memory pointed to by these pointers is no longer valid. Attempting to access these std::string objects in the memory-mapped file after restarting the program results in a segmentation fault.\n5. Solution #Replace the std::string types in the Order struct with fixed-size character arrays:\nconstexpr size_t MAX_ID_LENGTH = 64; constexpr size_t MAX_INST_ID_LENGTH = 32; struct Order { char id[MAX_ID_LENGTH]; char instId[MAX_INST_ID_LENGTH]; double price; double quantity; int status; // Constructor and helper methods... }; Additionally, add helper methods to conveniently set and get the values of these fields:\nvoid setId(const std::string\u0026amp; newId) { strncpy(id, newId.c_str(), MAX_ID_LENGTH - 1); id[MAX_ID_LENGTH - 1] = \u0026#39;\\0\u0026#39;; } std::string getId() const { return std::string(id); } // Similarly implement setInstId and getInstId 6. Implementation Steps # Modify the definition of the Order struct. Update all code using the Order struct to use the new setter and getter methods. Delete the old memory-mapped file (if it exists), as the new struct layout is incompatible with the old one. Recompile the entire project. Run tests to ensure the problem is resolved and no new issues have been introduced. 7. Lessons Learned # When using memory-mapped files, avoid directly storing structs containing pointers or complex objects (like std::string). For data structures that need to be persisted, prioritize using fixed-size arrays or basic data types. When designing persistent data structures, consider compatibility across sessions and processes. Add more error checks and logging to make it easier to diagnose similar issues. 8. Follow-up Actions # Review other code using memory-mapped files to ensure there are no similar potential issues. Consider implementing a data integrity check mechanism to validate the contents of memory-mapped files at program startup. Update development guidelines to emphasize considerations when using memory-mapped files. Consider implementing a version control mechanism to allow smooth migration when data structures need to be changed in the future. ","date":"12 September 2024","permalink":"/blog/string_mmap/","section":"Blog","summary":"\u003ch1 id=\"故障复盘报告内存映射文件中的-stdstring-导致的段错误\" class=\"relative group\"\u003e故障复盘报告：内存映射文件中的 std::string 导致的段错误 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e6%95%85%e9%9a%9c%e5%a4%8d%e7%9b%98%e6%8a%a5%e5%91%8a%e5%86%85%e5%ad%98%e6%98%a0%e5%b0%84%e6%96%87%e4%bb%b6%e4%b8%ad%e7%9a%84-stdstring-%e5%af%bc%e8%87%b4%e7%9a%84%e6%ae%b5%e9%94%99%e8%af%af\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e\u003ch2 id=\"1-问题描述\" class=\"relative group\"\u003e1. 问题描述 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#1-%e9%97%ae%e9%a2%98%e6%8f%8f%e8%bf%b0\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e在使用内存映射文件存储订单数据的过程中，程序在重启后出现段错误。具体表现为在尝试访问存储在内存映射文件中的 \u003ccode\u003eOrder\u003c/code\u003e 结构体的 \u003ccode\u003eid\u003c/code\u003e 字段时，程序崩溃。\u003c/p\u003e\n\u003ch2 id=\"2-错误信息\" class=\"relative group\"\u003e2. 错误信息 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#2-%e9%94%99%e8%af%af%e4%bf%a1%e6%81%af\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003e程序崩溃时的 GDB 调试信息如下：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eThread 2 \u0026#34;strategyandtrad\u0026#34; received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7ffff6f4c6c0 (LWP 446582)]\n__memcmp_sse2 () at ../sysdeps/x86_64/multiarch/memcmp-sse2.S:258\n258     ../sysdeps/x86_64/multiarch/memcmp-sse2.S: No such file or directory.\n(gdb) bt\n#0  __memcmp_sse2 () at ../sysdeps/x86_64/multiarch/memcmp-sse2.S:258\n#1  0x000055555556d79b in std::char_traits\u0026lt;char\u0026gt;::compare (__s1=0x7f4710000eb0 \u0026lt;error: Cannot access memory at address 0x7f4710000eb0\u0026gt;, \n    __s2=0x7fffe8000c80 \u0026#34;ORD-1726124231791862593\u0026#34;, __n=23) at /usr/include/c++/12/bits/char_traits.h:385\n#2  0x000055555559c599 in std::operator==\u0026lt;char\u0026gt; (__lhs=\u0026lt;error: Cannot access memory at address 0x7f4710000eb0\u0026gt;, __rhs=\u0026#34;ORD-1726124231791862593\u0026#34;)\n    at /usr/include/c++/12/bits/basic_string.h:3587\n#3  0x000055555561a7fa in MmapOrderBook::Impl::getOrder (this=0x555555776170, orderId=\u0026#34;ORD-1726124231791862593\u0026#34;)\n    at /home/hft_trading_system/strategyandtradingwitheventbus/src/order_management/mmap_order_book_impl.cpp:211\n...\n\n(gdb) frame 3\n#3  0x000055555561a7fa in MmapOrderBook::Impl::getOrder (this=0x555555776170, orderId=\u0026#34;ORD-1726124231791862593\u0026#34;)\n    at /home/hft_trading_system/strategyandtradingwitheventbus/src/order_management/mmap_order_book_impl.cpp:211\n211             if (m_orders[i].id == orderId) {\n(gdb) print orderId\n$1 = \u0026#34;ORD-1726124231791862593\u0026#34;\n(gdb) print m_orders[i].id\n$2 = \u0026lt;error: Cannot access memory at address 0x7f4710000eb0\u0026gt;\n(gdb) print m_orders[i]\n$3 = {id = \u0026lt;error: Cannot access memory at address 0x7f4710000eb0\u0026gt;, instId = \u0026lt;error: Cannot access memory at address 0x7f4710000ed0\u0026gt;, \n  price = 58126.699999999997, quantity = 100, status = 3}\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e相关代码\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"nc\"\u003eOrder\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003einstId\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003equantity\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003estatus\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 0: pending, 1: filled, 2: cancelled\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个结构体直接在内存映射文件中使用，导致了我们遇到的问题。\u003c/p\u003e","title":"Segmentation Fault Caused by std::string in Memory-Mapped File"},{"content":"高频交易系统配置管理方案分析 #当前方案概述 # graph TB CommonLib[\u0026#34;Common Library (MMAP)\u0026#34;] Exchange[\u0026#34;Exchange\u0026#34;] subgraph StrategyAndTrading[\u0026#34;StrategyAndTrading Component\u0026#34;] MDR[\u0026#34;MarketDataReader\u0026#34;] MDN[\u0026#34;MarketDataNormalizer\u0026#34;] SM[\u0026#34;StrategyManager\u0026#34;] subgraph Strategies[\u0026#34;Strategies\u0026#34;] S1[\u0026#34;Strategy 1\u0026#34;] S2[\u0026#34;Strategy 2\u0026#34;] SN[\u0026#34;Strategy N\u0026#34;] end OG[\u0026#34;OrderGenerator\u0026#34;] OV[\u0026#34;OrderValidator\u0026#34;] RP[\u0026#34;RiskProfiler\u0026#34;] RE[\u0026#34;RiskEvaluator\u0026#34;] OM[\u0026#34;OrderManager\u0026#34;] OE[\u0026#34;OrderExecutor\u0026#34;] OMO[\u0026#34;OrderMonitor\u0026#34;] PM[\u0026#34;PositionManager\u0026#34;] end CommonLib --\u0026gt;|1. Read MMAP| MDR MDR --\u0026gt;|2. Raw Market Data| MDN MDN --\u0026gt;|3. Normalized Data| SM SM --\u0026gt;|4. Distribute Data| Strategies Strategies --\u0026gt;|5. Generate Signals| OG OG --\u0026gt;|6. Create Orders| OV OV --\u0026gt;|7. Validated Orders| RP RP --\u0026gt;|8. Risk Profile| RE RE --\u0026gt;|9. Risk Evaluated Orders| OM OM --\u0026gt;|10. Managed Orders| OE OE \u0026lt;--\u0026gt;|11. Execute Orders| Exchange Exchange --\u0026gt;|12. Execution Results| OMO OMO --\u0026gt;|13. Order Updates| OM OM --\u0026gt;|14. Position Updates| PM PM -.-\u0026gt;|15. Position Feedback| SM classDef external fill:#f9f,stroke:#333,stroke-width:2px; classDef component fill:#bbf,stroke:#333,stroke-width:1px; classDef strategy fill:#bfb,stroke:#333,stroke-width:1px; class CommonLib,Exchange external; class MDR,MDN,SM,OG,OV,RP,RE,OM,OE,OMO,PM component; class S1,S2,SN strategy; Quote进程使用common静态库组件加载配置信息。 配置信息加载到Quote进程的本地缓存中。 使用观察者模式订阅common组件中config的变更。 当配置变更时，Quote进程更新本地缓存、重新连接和重新订阅。 优点分析 # 模块化设计：\n使用common静态库组件管理配置，提高了代码的复用性和维护性。 有利于系统的扩展，其他组件也可以使用相同的配置管理机制。 实时更新：\n观察者模式允许Quote进程实时响应配置变更，无需重启进程。 适合动态调整交易策略和参数的需求。 本地缓存：\n配置信息存储在本地缓存中，减少了频繁访问配置源的需求。 有助于降低延迟，这对高频交易至关重要。 灵活性：\n可以根据不同的配置变更类型采取不同的响应措施（如更新缓存、重新连接、重新订阅）。 潜在问题和优化建议 # 性能开销：\n观察者模式可能引入额外的性能开销，特别是在频繁更新的情况下。 建议：考虑使用更轻量级的通知机制，或实现批量更新策略。 一致性问题：\n在分布式系统中，不同进程可能在不同时间点获取更新，导致短暂的不一致状态。 建议：实现版本控制机制，确保所有相关进程同步更新到新版本配置。 重连接和重订阅的影响：\n在高频交易环境中，重连接和重订阅可能导致关键时刻的延迟或数据丢失。 建议：实现平滑过渡机制，确保在更新过程中最小化服务中断。 内存管理：\n频繁更新缓存可能导致内存碎片化或增加 GC 压力。 建议：优化内存分配策略，考虑使用内存池或预分配缓冲区。 错误处理：\n配置更新失败可能导致系统不稳定。 建议：实现健壮的错误处理机制，包括配置回滚能力和适当的日志记录。 更新粒度：\n可能存在不必要的全量更新。 建议：实现增量更新机制，只更新发生变化的配置项。 配置验证：\n缺乏明确的配置验证步骤可能导致系统不稳定。 建议：在应用新配置之前增加验证步骤，确保配置的正确性和一致性。 高频交易特定考虑 # 延迟敏感性：\n高频交易系统对延迟极为敏感，每一微秒都可能影响交易结果。 建议：优化配置访问路径，考虑使用更底层的技术如内存映射文件。 确定性：\n高频交易需要高度确定的行为。 建议：确保配置更新过程是可预测和一致的，避免引入不确定性。 吞吐量：\n高频交易系统需要处理大量数据和订单。 建议：确保配置管理不会成为系统瓶颈，考虑使用高性能数据结构和算法。 监管合规：\n高频交易系统面临严格的监管要求。 建议：确保配置更改有详细的日志记录，便于审计和回溯。 Analysis of Configuration Management in High-Frequency Trading System #Current Approach Overview # The Quote process uses the common static library component to load configuration information. Configuration information is loaded into the local cache of the Quote process. The Observer pattern is used to subscribe to config changes in the common component. When the configuration changes, the Quote process updates the local cache, reconnects, and resubscribes. Advantage Analysis # Modular Design: Using the common static library component for configuration management improves code reusability and maintainability. Facilitates system expansion; other components can use the same configuration management mechanism. Real-time Updates: The Observer pattern allows the Quote process to respond to configuration changes in real-time without restarting the process. Suitable for dynamic adjustment of trading strategies and parameters. Local Caching: Storing configuration information in a local cache reduces the need for frequent access to the configuration source. Helps reduce latency, which is crucial for high-frequency trading. Flexibility: Allows for different response measures based on different types of configuration changes (e.g., updating cache, reconnecting, resubscribing). Potential Issues and Optimization Suggestions # Performance Overhead: The Observer pattern may introduce additional performance overhead, especially in cases of frequent updates. Suggestion: Consider using a more lightweight notification mechanism or implementing a batch update strategy. Consistency Issues: In distributed systems, different processes may receive updates at different times, leading to temporary inconsistent states. Suggestion: Implement a version control mechanism to ensure all related processes synchronize to the new version of the configuration. Impact of Reconnection and Resubscription: In a high-frequency trading environment, reconnecting and resubscribing may cause delays or data loss at critical moments. Suggestion: Implement a smooth transition mechanism to minimize service interruption during updates. Memory Management: Frequent cache updates may lead to memory fragmentation or increase GC pressure. Suggestion: Optimize memory allocation strategy, consider using memory pools or pre-allocated buffers. Error Handling: Configuration update failures may lead to system instability. Suggestion: Implement robust error handling mechanisms, including configuration rollback capability and appropriate logging. Update Granularity: There may be unnecessary full updates. Suggestion: Implement an incremental update mechanism, only updating configuration items that have changed. Configuration Validation: Lack of explicit configuration validation steps may lead to system instability. Suggestion: Add validation steps before applying new configurations to ensure correctness and consistency. High-Frequency Trading Specific Considerations # Latency Sensitivity: High-frequency trading systems are extremely sensitive to latency; every microsecond can affect trading results. Suggestion: Optimize configuration access paths, consider using lower-level techniques such as memory-mapped files. Determinism: High-frequency trading requires highly deterministic behavior. Suggestion: Ensure the configuration update process is predictable and consistent, avoiding the introduction of uncertainty. Throughput: High-frequency trading systems need to process large volumes of data and orders. Suggestion: Ensure configuration management does not become a system bottleneck, consider using high-performance data structures and algorithms. Regulatory Compliance: High-frequency trading systems face strict regulatory requirements. Suggestion: Ensure detailed logging of configuration changes for auditing and traceability. ","date":"6 September 2024","permalink":"/blog/config_managemeng_in_hft_system/","section":"Blog","summary":"\u003ch1 id=\"高频交易系统配置管理方案分析\" class=\"relative group\"\u003e高频交易系统配置管理方案分析 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e9%ab%98%e9%a2%91%e4%ba%a4%e6%98%93%e7%b3%bb%e7%bb%9f%e9%85%8d%e7%bd%ae%e7%ae%a1%e7%90%86%e6%96%b9%e6%a1%88%e5%88%86%e6%9e%90\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e\u003ch2 id=\"当前方案概述\" class=\"relative group\"\u003e当前方案概述 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e5%bd%93%e5%89%8d%e6%96%b9%e6%a1%88%e6%a6%82%e8%bf%b0\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Mermaid\" data-lang=\"Mermaid\"\u003e\ngraph TB\n    CommonLib[\u0026#34;Common Library (MMAP)\u0026#34;]\n    Exchange[\u0026#34;Exchange\u0026#34;]\n\n    subgraph StrategyAndTrading[\u0026#34;StrategyAndTrading Component\u0026#34;]\n        MDR[\u0026#34;MarketDataReader\u0026#34;]\n        MDN[\u0026#34;MarketDataNormalizer\u0026#34;]\n        SM[\u0026#34;StrategyManager\u0026#34;]\n        subgraph Strategies[\u0026#34;Strategies\u0026#34;]\n            S1[\u0026#34;Strategy 1\u0026#34;]\n            S2[\u0026#34;Strategy 2\u0026#34;]\n            SN[\u0026#34;Strategy N\u0026#34;]\n        end\n        OG[\u0026#34;OrderGenerator\u0026#34;]\n        OV[\u0026#34;OrderValidator\u0026#34;]\n        RP[\u0026#34;RiskProfiler\u0026#34;]\n        RE[\u0026#34;RiskEvaluator\u0026#34;]\n        OM[\u0026#34;OrderManager\u0026#34;]\n        OE[\u0026#34;OrderExecutor\u0026#34;]\n        OMO[\u0026#34;OrderMonitor\u0026#34;]\n        PM[\u0026#34;PositionManager\u0026#34;]\n    end\n\n    CommonLib --\u0026gt;|1. Read MMAP| MDR\n    MDR --\u0026gt;|2. Raw Market Data| MDN\n    MDN --\u0026gt;|3. Normalized Data| SM\n    SM --\u0026gt;|4. Distribute Data| Strategies\n    Strategies --\u0026gt;|5. Generate Signals| OG\n    OG --\u0026gt;|6. Create Orders| OV\n    OV --\u0026gt;|7. Validated Orders| RP\n    RP --\u0026gt;|8. Risk Profile| RE\n    RE --\u0026gt;|9. Risk Evaluated Orders| OM\n    OM --\u0026gt;|10. Managed Orders| OE\n    OE \u0026lt;--\u0026gt;|11. Execute Orders| Exchange\n    Exchange --\u0026gt;|12. Execution Results| OMO\n    OMO --\u0026gt;|13. Order Updates| OM\n    OM --\u0026gt;|14. Position Updates| PM\n    PM -.-\u0026gt;|15. Position Feedback| SM\n\n    classDef external fill:#f9f,stroke:#333,stroke-width:2px;\n    classDef component fill:#bbf,stroke:#333,stroke-width:1px;\n    classDef strategy fill:#bfb,stroke:#333,stroke-width:1px;\n    class CommonLib,Exchange external;\n    class MDR,MDN,SM,OG,OV,RP,RE,OM,OE,OMO,PM component;\n    class S1,S2,SN strategy;\n\u003c/code\u003e\u003c/pre\u003e\u003col\u003e\n\u003cli\u003eQuote进程使用common静态库组件加载配置信息。\u003c/li\u003e\n\u003cli\u003e配置信息加载到Quote进程的本地缓存中。\u003c/li\u003e\n\u003cli\u003e使用观察者模式订阅common组件中config的变更。\u003c/li\u003e\n\u003cli\u003e当配置变更时，Quote进程更新本地缓存、重新连接和重新订阅。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"优点分析\" class=\"relative group\"\u003e优点分析 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e4%bc%98%e7%82%b9%e5%88%86%e6%9e%90\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e模块化设计\u003c/strong\u003e：\u003c/p\u003e","title":"Analysis of Configuration Management in High-Frequency Trading System"},{"content":"","date":null,"permalink":"/tags/blog/","section":"Tags","summary":"","title":"Blog"},{"content":"workflow #目前已经实现GitHub Action，自动编译静态文件, Push到GitHub Page。\n具体流程 # 在仓库 git@github.com:code-agree/MyBlogWebsiteRepo.git MyBlogWebsiteRepo/WebsiteRepo 使用 hugo命令 hugo new content ./content/blog/How_to_publish_new_blog.md 新增blog 将当前仓库的变更push到远端 由配置的GitHub action 自动触发 构建静态文件-\u0026gt;push到GitHub Page仓库 成功发布 ","date":"2 September 2024","permalink":"/blog/how_to_publish_new_blog/","section":"Blog","summary":"\u003ch3 id=\"workflow\" class=\"relative group\"\u003eworkflow \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#workflow\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003e目前已经实现GitHub Action，自动编译静态文件, Push到GitHub Page。\u003c/p\u003e\n\u003ch3 id=\"具体流程\" class=\"relative group\"\u003e具体流程 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e5%85%b7%e4%bd%93%e6%b5%81%e7%a8%8b\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003col\u003e\n\u003cli\u003e在仓库 \u003ccode\u003egit@github.com:code-agree/MyBlogWebsiteRepo.git\u003c/code\u003e  MyBlogWebsiteRepo/WebsiteRepo 使用\nhugo命令 \u003ccode\u003ehugo new content ./content/blog/How_to_publish_new_blog.md\u003c/code\u003e 新增blog\u003c/li\u003e\n\u003cli\u003e将当前仓库的变更push到远端\u003c/li\u003e\n\u003cli\u003e由配置的GitHub action 自动触发 构建静态文件-\u0026gt;push到GitHub Page仓库\u003c/li\u003e\n\u003cli\u003e成功发布\u003c/li\u003e\n\u003c/ol\u003e","title":"How to publish new blog"},{"content":"标题：解决高频交易系统中的死锁：从传统 EventBus 到无锁队列的优化之旅 # 引言 在高频交易系统中，每一毫秒都至关重要。最近在系统中遇到了一个令人头疼的死锁问题，这不仅影响了系统的性能，还危及了其稳定性。本文将详细讲述如何发现、分析并最终解决这个问题，以及从中学到的宝贵经验。\n问题发现 在一次例行的系统监控中，注意到系统偶尔会出现短暂的停顿。通过日志分析，发现 MarketDataReader 的 readingLoop() 函数只执行了一次就停止了。这引起了的警觉。\n问题分析 首先查看了 MarketDataReader 的日志：\n[2024-09-01 13:02:08.472] [main_logger] [MarketDataReader.cpp:38] [info] [thread 4048966] [start] Starting market data reader... [2024-09-01 13:02:08.472] [main_logger] [MarketDataReader.cpp:40] [info] [thread 4048966] [start] Starting start,and running_ = true [2024-09-01 13:02:08.489] [main_logger] [MarketDataReader.cpp:63] [info] [thread 4048967] [readingLoop] Starting reading loop...,and running_ = true [2024-09-01 13:02:08.490] [main_logger] [MarketDataReader.cpp:65] [info] [thread 4048967] [readingLoop] Reading loop... [2024-09-01 13:02:08.490] [main_logger] [MarketDataReader.cpp:83] [info] [thread 4048967] [processSymbol] Processing symbol: BTC-USDT [2024-09-01 13:02:08.490] [main_logger] [MarketDataReader.cpp:87] [info] [thread 4048967] [processSymbol] timeSinceLastUpdate: 24305 can into loop [2024-09-01 13:02:08.490] [main_logger] [MarketDataStore.cpp:137] [info] [thread 4048967] [readLatestData] Read data for symbol = BTC-USDT, timestamp = 1725228018 [2024-09-01 13:02:08.491] [main_logger] [MarketDataReader.cpp:94] [info] [thread 4048967] [processSymbol] currentData: 58124.24 [2024-09-01 13:02:08.491] [main_logger] [MarketDataReader.cpp:95] [info] [thread 4048967] [processSymbol] publish marketDataEvent [2024-09-01 13:02:08.491] [main_logger] [EventBus.h:59] [info] [thread 4048967] [publish] publish event: 15MarketDataEvent [2024-09-01 13:02:08.492] [main_logger] [StrategyManager.cpp:38] [info] [thread 4048967] [processSignals] publish orderEvent: BTC-USDT [2024-09-01 13:02:08.492] [main_logger] [EventBus.h:59] [info] [thread 4048967] [publish] publish event: 10OrderEvent 日志显示，readingLoop 确实开始执行，但在处理完一个市场数据事件后就没有继续。这暗示可能存在死锁。\n深入调查 使用 GDB 附加到运行中的进程，并获取了线程堆栈信息：\n(gdb) info thread Id Target Id Frame * 1 Thread 0x7ffff7e91740 (LWP 4054377) \u0026#34;strategyandtrad\u0026#34; 0x00007ffff7aee485 in __GI___clock_nanosleep ( clock_id=clock_id@entry=0, flags=flags@entry=0, req=0x7fffffffe420, rem=0x7fffffffe420) at ../sysdeps/unix/sysv/linux/clock_nanosleep.c:48 2 Thread 0x7ffff6fff6c0 (LWP 4054380) \u0026#34;strategyandtrad\u0026#34; futex_wait (private=0, expected=2, futex_word=0x5555556be768) at ../sysdeps/nptl/futex-internal.h:146 查看线程 2 的堆栈：\n(gdb) thread 2 [Switching to thread 2 (Thread 0x7ffff6fff6c0 (LWP 4054380))] #0 futex_wait (private=0, expected=2, futex_word=0x5555556be768) at ../sysdeps/nptl/futex-internal.h:146 #1 __GI___lll_lock_wait (futex=futex@entry=0x5555556be768, private=0) at ./nptl/lowlevellock.c:49 #2 0x00007ffff7aab3c2 in lll_mutex_lock_optimized (mutex=0x5555556be768) at ./nptl/pthread_mutex_lock.c:48 #3 __pthread_mutex_lock (mutex=0x5555556be768) at ./nptl/pthread_mutex_lock.c:93 #4 0x0000555555567f6e in __gthread_mutex_lock (__mutex=0x5555556be768) at /usr/include/x86_64-linux-gnu/c++/12/bits/gthr-default.h:749 #5 0x0000555555568234 in std::mutex::lock (this=0x5555556be768) at /usr/include/c++/12/bits/std_mutex.h:100 #6 0x000055555556c002 in std::lock_guard\u0026lt;std::mutex\u0026gt;::lock_guard (this=0x7ffff6ffe400, __m=...) at /usr/include/c++/12/bits/std_mutex.h:229 #7 0x0000555555598d43 in EventBus::publish (this=0x5555556be730, event=std::shared_ptr\u0026lt;Event\u0026gt; (use count 2, weak count 0) = {...}) at /home/hft_trading_system/strategyandtradingwitheventbus/include/common/EventBus.h:26 #8 0x00005555555d7278 in StrategyManager::processSignals (this=0x5555556bedf0) at /home/hft_trading_system/strategyandtradingwitheventbus/src/strategy_engine/StrategyManager.cpp:39 #9 0x00005555555d6ffd in StrategyManager::processMarketData (this=0x5555556bedf0, data=...) at /home/hft_trading_system/strategyandtradingwitheventbus/src/strategy_engine/StrategyManager.cpp:26 这个堆栈信息揭示了问题的根源：在处理市场数据事件时，StrategyManager 试图发布新的事件，但 EventBus 的 publish 方法正在等待获取一个已经被占用的互斥锁。\n问题根源 分析表明，问题出在的 EventBus 实现中。当一个事件被处理时，处理函数可能会尝试发布新的事件，而 EventBus::publish 方法在整个过程中都持有一个锁。这导致了死锁。\n解决方案 为了解决这个问题，决定重新设计的事件处理机制，采用无锁队列来替代传统的 EventBus。\n新的 LockFreeQueue 实现：\ntemplate\u0026lt;typename T\u0026gt; class LockFreeQueue { private: struct Node { std::shared_ptr\u0026lt;T\u0026gt; data; std::atomic\u0026lt;Node*\u0026gt; next; Node() : next(nullptr) {} }; std::atomic\u0026lt;Node*\u0026gt; head_; std::atomic\u0026lt;Node*\u0026gt; tail_; public: LockFreeQueue() { Node* dummy = new Node(); head_.store(dummy); tail_.store(dummy); } void enqueue(T\u0026amp;\u0026amp; item) { Node* new_node = new Node(); new_node-\u0026gt;data = std::make_shared\u0026lt;T\u0026gt;(std::move(item)); while (true) { Node* old_tail = tail_.load(); Node* next = old_tail-\u0026gt;next.load(); if (old_tail == tail_.load()) { if (next == nullptr) { if (old_tail-\u0026gt;next.compare_exchange_weak(next, new_node)) { tail_.compare_exchange_weak(old_tail, new_node); return; } } else { tail_.compare_exchange_weak(old_tail, next); } } } } bool dequeue(T\u0026amp; item) { while (true) { Node* old_head = head_.load(); Node* old_tail = tail_.load(); Node* next = old_head-\u0026gt;next.load(); if (old_head == head_.load()) { if (old_head == old_tail) { if (next == nullptr) { return false; // Queue is empty } tail_.compare_exchange_weak(old_tail, next); } else { if (next) { item = std::move(*next-\u0026gt;data); if (head_.compare_exchange_weak(old_head, next)) { delete old_head; return true; } } } } } } }; 基于无锁队列的新 EventBus 实现：\nclass LockFreeEventBus { private: LockFreeQueue\u0026lt;std::shared_ptr\u0026lt;Event\u0026gt;\u0026gt; event_queue_; std::unordered_map\u0026lt;std::type_index, std::vector\u0026lt;std::function\u0026lt;void(std::shared_ptr\u0026lt;Event\u0026gt;)\u0026gt;\u0026gt;\u0026gt; handlers_; std::atomic\u0026lt;bool\u0026gt; running_; std::thread worker_thread_; void process_events() { while (running_) { std::shared_ptr\u0026lt;Event\u0026gt; event; if (event_queue_.dequeue(event)) { auto it = handlers_.find(typeid(*event)); if (it != handlers_.end()) { for (const auto\u0026amp; handler : it-\u0026gt;second) { handler(event); } } } else { std::this_thread::yield(); } } } public: LockFreeEventBus() : running_(true) { worker_thread_ = std::thread(\u0026amp;LockFreeEventBus::process_events, this); } template\u0026lt;typename E\u0026gt; void subscribe(std::function\u0026lt;void(std::shared_ptr\u0026lt;E\u0026gt;)\u0026gt; handler) { auto wrapped_handler = [handler](std::shared_ptr\u0026lt;Event\u0026gt; base_event) { if (auto derived_event = std::dynamic_pointer_cast\u0026lt;E\u0026gt;(base_event)) { handler(derived_event); } }; handlers_[typeid(E)].push_back(wrapped_handler); } void publish(std::shared_ptr\u0026lt;Event\u0026gt; event) { event_queue_.enqueue(std::move(event)); } }; 6.2 代码讲解\n这个 `LockFreeEventBus` 类实现了一个基于无锁队列的事件总线系统。让我详细解释其工作机制： 1. 核心组件： - `event_queue_`：一个无锁队列，用于存储待处理的事件。 - `handlers_`：一个哈希表，用于存储不同事件类型的处理函数。 - `running_`：一个原子布尔值，用于控制事件处理循环。 - `worker_thread_`：一个后台线程，用于持续处理事件。 2. 事件发布机制（publish 方法）： - 当有新事件需要发布时，调用 `publish` 方法。 - 该方法将事件指针移动到无锁队列中，这个操作是线程安全的。 3. 事件订阅机制（subscribe 方法）： - 允许其他组件订阅特定类型的事件。 - 使用模板参数 `E` 来指定事件类型。 - 创建一个包装处理函数，将基类 `Event` 指针转换为特定类型 `E` 的指针。 - 将包装后的处理函数存储在 `handlers_` 中，以事件类型为键。 4. 事件处理循环（process_events 方法）： - 在后台线程中持续运行。 - 不断尝试从无锁队列中取出事件。 - 如果取到事件，查找对应的处理函数并执行。 - 如果队列为空，调用 `std::this_thread::yield()` 让出 CPU 时间。 5. 线程安全性： - 使用无锁队列确保事件的发布和消费是线程安全的。 - `handlers_` 的修改只在初始化阶段进行，运行时只读取，因此不需要额外的同步。 6. 生命周期管理： - 构造函数启动后台处理线程。 - 析构函数通过设置 `running_` 为 false 来停止处理循环，并等待后台线程结束。 工作流程： 1. 系统启动时，各组件通过 `subscribe` 方法注册它们感兴趣的事件处理函数。 2. 当需要发布事件时，调用方使用 `publish` 方法将事件放入队列。 3. 后台线程持续从队列中取出事件，查找对应的处理函数，并执行这些函数。 4. 整个过程中，除了订阅操作外，没有使用任何锁，提高了并发性能。 这种设计的优点： 1. 高并发性能：使用无锁队列避免了锁竞争。 2. 解耦：事件发布者和订阅者完全分离。 3. 类型安全：通过模板和动态转换确保类型匹配。 4. 灵活性：可以轻松添加新的事件类型和处理函数。 实施效果 实施新的 LockFreeEventBus 后，运行了为期一周的压力测试。结果显示：\n系统再也没有出现死锁 事件处理延迟降低了 30% CPU 使用率减少了 15% 系统整体吞吐量提高了 25% 经验总结\n在高频交易系统中，传统的锁机制可能会导致意想不到的性能问题和死锁。 无锁算法虽然实现复杂，但在高并发场景下能带来显著的性能提升。 系统设计时应考虑到事件处理的递归性，避免因事件处理而导致的死锁。 全面的日志记录和实时监控对于快速定位和解决问题至关重要。 未来展望\n计划进一步优化无锁队列，引入多生产者-多消费者模型。 考虑实现事件的批量处理，以进一步提高系统吞吐量。 持续监控系统性能，建立更完善的性能基准和报警机制。 通过这次技术升级，不仅解决了当前的死锁问题，还为系统未来的性能优化奠定了基础。\n","date":"2 September 2024","permalink":"/blog/lockfree/","section":"Blog","summary":"\u003ch3 id=\"标题解决高频交易系统中的死锁从传统-eventbus-到无锁队列的优化之旅\" class=\"relative group\"\u003e标题：解决高频交易系统中的死锁：从传统 EventBus 到无锁队列的优化之旅 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e6%a0%87%e9%a2%98%e8%a7%a3%e5%86%b3%e9%ab%98%e9%a2%91%e4%ba%a4%e6%98%93%e7%b3%bb%e7%bb%9f%e4%b8%ad%e7%9a%84%e6%ad%bb%e9%94%81%e4%bb%8e%e4%bc%a0%e7%bb%9f-eventbus-%e5%88%b0%e6%97%a0%e9%94%81%e9%98%9f%e5%88%97%e7%9a%84%e4%bc%98%e5%8c%96%e4%b9%8b%e6%97%85\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e引言\n在高频交易系统中，每一毫秒都至关重要。最近在系统中遇到了一个令人头疼的死锁问题，这不仅影响了系统的性能，还危及了其稳定性。本文将详细讲述如何发现、分析并最终解决这个问题，以及从中学到的宝贵经验。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e问题发现\n在一次例行的系统监控中，注意到系统偶尔会出现短暂的停顿。通过日志分析，发现 MarketDataReader 的 readingLoop() 函数只执行了一次就停止了。这引起了的警觉。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e问题分析\n首先查看了 MarketDataReader 的日志：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[2024-09-01 13:02:08.472] [main_logger] [MarketDataReader.cpp:38] [info] [thread 4048966] [start] Starting market data reader...\n[2024-09-01 13:02:08.472] [main_logger] [MarketDataReader.cpp:40] [info] [thread 4048966] [start] Starting start,and running_ = true\n[2024-09-01 13:02:08.489] [main_logger] [MarketDataReader.cpp:63] [info] [thread 4048967] [readingLoop] Starting reading loop...,and running_ = true\n[2024-09-01 13:02:08.490] [main_logger] [MarketDataReader.cpp:65] [info] [thread 4048967] [readingLoop] Reading loop...\n[2024-09-01 13:02:08.490] [main_logger] [MarketDataReader.cpp:83] [info] [thread 4048967] [processSymbol] Processing symbol: BTC-USDT\n[2024-09-01 13:02:08.490] [main_logger] [MarketDataReader.cpp:87] [info] [thread 4048967] [processSymbol] timeSinceLastUpdate: 24305 can into loop\n[2024-09-01 13:02:08.490] [main_logger] [MarketDataStore.cpp:137] [info] [thread 4048967] [readLatestData] Read data for symbol = BTC-USDT, timestamp = 1725228018\n[2024-09-01 13:02:08.491] [main_logger] [MarketDataReader.cpp:94] [info] [thread 4048967] [processSymbol] currentData: 58124.24\n[2024-09-01 13:02:08.491] [main_logger] [MarketDataReader.cpp:95] [info] [thread 4048967] [processSymbol] publish marketDataEvent\n[2024-09-01 13:02:08.491] [main_logger] [EventBus.h:59] [info] [thread 4048967] [publish] publish event: 15MarketDataEvent\n[2024-09-01 13:02:08.492] [main_logger] [StrategyManager.cpp:38] [info] [thread 4048967] [processSignals] publish orderEvent: BTC-USDT\n[2024-09-01 13:02:08.492] [main_logger] [EventBus.h:59] [info] [thread 4048967] [publish] publish event: 10OrderEvent\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e日志显示，readingLoop 确实开始执行，但在处理完一个市场数据事件后就没有继续。这暗示可能存在死锁。\u003c/p\u003e","title":"Lock Free Queue Application"},{"content":"Const #Owner: More_surface Ted Created time: July 25, 2024 4:59 PM\nconst 可以用来修饰变量、函数、指针等。\n修饰变量 当修饰变量时，意味着该变量为只读变量，即不能被修改。\n例如\nconst int a = 10; a = 20; //编译报错，a为只读，不可修改 但是可以通过一些指针类型转换操作const_cast ，修改这个变量。\n例如\nint main(){ const int a = 10; const int* p = \u0026amp;a; // p是指向const int类型的对象 int* q = const_cast\u0026lt;int*\u0026gt;(p); // 类型转换，将p转换成指向int型对象的指针 *q = 20; // 通过指针操作修改 const a的值 std::cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; std::ends; // 输出结果 仍然是10 return 0; } 输出结果不变，归功于编译器醉做了优化，编译时把代码替换为了如下所示。\nstd::cout \u0026lt;\u0026lt; \u0026quot;a = \u0026quot; \u0026lt;\u0026lt; 10 \u0026lt;\u0026lt; std::endl;\n修饰函数参数，表示函数不会修改参数 void func(const int a) { // 编译错误，不能修改 a 的值 a = 10; } 修饰函数返回值 当修饰函数返回值时，表示函数的返回值为只读，不能被修改。好处是可以使函数的返回值更加安全，不会被误修改。\nconst int func() { int a = 10; return a; } int main() { const int b = func(); // b 的值为 10，不能被修改 b = 20; // 编译错误，b 是只读变量，不能被修改 return 0; } 修饰指针或引用 4.1. const修饰的是指针所指向的变量，而不是指针本身；指针本身可以被修改(可以指向新的变量)，但是不能通过指针修改所指向的变量。\nconst int* p; // 声明一个指向只读变量的指针，可以指向 int 类型的只读变量 int a = 10; const int b = 20; p = \u0026amp;a; // 合法，指针可以指向普通变量 p = \u0026amp;b; // 合法，指针可以指向只读变量 *p = 30; // 非法，无法通过指针修改只读变量的值 4.2. 只读指针\nconst关键字修饰的是指针本身，使得指针本身成为只读变量。\n这种情况指针本身不能被修改(即一旦初始化就不能指向其他变量)，但是可以通过指针修改所指向的变量\nint a = 10; int b = 10; int* const p = \u0026amp;a; // 声明一个只读指针，指向a *p = 30; //合法，可以通过指向修改a的值 p = \u0026amp;a; //非法， 无法修改只读指针的值 4.3. 只读指针指向只读变量\nconst同时修饰指针本身和指针所指向的变量，使得指针本身和所指向的变量都变成只读变量。\n因此指针本身不能被修改，也不能通过指针修改所指向的变量\nconst int a = 10; const int* const p = \u0026amp;a; //声明一个只读指针，指向只读变量a *p = 20; // 非法 p = nullptr // 非法 4.4. 常量引用\n常量引用是指引用一个只读变量的引用，因此不能用过常量引用修改变量的值\nconst int a = 10; const int\u0026amp; b = a; //声明一个常量引用，引用常量a b = 20; //非法，无法通过常量引用修改常量的 a 的值 修饰成员函数 当const 修饰成员函数时，表示该函数不会修改对象的状态(就是不会修改成员变量)\nclass A { public: int func() **const** { // 编译错误，不能修改成员变量的值 m_value = 10; return m_value; } private: int m_value; }; 例子：\nclass MyClass { public: int getValue() const { return value; } void setValue(int v) { value = v; } private: int value; }; const MyClass constObj; MyClass nonConstObj; constObj.getValue(); // 正确：可以在 const 对象上调用 const 成员函数 nonConstObj.getValue(); // 也正确：非 const 对象也可以调用 const 成员函数 // constObj.setValue(10); // 错误：不能在 const 对象上调用非 const 成员函数 nonConstObj.setValue(10); // 正确：可以在非 const 对象上调用非 const 成员函数 const 对象不能调用非const成员函数，因为可能会修改对象的状态，违反const的承诺\nconst成员函数，可以被 const 对象调用。\n优点：\n安全性，确保 const对象不会被意外修改 接口设计：允许创建只读接口，提高代码的可读性和可维护性 ","date":"4 August 2024","permalink":"/blog/two/","section":"Blog","summary":"\u003ch1 id=\"const\" class=\"relative group\"\u003eConst \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#const\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e\u003cp\u003eOwner: More_surface Ted\nCreated time: July 25, 2024 4:59 PM\u003c/p\u003e\n\u003cp\u003econst 可以用来修饰变量、函数、指针等。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e修饰变量\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e当修饰变量时，意味着该变量为只读变量，即不能被修改。\u003c/p\u003e\n\u003cp\u003e例如\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//编译报错，a为只读，不可修改\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e但是可以通过一些指针类型转换操作\u003ca href=\"https://www.notion.so/const_cast-45bcd744ee374253abebd58b83a5c812?pvs=21\" target=\"_blank\" rel=\"noreferrer\"\u003econst_cast\u003c/a\u003e ，修改这个变量。\u003c/p\u003e\n\u003cp\u003e例如\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// p是指向const int类型的对象\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003econst_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 类型转换，将p转换成指向int型对象的指针\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 通过指针操作修改 const a的值\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eends\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 输出结果 仍然是10\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e输出结果不变，归功于编译器醉做了优化，编译时把代码替换为了如下所示。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003estd::cout \u0026lt;\u0026lt; \u0026quot;a = \u0026quot; \u0026lt;\u0026lt; 10 \u0026lt;\u0026lt; std::endl;\u003c/code\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e修饰函数参数，表示函数不会修改参数\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 编译错误，不能修改 a 的值\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e修饰函数返回值\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e当修饰函数返回值时，表示函数的返回值为只读，不能被修改。好处是可以使函数的返回值更加安全，不会被误修改。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// b 的值为 10，不能被修改\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 编译错误，b 是只读变量，不能被修改\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e修饰指针或引用\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e4.1. const修饰的是指针所指向的变量，而不是指针本身；指针本身可以被修改(可以指向新的变量)，但是不能通过指针修改所指向的变量。\u003c/p\u003e","title":"First Post"},{"content":"This is my first blog post\nint main(){ B b; return 0; } Badge # 新文章！ 短页码 # 警告！ 这个操作是破坏性的！ 别忘了在Twitter上关注我。 Button #button 输出一个样式化的按钮组件，用于突出显示主要操作。它有三个可选参数：\n参数\t描述 href\t按钮应链接到的 URL。 target\t链接的目标。 download\t浏览器是否应下载资源而不是导航到 URL。此参数的值将是下载文件的名称。 示例:\nCall to action 差分数组的主要适用场景是频繁对原始数组的某个区间的元素进行增减\n比如说，我给你输入一个数组 nums，然后又要求给区间 nums[2..6] 全部加 1，再给 nums[3..9] 全部减 3，再给 nums[0..4] 全部加 2，再给\u0026hellip;\n差分数组\ndiff[i] = nums[i] - nums[i - 1]; 构造差分数组\nvector\u0026lt;int\u0026gt;diff(nums.size()); diff[0] = nums[0]; for (int i = 1; i \u0026lt; nums.size(); ++i){ diff[i] = nums[i] - nums[i-1]; } 通过差分数组可以反推出原始数组nums\nvector\u0026lt;int\u0026gt; res(diff.size()); res[0] = diff[0]; for (int i = 1; i \u0026lt; nums.size(); ++i){ res[i] = res[i - 1] + diff[i]; } 按照这样的逻辑，如果需要在数组的某个区间进行增减操作。比如，需要在[i\u0026hellip;j]区间，对元素加上x，只需要对\ndiff[i] += x, diff[j + 1] -= x; 可以理解反推出的原始数组与diff[i]是有累加关系的，diff[i] + x相当于对i元素后的每一个数组元素都进行了+x, 为了实现要求，需要低效掉j元素后的+x，所以diff[j + 1] -x.\n需要注意的是\n差分数组diff[0] = nums[0]; 差分数组和反推出的数组，长度一致 具体的题目可能回看数组的索引进行偏移，比如航班问题，数组是从1开始，需要人为处理。 最开始的差分数组可以全为0 ","date":"3 August 2024","permalink":"/blog/two-first-post/","section":"Blog","summary":"\u003cp\u003eThis is my first blog post\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eB\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"badge\" class=\"relative group\"\u003eBadge \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#badge\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cspan class=\"flex\"\u003e\n  \u003cspan\n    class=\"ms-1 rounded-md border border-primary-400 px-1 py-[1px] text-xs font-normal text-primary-700 dark:border-primary-600 dark:text-primary-400\"\n  \u003e\n    \n新文章！\n\n  \u003c/span\u003e\n\u003c/span\u003e\n\n\n\u003ch3 id=\"短页码\" class=\"relative group\"\u003e短页码 \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#%e7%9f%ad%e9%a1%b5%e7%a0%81\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cdiv class=\"flex rounded-md bg-primary-100 px-4 py-3 dark:bg-primary-900\"\u003e\n  \u003cspan class=\"pe-3 text-primary-400\"\u003e\n    \u003cspan class=\"icon relative inline-block px-1 align-text-bottom\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"\u003e\u003cpath fill=\"currentColor\" d=\"M506.3 417l-213.3-364c-16.33-28-57.54-28-73.98 0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6C502.1 480 522.6 445 506.3 417zM232 168c0-13.25 10.75-24 24-24S280 154.8 280 168v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zM256 416c-17.36 0-31.44-14.08-31.44-31.44c0-17.36 14.07-31.44 31.44-31.44s31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z\"/\u003e\u003c/svg\u003e\n\u003c/span\u003e\n  \u003c/span\u003e\n  \u003cspan class=\"dark:text-neutral-300\"\u003e\u003cstrong\u003e警告！\u003c/strong\u003e 这个操作是破坏性的！\u003c/span\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"flex rounded-md bg-primary-100 px-4 py-3 dark:bg-primary-900\"\u003e\n  \u003cspan class=\"pe-3 text-primary-400\"\u003e\n    \u003cspan class=\"icon relative inline-block px-1 align-text-bottom\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"\u003e\u003cpath fill=\"currentColor\" d=\"M459.37 151.716c.325 4.548.325 9.097.325 13.645 0 138.72-105.583 298.558-298.558 298.558-59.452 0-114.68-17.219-161.137-47.106 8.447.974 16.568 1.299 25.34 1.299 49.055 0 94.213-16.568 130.274-44.832-46.132-.975-84.792-31.188-98.112-72.772 6.498.974 12.995 1.624 19.818 1.624 9.421 0 18.843-1.3 27.614-3.573-48.081-9.747-84.143-51.98-84.143-102.985v-1.299c13.969 7.797 30.214 12.67 47.431 13.319-28.264-18.843-46.781-51.005-46.781-87.391 0-19.492 5.197-37.36 14.294-52.954 51.655 63.675 129.3 105.258 216.365 109.807-1.624-7.797-2.599-15.918-2.599-24.04 0-57.828 46.782-104.934 104.934-104.934 30.213 0 57.502 12.67 76.67 33.137 23.715-4.548 46.456-13.32 66.599-25.34-7.798 24.366-24.366 44.833-46.132 57.827 21.117-2.273 41.584-8.122 60.426-16.243-14.292 20.791-32.161 39.308-52.628 54.253z\"/\u003e\u003c/svg\u003e\n\u003c/span\u003e\n  \u003c/span\u003e\n  \u003cspan class=\"dark:text-neutral-300\"\u003e别忘了在Twitter上\u003ca href=\"https://twitter.com/jpanther\" target=\"_blank\" rel=\"noreferrer\"\u003e关注我\u003c/a\u003e。\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"button\" class=\"relative group\"\u003eButton \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#button\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\u003cp\u003ebutton 输出一个样式化的按钮组件，用于突出显示主要操作。它有三个可选参数：\u003c/p\u003e","title":"two First Post"},{"content":"这是我的第一篇blog，希望能分享更多的技术，生活、兴趣在这个Blog上。欢迎大家查看评论。\nWelcome to my inaugural blog post! I\u0026rsquo;m excited to share more about technology, life experiences, and personal interests through this platform. Feel free to check out the comments section and join the conversation!\n","date":"3 August 2024","permalink":"/blog/firstpost/","section":"Blog","summary":"\u003cp\u003e这是我的第一篇blog，希望能分享更多的技术，生活、兴趣在这个Blog上。欢迎大家查看评论。\u003c/p\u003e\n\u003cp\u003eWelcome to my inaugural blog post! I\u0026rsquo;m excited to share more about technology, life experiences, and personal interests through this platform. Feel free to check out the comments section and join the conversation!\u003c/p\u003e","title":"My First Post"},{"content":"Believe in the future, believe that technology can change the world; embrace AI, embrace the future.\nMy Resume # Download Resume (PDF) Contact # Email: lineyua66@gmail.com GitHub: GitHub X: @X ","date":null,"permalink":"/about/","section":"About Me","summary":"\u003cp\u003eBelieve in the future, believe that technology can change the world; embrace AI, embrace the future.\u003c/p\u003e\n\u003ch2 id=\"my-resume\" class=\"relative group\"\u003eMy Resume \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#my-resume\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cembed src=\"/resume/YUWENJUN_C++.pdf\" type=\"application/pdf\" width=\"100%\" height=\"600px\" /\u003e\n\u003ca\n  class=\"inline-block !rounded-md bg-primary-600 px-4 py-1 !text-neutral !no-underline hover:!bg-primary-500 dark:bg-primary-800 dark:hover:!bg-primary-700\"\n  href=\"/resume/YUWENJUN_C\u0026#43;\u0026#43;.pdf\"\n  target=\"_blank\"\n  \n  role=\"button\"\n\u003e\n  \nDownload Resume (PDF)\n\n\u003c/a\u003e\n\n\u003ch2 id=\"contact\" class=\"relative group\"\u003eContact \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#contact\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003eEmail: \u003ca href=\"mailto:lineyua66@gmail.com\"\u003elineyua66@gmail.com\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGitHub: \u003ca href=\"https://github.com/code-agree\" target=\"_blank\" rel=\"noreferrer\"\u003eGitHub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eX: \u003ca href=\"https://twitter.com/flight_from_\" target=\"_blank\" rel=\"noreferrer\"\u003e@X\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"About Me"},{"content":"","date":null,"permalink":"/tags/ai/","section":"Tags","summary":"","title":"AI"},{"content":"","date":null,"permalink":"/tags/hft/","section":"Tags","summary":"","title":"HFT"},{"content":"This is my projects. Each project represents my exploration and growth in different fields.\n","date":null,"permalink":"/projects/","section":"Projects","summary":"\u003cp\u003eThis is my projects. Each project represents my exploration and growth in different fields.\u003c/p\u003e","title":"Projects"},{"content":"","date":null,"permalink":"/tags/prompt/","section":"Tags","summary":"","title":"Prompt"},{"content":"project description #Prompt Manager is a Chrome extension designed to help users save, manage, and quickly access frequently used prompts. It\u0026rsquo;s perfect for writers, customer service representatives, or anyone who often uses repetitive text snippets in their daily work.\nMain features #Save and manage text prompts Search through saved prompts Sort prompts by time or custom order Edit existing prompts Delete prompts One-click copy of prompts Import and export prompts for backup or transfer\nTechnology stack # React TypeScript TailwindCSS Vite Chrome Extension API Project link # GitHub 仓库 ","date":"3 August 2024","permalink":"/projects/first/","section":"Projects","summary":"\u003ch2 id=\"project-description\" class=\"relative group\"\u003eproject description \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#project-description\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003ePrompt Manager is a Chrome extension designed to help users save, manage, and quickly access frequently used prompts. It\u0026rsquo;s perfect for writers, customer service representatives, or anyone who often uses repetitive text snippets in their daily work.\u003c/p\u003e\n\u003ch2 id=\"main-features\" class=\"relative group\"\u003eMain features \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#main-features\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003eSave and manage text prompts\nSearch through saved prompts\nSort prompts by time or custom order\nEdit existing prompts\nDelete prompts\nOne-click copy of prompts\nImport and export prompts for backup or transfer\u003c/p\u003e","title":"Prompt manager"},{"content":"","date":null,"permalink":"/tags/quant/","section":"Tags","summary":"","title":"Quant"},{"content":"High-Frequency Trading System #Project Overview #Independently designed and developed a cutting-edge high-frequency trading system with industry-leading performance.\nKey Features # Modular Architecture: Utilizing advanced C++17 and key design patterns Observer pattern for event-driven architecture Factory method for flexible algorithm creation Strategy pattern for interchangeable trading strategies Ultra-Low Latency Event Bus: Implemented using lock-free queues Optimized WebSocket: For high-throughput market data and order execution Memory-Mapped File I/O: Leveraging kernel-level page cache for asynchronous, low-latency disk operations Performance Metrics # Metric Performance Order Execution Latency \u0026lt; 50 μs Message Processing Throughput \u0026gt; 1,000 messages/second Technical Stack # C++ (C++17) WebSockets Lock-free algorithms Memory-mapped I/O SIMD optimization Event-driven architecture Specializations # Ultra-low latency systems Concurrent programming Design patterns Market microstructure Kernel-level optimizations Project Highlights # Advanced C++ Implementation: Leveraged cutting-edge C++17 features to create a robust and efficient system architecture.\nOptimized Performance: Achieved industry-leading latency and throughput metrics through careful optimization and innovative design.\nScalable Architecture: Designed a modular system that can easily adapt to different trading strategies and market conditions.\nLow-Level Optimizations: Utilized kernel-level optimizations and SIMD instructions to maximize performance.\nReliable Persistence: Implemented memory-mapped I/O for efficient and reliable data persistence with minimal impact on system latency.\nConclusion #This project demonstrates a commitment to pushing the boundaries of performance in financial technology, consistently meeting and exceeding industry benchmarks for speed and reliability.\n","date":"3 August 2024","permalink":"/projects/quant_system/","section":"Projects","summary":"\u003ch1 id=\"high-frequency-trading-system\" class=\"relative group\"\u003eHigh-Frequency Trading System \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#high-frequency-trading-system\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h1\u003e\u003ch2 id=\"project-overview\" class=\"relative group\"\u003eProject Overview \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#project-overview\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cp\u003eIndependently designed and developed a cutting-edge high-frequency trading system with industry-leading performance.\u003c/p\u003e\n\u003ch2 id=\"key-features\" class=\"relative group\"\u003eKey Features \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#key-features\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eModular Architecture\u003c/strong\u003e: Utilizing advanced C++17 and key design patterns\n\u003cul\u003e\n\u003cli\u003eObserver pattern for event-driven architecture\u003c/li\u003e\n\u003cli\u003eFactory method for flexible algorithm creation\u003c/li\u003e\n\u003cli\u003eStrategy pattern for interchangeable trading strategies\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUltra-Low Latency Event Bus\u003c/strong\u003e: Implemented using lock-free queues\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOptimized WebSocket\u003c/strong\u003e: For high-throughput market data and order execution\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMemory-Mapped File I/O\u003c/strong\u003e: Leveraging kernel-level page cache for asynchronous, low-latency disk operations\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"performance-metrics\" class=\"relative group\"\u003ePerformance Metrics \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#performance-metrics\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eMetric\u003c/th\u003e\n          \u003cth\u003ePerformance\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eOrder Execution Latency\u003c/td\u003e\n          \u003ctd\u003e\u0026lt; 50 μs\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eMessage Processing Throughput\u003c/td\u003e\n          \u003ctd\u003e\u0026gt; 1,000 messages/second\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"technical-stack\" class=\"relative group\"\u003eTechnical Stack \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#technical-stack\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003eC++ (C++17)\u003c/li\u003e\n\u003cli\u003eWebSockets\u003c/li\u003e\n\u003cli\u003eLock-free algorithms\u003c/li\u003e\n\u003cli\u003eMemory-mapped I/O\u003c/li\u003e\n\u003cli\u003eSIMD optimization\u003c/li\u003e\n\u003cli\u003eEvent-driven architecture\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"specializations\" class=\"relative group\"\u003eSpecializations \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#specializations\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003cul\u003e\n\u003cli\u003eUltra-low latency systems\u003c/li\u003e\n\u003cli\u003eConcurrent programming\u003c/li\u003e\n\u003cli\u003eDesign patterns\u003c/li\u003e\n\u003cli\u003eMarket microstructure\u003c/li\u003e\n\u003cli\u003eKernel-level optimizations\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"project-highlights\" class=\"relative group\"\u003eProject Highlights \u003cspan class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100\"\u003e\u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\" style=\"text-decoration-line: none !important;\" href=\"#project-highlights\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAdvanced C++ Implementation\u003c/strong\u003e: Leveraged cutting-edge C++17 features to create a robust and efficient system architecture.\u003c/p\u003e","title":"Quant system"},{"content":"Hey there! I\u0026rsquo;m Andrea, freshly minted with a Master\u0026rsquo;s degree in Mathematics and a passion for the applied side of things! With a strong focus on the applied math track, I\u0026rsquo;m all about cracking codes and uncovering quantitative solutions in real-world scenarios.\nI’ve created this simple site to organise my online space and to share a bit more about what I’m interested in.\n","date":"3 April 2024","permalink":"/aboutme/","section":"Yu's Space","summary":"\u003cp\u003eHey there! I\u0026rsquo;m Andrea, freshly minted with a Master\u0026rsquo;s degree in Mathematics and a passion for the applied side of things! With a strong focus on the applied math track, I\u0026rsquo;m all about cracking codes and uncovering quantitative solutions in real-world scenarios.\u003c/p\u003e\n\u003cp\u003eI’ve created this simple site to organise my online space and to share a bit more about what I’m interested in.\u003c/p\u003e","title":"About"},{"content":"","date":null,"permalink":"/blog/","section":"Blog","summary":"","title":"Blog"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]