<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HFT System Design on Yu's Space</title><link>https://example.org/tags/hft-system-design/</link><description>Recent content in HFT System Design on Yu's Space</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 03 Dec 2024 01:01:26 +0800</lastBuildDate><atom:link href="https://example.org/tags/hft-system-design/index.xml" rel="self" type="application/rss+xml"/><item><title>高频交易场景下的多WS连接低延时方案设计</title><link>https://example.org/blog/multiquotedata/</link><pubDate>Tue, 03 Dec 2024 01:01:26 +0800</pubDate><guid>https://example.org/blog/multiquotedata/</guid><description>&lt;h2 id="1-业务背景与挑战" class="relative group">1. 业务背景与挑战 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#1-%e4%b8%9a%e5%8a%a1%e8%83%8c%e6%99%af%e4%b8%8e%e6%8c%91%e6%88%98" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>在高频交易系统中，需要同时维护多个WebSocket连接以订阅不同交易所的行情数据。主要挑战包括：&lt;/p>
&lt;ul>
&lt;li>需要处理多个交易所的并发连接&lt;/li>
&lt;li>对消息处理延迟有严格要求&lt;/li>
&lt;li>需要保证数据处理的稳定性&lt;/li>
&lt;li>系统资源（CPU、内存）的高效利用&lt;/li>
&lt;/ul>
&lt;h2 id="2-传统方案的局限" class="relative group">2. 传统方案的局限 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#2-%e4%bc%a0%e7%bb%9f%e6%96%b9%e6%a1%88%e7%9a%84%e5%b1%80%e9%99%90" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;h3 id="21-传统消息队列方案" class="relative group">2.1 传统消息队列方案 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#21-%e4%bc%a0%e7%bb%9f%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e6%96%b9%e6%a1%88" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 常见的消息处理流程
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">WebSocket接收&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="err">消息队列&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="err">处理线程池&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="err">业务处理&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>存在的问题：&lt;/p>
&lt;ul>
&lt;li>消息经过队列带来额外延迟&lt;/li>
&lt;li>线程切换开销大&lt;/li>
&lt;li>内存拷贝次数多&lt;/li>
&lt;li>资源竞争导致性能不稳定&lt;/li>
&lt;/ul>
&lt;h2 id="3-优化方案设计" class="relative group">3. 优化方案设计 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#3-%e4%bc%98%e5%8c%96%e6%96%b9%e6%a1%88%e8%ae%be%e8%ae%a1" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;h3 id="31-核心设计理念" class="relative group">3.1 核心设计理念 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#31-%e6%a0%b8%e5%bf%83%e8%ae%be%e8%ae%a1%e7%90%86%e5%bf%b5" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;ol>
&lt;li>零拷贝数据处理&lt;/li>
&lt;li>CPU亲和性绑定&lt;/li>
&lt;li>预分配内存&lt;/li>
&lt;li>每个连接独立处理&lt;/li>
&lt;/ol>
&lt;h3 id="32-关键组件设计" class="relative group">3.2 关键组件设计 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#32-%e5%85%b3%e9%94%ae%e7%bb%84%e4%bb%b6%e8%ae%be%e8%ae%a1" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">ConnectionContext&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 连接基础信息
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">WebSocketClient&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">client&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">endpoint_name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 性能优化相关
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">cpu_core&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// CPU核心绑定
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">direct_buffer&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// 预分配缓冲区
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="k">constexpr&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">BUFFER_SIZE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">64&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MessageProcessor&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">dedicated_processor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 资源管理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">ConnectionContext&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">direct_buffer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">munlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">direct_buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BUFFER_SIZE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">munmap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">direct_buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BUFFER_SIZE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 禁用拷贝以保证资源安全
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">ConnectionContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">ConnectionContext&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ConnectionContext&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">ConnectionContext&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="33-优化细节" class="relative group">3.3 优化细节 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#33-%e4%bc%98%e5%8c%96%e7%bb%86%e8%8a%82" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;ol>
&lt;li>内存管理优化&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用大页内存和内存锁定
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mmap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BUFFER_SIZE&lt;/span>&lt;span class="p">,&lt;/span> 
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PROT_READ&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">PROT_WRITE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MAP_PRIVATE&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">MAP_ANONYMOUS&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BUFFER_SIZE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>原因：&lt;/p></description></item><item><title>内存映射（mmap）与零拷贝技术：深入理解和实践</title><link>https://example.org/blog/zero_copy/</link><pubDate>Tue, 22 Oct 2024 01:23:46 +0800</pubDate><guid>https://example.org/blog/zero_copy/</guid><description>&lt;h2 id="1-概述" class="relative group">1. 概述 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#1-%e6%a6%82%e8%bf%b0" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>内存映射（mmap）是一种将文件或设备映射到内存的方法，而零拷贝是一种减少或避免数据在内核空间和用户空间之间不必要复制的技术。这两个概念密切相关，但又有所不同。&lt;/p>
&lt;h2 id="2-mmap-是零拷贝吗" class="relative group">2. mmap 是零拷贝吗？ &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#2-mmap-%e6%98%af%e9%9b%b6%e6%8b%b7%e8%b4%9d%e5%90%97" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>答案是：&lt;strong>mmap 本身不是零拷贝技术，但它可以实现零拷贝的效果&lt;/strong>。&lt;/p>
&lt;h3 id="21-mmap-的工作原理" class="relative group">2.1 mmap 的工作原理 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#21-mmap-%e7%9a%84%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;ol>
&lt;li>当调用 mmap 时，操作系统会在虚拟内存中创建一个新的内存区域。&lt;/li>
&lt;li>这个内存区域会映射到文件系统缓存（page cache）中的物理页面。&lt;/li>
&lt;li>当程序访问这个内存区域时，如果相应的页面不在内存中，会触发缺页中断，操作系统会从磁盘加载数据到内存。&lt;/li>
&lt;/ol>
&lt;h3 id="22-为什么-mmap-可以实现零拷贝" class="relative group">2.2 为什么 mmap 可以实现零拷贝 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#22-%e4%b8%ba%e4%bb%80%e4%b9%88-mmap-%e5%8f%af%e4%bb%a5%e5%ae%9e%e7%8e%b0%e9%9b%b6%e6%8b%b7%e8%b4%9d" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;ul>
&lt;li>一旦映射建立，用户进程可以直接读写这个内存区域，而无需在用户空间和内核空间之间进行数据复制。&lt;/li>
&lt;li>对于读操作，数据从磁盘读入 page cache 后，可以直接被用户进程访问，无需额外复制。&lt;/li>
&lt;li>对于写操作，修改直接发生在 page cache 上，操作系统会在适当的时候将修改同步到磁盘。&lt;/li>
&lt;/ul>
&lt;h2 id="3-mmap-与传统-io-的比较" class="relative group">3. mmap 与传统 I/O 的比较 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#3-mmap-%e4%b8%8e%e4%bc%a0%e7%bb%9f-io-%e7%9a%84%e6%af%94%e8%be%83" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;h3 id="31-传统-read-系统调用" class="relative group">3.1 传统 read 系统调用 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#31-%e4%bc%a0%e7%bb%9f-read-%e7%b3%bb%e7%bb%9f%e8%b0%83%e7%94%a8" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4096&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ssize_t&lt;/span> &lt;span class="n">bytes_read&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个过程涉及两次数据拷贝：&lt;/p></description></item><item><title>高频交易系统中的位域压缩技术</title><link>https://example.org/blog/bit_field_compression/</link><pubDate>Sun, 13 Oct 2024 03:18:35 +0800</pubDate><guid>https://example.org/blog/bit_field_compression/</guid><description>&lt;h2 id="1-基础概念" class="relative group">1. 基础概念 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#1-%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;h3 id="11-二进制表示" class="relative group">1.1 二进制表示 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#11-%e4%ba%8c%e8%bf%9b%e5%88%b6%e8%a1%a8%e7%a4%ba" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;ul>
&lt;li>计算机使用二进制（0和1）存储和处理数据&lt;/li>
&lt;li>1 byte = 8 bits&lt;/li>
&lt;li>32位整数可以表示从 0 到 2^32 - 1 的数值&lt;/li>
&lt;/ul>
&lt;h3 id="12-位操作基础" class="relative group">1.2 位操作基础 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#12-%e4%bd%8d%e6%93%8d%e4%bd%9c%e5%9f%ba%e7%a1%80" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;ul>
&lt;li>与操作 (&amp;amp;): 两位都为1时结果为1，否则为0&lt;/li>
&lt;li>或操作 (|): 至少一位为1时结果为1，否则为0&lt;/li>
&lt;li>异或操作 (^): 两位不同时结果为1，相同时为0&lt;/li>
&lt;li>非操作 (~): 将每一位取反&lt;/li>
&lt;li>左移 (&amp;laquo;): 将所有位向左移动，右侧补0&lt;/li>
&lt;li>右移 (&amp;raquo;): 将所有位向右移动，左侧补0或符号位&lt;/li>
&lt;/ul>
&lt;p>示例：&lt;/p></description></item><item><title>高频交易系统中的重连机制最佳实践</title><link>https://example.org/blog/atom/</link><pubDate>Fri, 27 Sep 2024 01:35:21 +0800</pubDate><guid>https://example.org/blog/atom/</guid><description>&lt;h1 id="高频交易系统中的重连机制最佳实践" class="relative group">高频交易系统中的重连机制最佳实践 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#%e9%ab%98%e9%a2%91%e4%ba%a4%e6%98%93%e7%b3%bb%e7%bb%9f%e4%b8%ad%e7%9a%84%e9%87%8d%e8%bf%9e%e6%9c%ba%e5%88%b6%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h1>&lt;h2 id="背景" class="relative group">背景 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#%e8%83%8c%e6%99%af" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>在高频交易系统中，网络连接的稳定性至关重要。然而，由于网络波动或其他原因，连接可能会中断。为了确保系统的连续性和可靠性，需要实现一个高效的重连机制。然而，频繁的重连检查和处理可能导致重复重连，影响系统性能。&lt;/p>
&lt;h2 id="问题描述" class="relative group">问题描述 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#%e9%97%ae%e9%a2%98%e6%8f%8f%e8%bf%b0" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>在现有实现中，主循环频繁检查 &lt;code>m_client-&amp;gt;needsReconnection()&lt;/code>，如果需要重连，则调用 &lt;code>handleReconnect()&lt;/code>。然而，由于主循环速度很快，可能在 &lt;code>resetReconnectionFlag()&lt;/code> 生效前再次检查 &lt;code>needsReconnection()&lt;/code>，导致重复调用 &lt;code>handleReconnect()&lt;/code>。&lt;/p>
&lt;h2 id="解决方案" class="relative group">解决方案 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>通过使用原子操作和双重检查机制，确保重连过程的原子性和一致性，避免重复重连。&lt;/p>
&lt;h3 id="1-定义连接状态管理" class="relative group">1. 定义连接状态管理 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#1-%e5%ae%9a%e4%b9%89%e8%bf%9e%e6%8e%a5%e7%8a%b6%e6%80%81%e7%ae%a1%e7%90%86" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>使用原子变量来管理连接状态，确保线程安全。&lt;/p></description></item><item><title>高频交易系统优化：从数据读取到系统平衡的思考过程</title><link>https://example.org/blog/datareader_design/</link><pubDate>Wed, 25 Sep 2024 01:04:59 +0800</pubDate><guid>https://example.org/blog/datareader_design/</guid><description>&lt;h2 id="1-初始问题数据读取效率" class="relative group">1. 初始问题：数据读取效率 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#1-%e5%88%9d%e5%a7%8b%e9%97%ae%e9%a2%98%e6%95%b0%e6%8d%ae%e8%af%bb%e5%8f%96%e6%95%88%e7%8e%87" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>最初，我们关注的是市场数据读取器本身的效率问题。&lt;/p>
&lt;h3 id="11-轮询方式初始状态" class="relative group">1.1 轮询方式（初始状态） &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#11-%e8%bd%ae%e8%af%a2%e6%96%b9%e5%bc%8f%e5%88%9d%e5%a7%8b%e7%8a%b6%e6%80%81" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">MarketDataReader&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">readingLoop&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">running&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">symbol&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">symbols_&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">processSymbol&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">symbol&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">this_thread&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">sleep_for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">milliseconds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>问题：持续轮询即使在没有新数据时也会消耗资源。&lt;/p>
&lt;h3 id="12-条件控制方式" class="relative group">1.2 条件控制方式 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#12-%e6%9d%a1%e4%bb%b6%e6%8e%a7%e5%88%b6%e6%96%b9%e5%bc%8f" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">MarketDataReader&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">readingLoop&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">running&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">conditionMutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dataCondition&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">running&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">symbols_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">symbol&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">symbols_&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">processSymbol&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">symbol&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>改进：减少了不必要的CPU使用，但可能会在高频数据更新时引入延迟。&lt;/p>
&lt;p>思考转变：这个阶段，我们主要关注如何提高单个组件（数据读取器）的效率。&lt;/p>
&lt;h2 id="2-扩展考虑数据读取对其他系统组件的影响" class="relative group">2. 扩展考虑：数据读取对其他系统组件的影响 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#2-%e6%89%a9%e5%b1%95%e8%80%83%e8%99%91%e6%95%b0%e6%8d%ae%e8%af%bb%e5%8f%96%e5%af%b9%e5%85%b6%e4%bb%96%e7%b3%bb%e7%bb%9f%e7%bb%84%e4%bb%b6%e7%9a%84%e5%bd%b1%e5%93%8d" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>随着对系统的深入思考，我们开始考虑数据读取器的行为如何影响整个系统，特别是订单流的执行效率。&lt;/p></description></item><item><title>实现高性能低延迟的交易系统设计</title><link>https://example.org/blog/high_performance/</link><pubDate>Fri, 20 Sep 2024 22:32:08 +0800</pubDate><guid>https://example.org/blog/high_performance/</guid><description>&lt;h1 id="高性能低延迟交易系统设计技术分享-update" class="relative group">高性能低延迟交易系统设计：技术分享 update &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#%e9%ab%98%e6%80%a7%e8%83%bd%e4%bd%8e%e5%bb%b6%e8%bf%9f%e4%ba%a4%e6%98%93%e7%b3%bb%e7%bb%9f%e8%ae%be%e8%ae%a1%e6%8a%80%e6%9c%af%e5%88%86%e4%ba%ab-update" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h1>&lt;p>在高频交易和实时金融系统中，性能和延迟是关键因素。本文将分享一些设计和实现高性能低延迟交易系统的关键技术和策略。&lt;/p>
&lt;h2 id="1-数据结构优化" class="relative group">1. 数据结构优化 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#1-%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e4%bc%98%e5%8c%96" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;h3 id="11-内存映射memory-mapped文件" class="relative group">1.1 内存映射（Memory-Mapped）文件 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#11-%e5%86%85%e5%ad%98%e6%98%a0%e5%b0%84memory-mapped%e6%96%87%e4%bb%b6" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>使用内存映射文件可以显著提高I/O性能，减少系统调用，并允许快速的进程间通信。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MmapOrderBook&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用内存映射文件存储订单簿数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="12-自定义内存池" class="relative group">1.2 自定义内存池 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#12-%e8%87%aa%e5%ae%9a%e4%b9%89%e5%86%85%e5%ad%98%e6%b1%a0" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>实现自定义内存池可以减少内存分配和释放的开销，提高内存使用效率。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">MaxSize&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MemoryPool&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 实现高效的内存分配和回收
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-并发控制" class="relative group">2. 并发控制 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#2-%e5%b9%b6%e5%8f%91%e6%8e%a7%e5%88%b6" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;h3 id="21-细粒度锁" class="relative group">2.1 细粒度锁 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#21-%e7%bb%86%e7%b2%92%e5%ba%a6%e9%94%81" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>使用细粒度锁可以减少锁竞争，提高并发性能。&lt;/p></description></item><item><title>高频交易系统中的高层锁定：必要性与实现</title><link>https://example.org/blog/mutex/</link><pubDate>Wed, 18 Sep 2024 17:29:59 +0800</pubDate><guid>https://example.org/blog/mutex/</guid><description>&lt;p>在高频交易系统的开发中，我们经常面临着性能和正确性之间的权衡。最近，我们在优化订单处理流程时，发现了一个有趣的问题：是否需要在高层组件中实现锁定？本文将深入探讨这个问题，分析其必要性，并展示优化前后的实现。&lt;/p>
&lt;ol>
&lt;li>背景&lt;/li>
&lt;/ol>
&lt;p>我们的系统主要由以下组件构成：&lt;/p>
&lt;ul>
&lt;li>MmapOrderBook：核心数据存储，使用内存映射文件实现&lt;/li>
&lt;li>PositionManager：负责仓位管理&lt;/li>
&lt;li>OrderValidator：负责订单验证&lt;/li>
&lt;li>OrderManager：负责订单处理流程&lt;/li>
&lt;/ul>
&lt;p>最初，我们的实现如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// OrderManager.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="n">OrderManager&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">processOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">MmapOrderBook&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Order&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">orderValidator_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">validateOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">orderBook_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">addOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">position&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">positionManager_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getPosition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">accountId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* instrumentId */&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">position&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">quantity&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isBuy&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nl">quantity&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">quantity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">positionManager_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">updatePosition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 发布订单已处理事件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>问题分析&lt;/li>
&lt;/ol>
&lt;p>虽然 MmapOrderBook 内部使用了分片锁来保证单个操作的线程安全，但我们发现这种方法在处理复合操作时可能存在问题。主要原因如下：&lt;/p>
&lt;p>a) 复合操作的原子性：
processOrder 方法包含多个相关操作（验证、添加、更新仓位），这些操作需要作为一个原子单元执行。&lt;/p>
&lt;p>b) 避免竞态条件：
在验证订单和添加订单之间，系统状态可能发生变化，导致基于过时信息做出决策。&lt;/p>
&lt;p>c) 保持不变量：
某些业务逻辑依赖于多个相关数据的一致状态，需要在整个操作过程中维护这些不变量。&lt;/p>
&lt;p>d) 简化并发模型：
高层锁定可以简化并发模型，使代码更易于理解和维护。&lt;/p>
&lt;p>e) 防止死锁：
复杂操作中可能需要获取多个低层锁，增加死锁风险。高层锁可以降低这种风险。&lt;/p>
&lt;ol start="3">
&lt;li>优化后的实现&lt;/li>
&lt;/ol>
&lt;p>考虑到上述因素，我们决定在 OrderManager 和 PositionManager 中引入高层锁定：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// OrderManager.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">OrderManager&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">processOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">MmapOrderBook&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Order&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MmapOrderBook&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">orderBook_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PositionManager&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">positionManager_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">OrderValidator&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">orderValidator_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">mutable&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_mutex&lt;/span> &lt;span class="n">mutex_&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 新增：读写锁
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// OrderManager.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="n">OrderManager&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">processOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">MmapOrderBook&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Order&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 写锁
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">orderValidator_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">validateOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">orderBook_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">addOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">position&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">positionManager_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getPosition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">accountId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* instrumentId */&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">position&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">quantity&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isBuy&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nl">quantity&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">quantity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">positionManager_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">updatePosition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 发布订单已处理事件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// PositionManager.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">PositionManager&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">updatePosition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">MmapOrderBook&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Position&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">position&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">optional&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MmapOrderBook&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Position&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">getPosition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int64_t&lt;/span> &lt;span class="n">accountId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int64_t&lt;/span> &lt;span class="n">instrumentId&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MmapOrderBook&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">orderBook_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">mutable&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_mutex&lt;/span> &lt;span class="n">mutex_&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 新增：读写锁
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// PositionManager.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="n">PositionManager&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">updatePosition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">MmapOrderBook&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Position&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">position&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 写锁
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">orderBook_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">updatePosition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">optional&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MmapOrderBook&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Position&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">PositionManager&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getPosition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int64_t&lt;/span> &lt;span class="n">accountId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int64_t&lt;/span> &lt;span class="n">instrumentId&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">shared_mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mutex_&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 读锁
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">orderBook_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">getPosition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">accountId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">instrumentId&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>优化效果&lt;/li>
&lt;/ol>
&lt;p>通过引入高层锁定，我们实现了以下目标：&lt;/p></description></item><item><title>高频交易系统优化：从WebSocket到市场数据处理的全面解析</title><link>https://example.org/blog/queue_usage2/</link><pubDate>Sun, 15 Sep 2024 04:03:51 +0800</pubDate><guid>https://example.org/blog/queue_usage2/</guid><description>&lt;h1 id="高频交易系统优化从websocket到市场数据处理的全面解析" class="relative group">高频交易系统优化：从WebSocket到市场数据处理的全面解析 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#%e9%ab%98%e9%a2%91%e4%ba%a4%e6%98%93%e7%b3%bb%e7%bb%9f%e4%bc%98%e5%8c%96%e4%bb%8ewebsocket%e5%88%b0%e5%b8%82%e5%9c%ba%e6%95%b0%e6%8d%ae%e5%a4%84%e7%90%86%e7%9a%84%e5%85%a8%e9%9d%a2%e8%a7%a3%e6%9e%90" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h1>&lt;p>在当今竞争激烈的金融市场中,高频交易(HFT)系统的性能直接关系到交易策略的成功与否。本文将深入探讨高频交易系统中两个关键环节的优化：WebSocket消息接收机制和市场数据处理。我们将分析当前最佳实践,探讨潜在的优化方向,并提供具体的代码示例。&lt;/p>
&lt;h2 id="1-websocket消息接收机制优化" class="relative group">1. WebSocket消息接收机制优化 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#1-websocket%e6%b6%88%e6%81%af%e6%8e%a5%e6%94%b6%e6%9c%ba%e5%88%b6%e4%bc%98%e5%8c%96" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>在高频交易系统中,每一毫秒的延迟都可能导致巨大的经济损失。因此,优化WebSocket消息的接收机制对于系统的整体性能至关重要。&lt;/p>
&lt;h3 id="11-websocketclient类设计与实现" class="relative group">1.1 WebSocketClient类设计与实现 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#11-websocketclient%e7%b1%bb%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%ae%9e%e7%8e%b0" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>以下是一个高效的WebSocketClient类的实现示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">WebSocketClient&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">using&lt;/span> &lt;span class="n">MessageHandler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">function&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WebSocketClient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="cm">/* 构造函数参数 */&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">ws_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">nullptr&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">running_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">false&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">receiveMessages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MessageHandler&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">ws_&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">runtime_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;WebSocket is not connected&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">constexpr&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">BUFFER_SIZE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1024&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 1MB buffer
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BUFFER_SIZE&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">running_&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ws_&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">receiveFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 连接关闭
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Poco&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Exception&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 仅在关键错误时记录日志
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 考虑添加重连逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">start&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">running_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">stop&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">running_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Poco&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Net&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">WebSocket&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">ws_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">running_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="12-关键优化点" class="relative group">1.2 关键优化点 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#12-%e5%85%b3%e9%94%ae%e4%bc%98%e5%8c%96%e7%82%b9" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>大缓冲区&lt;/strong>: 使用1MB的缓冲区大幅减少系统调用次数,提高吞吐量。&lt;/li>
&lt;li>&lt;strong>零拷贝接口&lt;/strong>: 通过&lt;code>MessageHandler&lt;/code>直接传递原始数据指针和长度,避免不必要的内存拷贝。&lt;/li>
&lt;li>&lt;strong>简化的错误处理&lt;/strong>: 只在关键错误时记录日志,减少正常操作中的开销。&lt;/li>
&lt;li>&lt;strong>原子操作控制&lt;/strong>: 使用&lt;code>std::atomic&amp;lt;bool&amp;gt;&lt;/code>安全地控制接收循环。&lt;/li>
&lt;/ol>
&lt;h3 id="13-在quote进程中的应用" class="relative group">1.3 在Quote进程中的应用 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#13-%e5%9c%a8quote%e8%bf%9b%e7%a8%8b%e4%b8%ad%e7%9a%84%e5%ba%94%e7%94%a8" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>在Quote进程中,我们直接在主线程中处理WebSocket消息,以最小化延迟：&lt;/p></description></item><item><title>高频交易系统中市场数据处理：队列的利弊分析</title><link>https://example.org/blog/queue_usage/</link><pubDate>Sun, 15 Sep 2024 03:57:13 +0800</pubDate><guid>https://example.org/blog/queue_usage/</guid><description>&lt;h1 id="高频交易系统中市场数据处理队列的利弊分析" class="relative group">高频交易系统中市场数据处理：队列的利弊分析 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#%e9%ab%98%e9%a2%91%e4%ba%a4%e6%98%93%e7%b3%bb%e7%bb%9f%e4%b8%ad%e5%b8%82%e5%9c%ba%e6%95%b0%e6%8d%ae%e5%a4%84%e7%90%86%e9%98%9f%e5%88%97%e7%9a%84%e5%88%a9%e5%bc%8a%e5%88%86%e6%9e%90" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h1>&lt;p>在高频交易（HFT）系统中，处理市场数据的方式直接影响着系统的性能和延迟。使用队列是一种常见的数据处理方法，但在追求极低延迟的HFT系统中，这种选择是否合适需要仔细考虑。本文将分析使用队列的利弊，并探讨可能的替代方案。&lt;/p>
&lt;h2 id="1-使用队列的优势" class="relative group">1. 使用队列的优势 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#1-%e4%bd%bf%e7%94%a8%e9%98%9f%e5%88%97%e7%9a%84%e4%bc%98%e5%8a%bf" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>解耦和缓冲&lt;/strong>：队列可以有效地解耦数据生产者（如市场数据源）和消费者（如策略引擎），提供一个缓冲区来处理突发的数据流。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>负载均衡&lt;/strong>：在多线程处理中，队列可以帮助分配工作负载，防止某个处理单元过载。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>简化设计&lt;/strong>：队列提供了一个直观的数据流模型，可以简化系统的整体设计。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>容错性&lt;/strong>：队列可以帮助系统更好地处理暂时的处理速度不匹配，增强系统的稳定性。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="2-使用队列的劣势" class="relative group">2. 使用队列的劣势 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#2-%e4%bd%bf%e7%94%a8%e9%98%9f%e5%88%97%e7%9a%84%e5%8a%a3%e5%8a%bf" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>额外延迟&lt;/strong>：队列操作（入队和出队）会引入额外的延迟，即使是几微秒的延迟在HFT中也可能造成显著影响。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内存开销&lt;/strong>：队列需要额外的内存分配，这可能导致缓存未命中，进一步增加延迟。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>上下文切换&lt;/strong>：在多线程环境中，队列操作可能导致频繁的上下文切换，增加系统开销。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>顺序处理限制&lt;/strong>：队列通常按FIFO顺序处理数据，这可能不适合需要优先处理某些关键数据的场景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>潜在的锁竞争&lt;/strong>：在高并发情况下，队列可能成为竞争热点，导致性能下降。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="3-替代方案" class="relative group">3. 替代方案 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#3-%e6%9b%bf%e4%bb%a3%e6%96%b9%e6%a1%88" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>考虑到队列可能引入的延迟，以下是一些可能的替代方案：&lt;/p>
&lt;h3 id="31-无锁环形缓冲区lock-free-ring-buffer" class="relative group">3.1 无锁环形缓冲区（Lock-free Ring Buffer） &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#31-%e6%97%a0%e9%94%81%e7%8e%af%e5%bd%a2%e7%bc%93%e5%86%b2%e5%8c%balock-free-ring-buffer" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">Size&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">LockFreeRingBuffer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Size&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">buffer_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">size_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">head_&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">atomic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">size_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tail_&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">size_t&lt;/span> &lt;span class="n">current_tail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tail_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_relaxed&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">size_t&lt;/span> &lt;span class="n">next_tail&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">current_tail&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">Size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">next_tail&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">head_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_acquire&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Buffer is full
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">buffer_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">current_tail&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tail_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">store&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">next_tail&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_release&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">pop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">size_t&lt;/span> &lt;span class="n">current_head&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">head_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_relaxed&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">current_head&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">tail_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_acquire&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Buffer is empty
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">buffer_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">current_head&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">head_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">store&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">current_head&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">Size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">memory_order_release&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种方法可以显著减少锁竞争，降低延迟。&lt;/p></description></item><item><title>Segmentation Fault Caused by std::string in Memory-Mapped File</title><link>https://example.org/blog/string_mmap/</link><pubDate>Thu, 12 Sep 2024 15:23:23 +0800</pubDate><guid>https://example.org/blog/string_mmap/</guid><description>&lt;h1 id="故障复盘报告内存映射文件中的-stdstring-导致的段错误" class="relative group">故障复盘报告：内存映射文件中的 std::string 导致的段错误 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#%e6%95%85%e9%9a%9c%e5%a4%8d%e7%9b%98%e6%8a%a5%e5%91%8a%e5%86%85%e5%ad%98%e6%98%a0%e5%b0%84%e6%96%87%e4%bb%b6%e4%b8%ad%e7%9a%84-stdstring-%e5%af%bc%e8%87%b4%e7%9a%84%e6%ae%b5%e9%94%99%e8%af%af" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h1>&lt;h2 id="1-问题描述" class="relative group">1. 问题描述 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#1-%e9%97%ae%e9%a2%98%e6%8f%8f%e8%bf%b0" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>在使用内存映射文件存储订单数据的过程中，程序在重启后出现段错误。具体表现为在尝试访问存储在内存映射文件中的 &lt;code>Order&lt;/code> 结构体的 &lt;code>id&lt;/code> 字段时，程序崩溃。&lt;/p>
&lt;h2 id="2-错误信息" class="relative group">2. 错误信息 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#2-%e9%94%99%e8%af%af%e4%bf%a1%e6%81%af" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>程序崩溃时的 GDB 调试信息如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>Thread 2 &amp;#34;strategyandtrad&amp;#34; received signal SIGSEGV, Segmentation fault.
[Switching to Thread 0x7ffff6f4c6c0 (LWP 446582)]
__memcmp_sse2 () at ../sysdeps/x86_64/multiarch/memcmp-sse2.S:258
258 ../sysdeps/x86_64/multiarch/memcmp-sse2.S: No such file or directory.
(gdb) bt
#0 __memcmp_sse2 () at ../sysdeps/x86_64/multiarch/memcmp-sse2.S:258
#1 0x000055555556d79b in std::char_traits&amp;lt;char&amp;gt;::compare (__s1=0x7f4710000eb0 &amp;lt;error: Cannot access memory at address 0x7f4710000eb0&amp;gt;, 
 __s2=0x7fffe8000c80 &amp;#34;ORD-1726124231791862593&amp;#34;, __n=23) at /usr/include/c++/12/bits/char_traits.h:385
#2 0x000055555559c599 in std::operator==&amp;lt;char&amp;gt; (__lhs=&amp;lt;error: Cannot access memory at address 0x7f4710000eb0&amp;gt;, __rhs=&amp;#34;ORD-1726124231791862593&amp;#34;)
 at /usr/include/c++/12/bits/basic_string.h:3587
#3 0x000055555561a7fa in MmapOrderBook::Impl::getOrder (this=0x555555776170, orderId=&amp;#34;ORD-1726124231791862593&amp;#34;)
 at /home/hft_trading_system/strategyandtradingwitheventbus/src/order_management/mmap_order_book_impl.cpp:211
...

(gdb) frame 3
#3 0x000055555561a7fa in MmapOrderBook::Impl::getOrder (this=0x555555776170, orderId=&amp;#34;ORD-1726124231791862593&amp;#34;)
 at /home/hft_trading_system/strategyandtradingwitheventbus/src/order_management/mmap_order_book_impl.cpp:211
211 if (m_orders[i].id == orderId) {
(gdb) print orderId
$1 = &amp;#34;ORD-1726124231791862593&amp;#34;
(gdb) print m_orders[i].id
$2 = &amp;lt;error: Cannot access memory at address 0x7f4710000eb0&amp;gt;
(gdb) print m_orders[i]
$3 = {id = &amp;lt;error: Cannot access memory at address 0x7f4710000eb0&amp;gt;, instId = &amp;lt;error: Cannot access memory at address 0x7f4710000ed0&amp;gt;, 
 price = 58126.699999999997, quantity = 100, status = 3}
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>相关代码&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Order&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">instId&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">price&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">quantity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">status&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 0: pending, 1: filled, 2: cancelled
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个结构体直接在内存映射文件中使用，导致了我们遇到的问题。&lt;/p></description></item><item><title>Analysis of Configuration Management in High-Frequency Trading System</title><link>https://example.org/blog/config_managemeng_in_hft_system/</link><pubDate>Fri, 06 Sep 2024 01:47:52 +0800</pubDate><guid>https://example.org/blog/config_managemeng_in_hft_system/</guid><description>&lt;h1 id="高频交易系统配置管理方案分析" class="relative group">高频交易系统配置管理方案分析 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#%e9%ab%98%e9%a2%91%e4%ba%a4%e6%98%93%e7%b3%bb%e7%bb%9f%e9%85%8d%e7%bd%ae%e7%ae%a1%e7%90%86%e6%96%b9%e6%a1%88%e5%88%86%e6%9e%90" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h1>&lt;h2 id="当前方案概述" class="relative group">当前方案概述 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#%e5%bd%93%e5%89%8d%e6%96%b9%e6%a1%88%e6%a6%82%e8%bf%b0" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;pre tabindex="0">&lt;code class="language-Mermaid" data-lang="Mermaid">
graph TB
 CommonLib[&amp;#34;Common Library (MMAP)&amp;#34;]
 Exchange[&amp;#34;Exchange&amp;#34;]

 subgraph StrategyAndTrading[&amp;#34;StrategyAndTrading Component&amp;#34;]
 MDR[&amp;#34;MarketDataReader&amp;#34;]
 MDN[&amp;#34;MarketDataNormalizer&amp;#34;]
 SM[&amp;#34;StrategyManager&amp;#34;]
 subgraph Strategies[&amp;#34;Strategies&amp;#34;]
 S1[&amp;#34;Strategy 1&amp;#34;]
 S2[&amp;#34;Strategy 2&amp;#34;]
 SN[&amp;#34;Strategy N&amp;#34;]
 end
 OG[&amp;#34;OrderGenerator&amp;#34;]
 OV[&amp;#34;OrderValidator&amp;#34;]
 RP[&amp;#34;RiskProfiler&amp;#34;]
 RE[&amp;#34;RiskEvaluator&amp;#34;]
 OM[&amp;#34;OrderManager&amp;#34;]
 OE[&amp;#34;OrderExecutor&amp;#34;]
 OMO[&amp;#34;OrderMonitor&amp;#34;]
 PM[&amp;#34;PositionManager&amp;#34;]
 end

 CommonLib --&amp;gt;|1. Read MMAP| MDR
 MDR --&amp;gt;|2. Raw Market Data| MDN
 MDN --&amp;gt;|3. Normalized Data| SM
 SM --&amp;gt;|4. Distribute Data| Strategies
 Strategies --&amp;gt;|5. Generate Signals| OG
 OG --&amp;gt;|6. Create Orders| OV
 OV --&amp;gt;|7. Validated Orders| RP
 RP --&amp;gt;|8. Risk Profile| RE
 RE --&amp;gt;|9. Risk Evaluated Orders| OM
 OM --&amp;gt;|10. Managed Orders| OE
 OE &amp;lt;--&amp;gt;|11. Execute Orders| Exchange
 Exchange --&amp;gt;|12. Execution Results| OMO
 OMO --&amp;gt;|13. Order Updates| OM
 OM --&amp;gt;|14. Position Updates| PM
 PM -.-&amp;gt;|15. Position Feedback| SM

 classDef external fill:#f9f,stroke:#333,stroke-width:2px;
 classDef component fill:#bbf,stroke:#333,stroke-width:1px;
 classDef strategy fill:#bfb,stroke:#333,stroke-width:1px;
 class CommonLib,Exchange external;
 class MDR,MDN,SM,OG,OV,RP,RE,OM,OE,OMO,PM component;
 class S1,S2,SN strategy;
&lt;/code>&lt;/pre>&lt;ol>
&lt;li>Quote进程使用common静态库组件加载配置信息。&lt;/li>
&lt;li>配置信息加载到Quote进程的本地缓存中。&lt;/li>
&lt;li>使用观察者模式订阅common组件中config的变更。&lt;/li>
&lt;li>当配置变更时，Quote进程更新本地缓存、重新连接和重新订阅。&lt;/li>
&lt;/ol>
&lt;h2 id="优点分析" class="relative group">优点分析 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#%e4%bc%98%e7%82%b9%e5%88%86%e6%9e%90" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>模块化设计&lt;/strong>：&lt;/p></description></item><item><title>Lock Free Queue Application</title><link>https://example.org/blog/lockfree/</link><pubDate>Mon, 02 Sep 2024 02:10:33 +0800</pubDate><guid>https://example.org/blog/lockfree/</guid><description>&lt;h3 id="标题解决高频交易系统中的死锁从传统-eventbus-到无锁队列的优化之旅" class="relative group">标题：解决高频交易系统中的死锁：从传统 EventBus 到无锁队列的优化之旅 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#%e6%a0%87%e9%a2%98%e8%a7%a3%e5%86%b3%e9%ab%98%e9%a2%91%e4%ba%a4%e6%98%93%e7%b3%bb%e7%bb%9f%e4%b8%ad%e7%9a%84%e6%ad%bb%e9%94%81%e4%bb%8e%e4%bc%a0%e7%bb%9f-eventbus-%e5%88%b0%e6%97%a0%e9%94%81%e9%98%9f%e5%88%97%e7%9a%84%e4%bc%98%e5%8c%96%e4%b9%8b%e6%97%85" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>引言
在高频交易系统中，每一毫秒都至关重要。最近在系统中遇到了一个令人头疼的死锁问题，这不仅影响了系统的性能，还危及了其稳定性。本文将详细讲述如何发现、分析并最终解决这个问题，以及从中学到的宝贵经验。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>问题发现
在一次例行的系统监控中，注意到系统偶尔会出现短暂的停顿。通过日志分析，发现 MarketDataReader 的 readingLoop() 函数只执行了一次就停止了。这引起了的警觉。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>问题分析
首先查看了 MarketDataReader 的日志：&lt;/p>
&lt;pre tabindex="0">&lt;code>[2024-09-01 13:02:08.472] [main_logger] [MarketDataReader.cpp:38] [info] [thread 4048966] [start] Starting market data reader...
[2024-09-01 13:02:08.472] [main_logger] [MarketDataReader.cpp:40] [info] [thread 4048966] [start] Starting start,and running_ = true
[2024-09-01 13:02:08.489] [main_logger] [MarketDataReader.cpp:63] [info] [thread 4048967] [readingLoop] Starting reading loop...,and running_ = true
[2024-09-01 13:02:08.490] [main_logger] [MarketDataReader.cpp:65] [info] [thread 4048967] [readingLoop] Reading loop...
[2024-09-01 13:02:08.490] [main_logger] [MarketDataReader.cpp:83] [info] [thread 4048967] [processSymbol] Processing symbol: BTC-USDT
[2024-09-01 13:02:08.490] [main_logger] [MarketDataReader.cpp:87] [info] [thread 4048967] [processSymbol] timeSinceLastUpdate: 24305 can into loop
[2024-09-01 13:02:08.490] [main_logger] [MarketDataStore.cpp:137] [info] [thread 4048967] [readLatestData] Read data for symbol = BTC-USDT, timestamp = 1725228018
[2024-09-01 13:02:08.491] [main_logger] [MarketDataReader.cpp:94] [info] [thread 4048967] [processSymbol] currentData: 58124.24
[2024-09-01 13:02:08.491] [main_logger] [MarketDataReader.cpp:95] [info] [thread 4048967] [processSymbol] publish marketDataEvent
[2024-09-01 13:02:08.491] [main_logger] [EventBus.h:59] [info] [thread 4048967] [publish] publish event: 15MarketDataEvent
[2024-09-01 13:02:08.492] [main_logger] [StrategyManager.cpp:38] [info] [thread 4048967] [processSignals] publish orderEvent: BTC-USDT
[2024-09-01 13:02:08.492] [main_logger] [EventBus.h:59] [info] [thread 4048967] [publish] publish event: 10OrderEvent
&lt;/code>&lt;/pre>&lt;p>日志显示，readingLoop 确实开始执行，但在处理完一个市场数据事件后就没有继续。这暗示可能存在死锁。&lt;/p></description></item></channel></rss>