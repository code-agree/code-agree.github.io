<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>project management on Yu's Space</title><link>https://code-agree.github.io/tags/project-management/</link><description>Recent content in project management on Yu's Space</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 16 Oct 2024 02:04:51 +0800</lastBuildDate><atom:link href="https://code-agree.github.io/tags/project-management/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub私有仓库协同开发指南</title><link>https://code-agree.github.io/blog/2025-06-24-project_management_best_practices/</link><pubDate>Wed, 16 Oct 2024 02:04:51 +0800</pubDate><guid>https://code-agree.github.io/blog/2025-06-24-project_management_best_practices/</guid><description>目录 # 简介 仓库结构和分支策略 协作者权限管理 保护主分支 Pull Request 和代码审查流程 持续集成与部署 (CI/CD) 文档和沟通 最佳实践和注意事项 简介 #在没有高级 GitHub 功能的私有仓库中进行协同开发可能具有挑战性，但通过正确的实践和工具，我们可以建立一个高效、安全的开发环境。本指南总结了我们讨论的主要策略和技术。
仓库结构和分支策略 # 主分支：main（稳定、可部署的代码） 开发分支：main_for_dev（日常开发工作） 特性分支：从 main_for_dev 分出，用于开发新功能 工作流程：
从 main_for_dev 创建特性分支 在特性分支上开发 完成后，创建 Pull Request 到 main_for_dev 代码审查和测试 合并到 main_for_dev 定期将 main_for_dev 合并到 main 协作者权限管理 #GitHub 私有仓库提供以下权限级别：
Read Triage Write Maintain Admin 设置步骤：
进入仓库 &amp;ldquo;Settings&amp;rdquo; &amp;gt; &amp;ldquo;Collaborators and teams&amp;rdquo; 点击 &amp;ldquo;Add people&amp;rdquo; 或 &amp;ldquo;Add teams&amp;rdquo; 输入用户名并选择适当的权限级别 最佳实践：
遵循最小权限原则 定期审查和更新权限 保护主分支 #由于缺乏高级分支保护功能，我们采用以下策略：
团队约定：
禁止直接推送到 main 分支 所有更改通过 PR 进行 Git Hooks： 创建 pre-push hook（.</description></item></channel></rss>