<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>System Programming on Yu's Space</title><link>https://code-agree.github.io/tags/system-programming/</link><description>Recent content in System Programming on Yu's Space</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 15 Oct 2024 02:45:13 +0800</lastBuildDate><atom:link href="https://code-agree.github.io/tags/system-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Fork机制详解：从基础到高级应用</title><link>https://code-agree.github.io/blog/fork/</link><pubDate>Tue, 15 Oct 2024 02:45:13 +0800</pubDate><guid>https://code-agree.github.io/blog/fork/</guid><description>&lt;h2 id="1-引言" class="relative group">1. 引言 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#1-%e5%bc%95%e8%a8%80" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;p>Fork是Unix/Linux系统中最基本也是最强大的系统调用之一。它允许一个进程创建一个新的进程,这个新进程是原进程的一个几乎完全相同的副本。本次技术分享将深入探讨fork机制,从基本概念到高级应用。&lt;/p>
&lt;h2 id="2-fork的基本原理" class="relative group">2. Fork的基本原理 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#2-fork%e7%9a%84%e5%9f%ba%e6%9c%ac%e5%8e%9f%e7%90%86" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h2>&lt;h3 id="21-什么是fork" class="relative group">2.1 什么是Fork &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#21-%e4%bb%80%e4%b9%88%e6%98%affork" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>Fork是一个系统调用,用于创建一个新的进程。新进程（称为子进程）是调用进程（称为父进程）的一个几乎完全相同的副本。&lt;/p>
&lt;h3 id="22-fork的工作原理" class="relative group">2.2 Fork的工作原理 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#22-fork%e7%9a%84%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>当一个进程调用fork时:&lt;/p>
&lt;ol>
&lt;li>系统会创建一个新的进程。&lt;/li>
&lt;li>新进程是父进程的一个副本,包括代码段、数据段、堆栈等。&lt;/li>
&lt;li>子进程获得父进程数据空间、堆和栈的副本。&lt;/li>
&lt;li>父进程和子进程继续执行fork调用之后的代码。&lt;/li>
&lt;/ol>
&lt;h3 id="23-fork的返回值" class="relative group">2.3 Fork的返回值 &lt;span class="absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100">&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700" style="text-decoration-line: none !important;" href="#23-fork%e7%9a%84%e8%bf%94%e5%9b%9e%e5%80%bc" aria-label="Anchor">#&lt;/a>&lt;/span>&lt;/h3>&lt;p>Fork调用会返回两次:&lt;/p></description></item></channel></rss>