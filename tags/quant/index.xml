<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quant on Yu's Space</title><link>https://code-agree.github.io/tags/quant/</link><description>Recent content in Quant on Yu's Space</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 03 Aug 2024 00:00:00 +0800</lastBuildDate><atom:link href="https://code-agree.github.io/tags/quant/index.xml" rel="self" type="application/rss+xml"/><item><title>Quant system</title><link>https://code-agree.github.io/projects/quant_system/</link><pubDate>Sat, 03 Aug 2024 00:00:00 +0800</pubDate><guid>https://code-agree.github.io/projects/quant_system/</guid><description>High-Frequency Trading System #Project Overview #Independently designed and developed a cutting-edge high-frequency trading system with industry-leading performance.
Key Features # Modular Architecture: Utilizing advanced C++17 and key design patterns Observer pattern for event-driven architecture Factory method for flexible algorithm creation Strategy pattern for interchangeable trading strategies Ultra-Low Latency Event Bus: Implemented using lock-free queues Optimized WebSocket: For high-throughput market data and order execution Memory-Mapped File I/O: Leveraging kernel-level page cache for asynchronous, low-latency disk operations Performance Metrics # Metric Performance Order Execution Latency &amp;lt; 50 Î¼s Message Processing Throughput &amp;gt; 1,000 messages/second Technical Stack # C++ (C++17) WebSockets Lock-free algorithms Memory-mapped I/O SIMD optimization Event-driven architecture Specializations # Ultra-low latency systems Concurrent programming Design patterns Market microstructure Kernel-level optimizations Project Highlights # Advanced C++ Implementation: Leveraged cutting-edge C++17 features to create a robust and efficient system architecture.</description></item></channel></rss>